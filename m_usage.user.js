// ==UserScript==
// @name          Mathematica Usage tooltip
// @author        Simon Schmidt
// @version       1.4.1
// @updateURL     http://simonschmidt.github.io/SE-Usage-Message/m_usage.meta.js
// @downloadURL   http://simonschmidt.github.io/SE-Usage-Message/m_usage.user.js
// @description	  ::usage tooltip for Mathematica symbols
// @require       http://mutation-summary.googlecode.com/git/src/mutation-summary.js
// @include       http://mathematica.stackexchange.com/*
// @include       http://meta.mathematica.stackexchange.com/*
// ==/UserScript==

//=====================
//  UserScript Source
//=====================

// We only want to run the following code on certain pages, so
// match the current page against this RegEx pattern
// (Taken from the editor-button script by halirutan)
if (location.pathname.match(/^\/(?:questions\/(?:ask|\d+)|review\/(?:close|first-posts|late-answers|low-quality-posts|reopen|suggested-edits)\/\d+|posts\/\d+\/edit|users\/edit|edit-tag-wiki)/) === null)
    return;


function begin(){
    StackExchange.ready(function() {

        function TagFunction(elem){
            var tooltip = usage[elem.innerHTML];
            if ( tooltip ){
                elem.setAttribute('title', tooltip);
            }
        }

        // Detect new code and add the tooltip
        var observer = new MutationSummary({
            // The prettify highlighter uses kwd class for builtin symbols
            queries: [{ element: 'code' }, {element: 'span.kwd'}],
            callback:
              function (summaries) {
                summaries[0].added.forEach( TagFunction );
                summaries[1].added.forEach( TagFunction );
              }
        });

        // Give tooltip to already existing code
        $('span.kwd').each(function(i, e){TagFunction(e);});
        $('code').each(function(i, e){TagFunction(e);});
    });
}


// Same symbols as in the lang-mma.js prettify script
// Usage messages textified and exported from Mathemtica 8.0.4

var usage={"AbelianGroup" : "AbelianGroup[{n₁,n₂,…}] represents the direct product of the cyclic groups of degrees n₁,n₂,….", 
"Abort" : "Abort[] generates an interrupt to abort a computation. ", 
"AbortKernels" : "AbortKernels[] aborts evaluations running in all parallel subkernels.", 
"AbortProtect" : "AbortProtect[expr] evaluates expr, saving any aborts until the evaluation is complete. ", 
"Above" : "Above is used to specify alignment in print forms such as ColumnForm and TableForm.", 
"Abs" : "Abs[z] gives the absolute value of the real or complex number z. ", 
"AbsoluteCurrentValue" : "AbsoluteCurrentValue[item] gives the absolute current value of item at a location in the Mathematica system and interface. \nAbsoluteCurrentValue[{item,spec}] gives the absolute current value for the feature of item specified by spec.\nAbsoluteCurrentValue[obj,item] gives the absolute current value of item associated with the object obj. ", 
"AbsoluteDashing" : "AbsoluteDashing[{d₁,d₂,…}] is a graphics directive which specifies that lines which follow are to be drawn dashed, with successive segments having absolute lengths d₁, d₂, … (repeated cyclically). \nAbsoluteDashing[d] is equivalent to AbsoluteDashing[{d,d}]. ", 
"AbsoluteFileName" : "AbsoluteFileName[\"name\"] gives the full absolute version of the name for a file in your filesystem.", 
"AbsoluteOptions" : "AbsoluteOptions[expr] gives the absolute settings of options specified in an expression such as a graphics object. \nAbsoluteOptions[expr,name] gives the absolute setting for the option name. \nAbsoluteOptions[expr,{name₁,name₂,…}] gives a list of the absolute settings for the options nameᵢ. \nAbsoluteOptions[object] gives the absolute settings for options associated with an external object such as a NotebookObject. ", 
"AbsolutePointSize" : "AbsolutePointSize[d] is a graphics directive which specifies that points which follow are to be shown if possible as circular regions with absolute diameter d. ", 
"AbsoluteThickness" : "AbsoluteThickness[d] is a graphics directive which specifies that lines which follow are to be drawn with absolute thickness d. ", 
"AbsoluteTime" : "AbsoluteTime[] gives the total number of seconds since the beginning of January 1, 1900, in your time zone.\nAbsoluteTime[{y,m,d,h,m,s}] gives the absolute time specification corresponding to a date list. \nAbsoluteTime[\"string\"] gives the absolute time specification corresponding to a date string.\nAbsoluteTime[{\"string\",{\"e \"\n  1,\"e \"\n  2,…}}] takes the date string to contain the elements \"eᵢ\".", 
"AbsoluteTiming" : "AbsoluteTiming[expr] evaluates expr, returning a list of the absolute number of seconds in real time that have elapsed, together with the result obtained. ", 
"AccountingForm" : "AccountingForm[expr] prints with all numbers in expr given in standard accounting notation. \nAccountingForm[expr,n] prints with numbers given to n‐digit precision. ", 
"Accumulate" : "Accumulate[list] gives a list of the successive accumulated totals of elements in list. ", 
"Accuracy" : "Accuracy[x] gives the effective number of digits to the right of the decimal point in the number x. ", 
"AccuracyGoal" : "AccuracyGoal is an option for various numerical operations which specifies how many effective digits of accuracy should be sought in the final result. ", 
"ActionMenu" : "ActionMenu[name,{lbl₁:>act₁,lbl₂:>act₂,…}] represents an action menu with label name and with items labeled lblᵢ that evaluates the expression actᵢ if the corresponding item is chosen.", 
"Active" : "Active is an option for ButtonBox, Cell, and Notebook that specifies whether a button should be active. ", 
"ActiveStyle" : "ActiveStyle is an option for Hyperlink and related constructs that specifies styles to add when the constructs are active, typically as a result of the mouse being over them. ", 
"AcyclicGraphQ" : "AcyclicGraphQ[g] yields True if the graph g is an acyclic graph and False otherwise.", 
"AddOnHelpPath" : "AddOnHelpPath is a global option that specifies which directories are searched for additional help files used within the help system.", 
"AddTo" : "x+=dx adds dx to x and returns the new value of x. ", 
"AdjacencyGraph" : "AdjacencyGraph[amat] gives the graph with adjacency matrix amat.\nAdjacencyGraph[{v₁,v₂,…},amat] gives the graph with vertices vᵢ and adjacency matrix amat.", 
"AdjacencyMatrix" : "AdjacencyMatrix[g] gives the vertex–vertex adjacency matrix of the graph g.", 
"AdjustmentBox" : "AdjustmentBox[box,opts] is a low-level box construct which displays with the placement of box adjusted using the options given. ", 
"AffineTransform" : "AffineTransform[m] gives a TransformationFunction that represents an affine transform that maps r to m.r. \nAffineTransform[{m,v}] gives an affine transform that maps r to m.r+v.", 
"AiryAi" : "AiryAi[z] gives the Airy function Ai(z). ", 
"AiryAiPrime" : "AiryAiPrime[z] gives the derivative of the Airy function Superscript[Ai, ′](z). ", 
"AiryAiZero" : "AiryAiZero[k] represents the kᵗʰ zero of the Airy function Ai(x).\nAiryAiZero[k,x₀] represents the kᵗʰ zero less than x₀.", 
"AiryBi" : "AiryBi[z] gives the Airy function Bi(z). ", 
"AiryBiPrime" : "AiryBiPrime[z] gives the derivative of the Airy function Superscript[Bi, ′](z). ", 
"AiryBiZero" : "AiryBiZero[k] represents the kᵗʰ zero of the Airy function Bi(x).\nAiryBiZero[k,x₀] represents the kᵗʰ zero less than x₀.", 
"AlgebraicIntegerQ" : "AlgebraicIntegerQ[a] yields True if a is an algebraic integer, and yields False otherwise.", 
"AlgebraicNumber" : "AlgebraicNumber[θ,{c₀,c₁,…,cₙ}] represents the algebraic number in the field [θ] given by c₀+c₁θ +…+cₙ θⁿ.", 
"AlgebraicNumberDenominator" : "AlgebraicNumberDenominator[a] gives the smallest positive integer n such that n a is an algebraic integer.", 
"AlgebraicNumberNorm" : "AlgebraicNumberNorm[a] gives the norm of the algebraic number a.", 
"AlgebraicNumberPolynomial" : "AlgebraicNumberPolynomial[a,x] gives the polynomial in x corresponding to the AlgebraicNumber object a.", 
"AlgebraicNumberTrace" : "AlgebraicNumberTrace[a] gives the trace of the algebraic number a.", 
"AlgebraicRulesData" : "AlgebraicRulesData is an object returned by AlgebraicRules. Its OutputForm appears to be a list of rules, but the rules will be used algebraically rather than syntactically by Replace and related functions.", 
"Algebraics" : "Algebraics represents the domain of algebraic numbers, as in x∈Algebraics. ", 
"AlgebraicUnitQ" : "AlgebraicUnitQ[a] yields True if a is an algebraic unit, and yields False otherwise.", 
"Alignment" : "Alignment is an option which specifies how the contents of a displayed object should be aligned within the available area in the object.", 
"AlignmentPoint" : "AlignmentPoint is an option which specifies how objects should by default be aligned when they appear in Inset.", 
"All" : "All is a setting used for certain options. In Part and related functions, All specifies all parts at a particular level. ", 
"AllowGroupClose" : "AllowGroupClose is an option for Cell that specifies whether a cell group can be closed normally.", 
"AllowInlineCells" : "AllowInlineCells is an option for cells that specifies whether inline cells are permitted within a cell.", 
"AllowReverseGroupClose" : "AllowReverseGroupClose is an option for Cell that specifies whether a cell group can be reverse closed.", 
"AllowScriptLevelChange" : "AllowScriptLevelChange is an option for fractions and grids that controls whether certain operators, such as ∑, ∏, and ∫, always appear smaller than normal size.", 
"AlphaChannel" : "AlphaChannel[image] returns the alpha channel of image.", 
"AlternatingGroup" : "AlternatingGroup[n] represents the alternating group of degree n.", 
"AlternativeHypothesis" : "AlternativeHypothesis is an option for hypothesis testing functions like LocationTest that specifies the alternative hypothesis.", 
"Alternatives" : "p₁|p₂|… is a pattern object which represents any of the patterns pᵢ. ", 
"AmbientLight" : "AmbientLight is an option for Graphics3D and related functions that gives the level of simulated ambient illumination in a three-dimensional picture. ", 
"Analytic" : "Analytic is an option for Limit and Series. With Analytic -> True, unrecognized functions are treated as analytic, and processed using Taylor series expansions; with Analytic -> False, Taylor series are not used unless the function is recognized as analytic.", 
"AnchoredSearch" : "AnchoredSearch is an option for Find and FindList that specifies whether the text searched for must be at the beginning of a record. ", 
"And" : "e₁&&e₂&&… is the logical AND function. It evaluates its arguments in order, giving False immediately if any of them are False, and True if they are all True. ", 
"AndersonDarlingTest" : "AndersonDarlingTest[data] tests whether data is normally distributed using the Anderson–Darling test.\nAndersonDarlingTest[data,dist] tests whether data is distributed according to dist using the Anderson–Darling test.\nAndersonDarlingTest[data,dist,\"property\"] returns the value of \"property\".", 
"AngerJ" : "AngerJ[ν,z] gives the Anger function Jᵥ(z).\nAngerJ[ν,μ,z] gives the associated Anger function J Subsuperscript[, ν, μ](z).", 
"AngleBracket" : "AngleBracket[x,y,…] displays as 〈x,y,…〉.", 
"Animate" : "Animate[expr,{u,uₘᵢₙ,uₘₐₓ}] generates an animation of expr in which u varies continuously from uₘᵢₙ to uₘₐₓ. \nAnimate[expr,{u,uₘᵢₙ,uₘₐₓ,du}] takes u to vary in steps du. \nAnimate[expr,{u,{u₁,u₂,…}}] makes u take on discrete values u₁, u₂, …. \nAnimate[expr,{u,…},{v,…},…] varies all the variables u, v, …. ", 
"AnimationCycleOffset" : "AnimationCycleOffset is an option for cells that specifies the relative position of the next graphic to be used in an animation sequence.", 
"AnimationCycleRepetitions" : "AnimationCycleRepetitions is an option for cells that specifies the number of times a given animation cycle should be repeated.", 
"AnimationDirection" : "AnimationDirection is an option which specifies the direction to run an animation. ", 
"AnimationDisplayTime" : "AnimationDisplayTime is an option for Cell that specifies the minimum time in seconds for which a cell should be displayed in the course of an animation that runs through a sequence of selected cells. ", 
"AnimationRate" : "AnimationRate is an option for Animate and Animator that specifies at what rate an animation should run, in units per second. ", 
"AnimationRepetitions" : "AnimationRepetitions is an option to Animate and related functions that specifies how many times the animation they create runs before stopping.", 
"AnimationRunning" : "AnimationRunning is an option to Animate and related functions that specifies whether the animation they create is running.", 
"Animator" : "Animator[u] represents an object that displays with the value of u being continually increased from 0 to 1 with time. \nAnimator[u,{uₘᵢₙ,uₘₐₓ}] makes u vary from uₘᵢₙ to uₘₐₓ. \nAnimator[u,{uₘᵢₙ,uₘₐₓ,du}] makes u vary in steps du. \nAnimator[u,{uₘᵢₙ,uₘₐₓ},ups] makes the value of u increase at a rate of ups units per second. ", 
"Annotation" : "Annotation[expr,data] represents an expression expr, with annotation data.\nAnnotation[expr,data,\"type\"] specifies the type of annotation being given.", 
"Annuity" : "Annuity[p,t] represents an annuity of fixed payments p made over t periods.\nAnnuity[p,t,q] represents a series of payments occurring at time intervals q.\nAnnuity[{p,{pᵢₙᵢₜᵢₐₗ,Subscript[p,final]}},t,q] represents an annuity with the specified initial and final payments.", 
"AnnuityDue" : "AnnuityDue[p,t] represents an annuity due of fixed payments p made over t periods.\nAnnuityDue[p,t,q] represents a series of payments occurring at time intervals q.\nAnnuityDue[{p,{pᵢₙᵢₜᵢₐₗ,Subscript[p,final]}},t,q] represents an annuity due with the specified initial and final payments.", 
"Antialiasing" : "Antialiasing is a Style option which specifies whether antialiasing should be done in rendering graphics. ", 
"Apart" : "Apart[expr] rewrites a rational expression as a sum of terms with minimal denominators. \nApart[expr,var] treats all variables other than var as constants. ", 
"ApartSquareFree" : "ApartSquareFree[expr] rewrites a rational expression as a sum of terms whose denominators are powers of square-free polynomials. \nApartSquareFree[expr,var] treats all variables other than var as constants. ", 
"Appearance" : "Appearance is an option for displayed objects such as Button and Slider that specifies the general type of appearance they should have. ", 
"AppearanceElements" : "AppearanceElements is an option for functions like Manipulate that specifies what elements should be included in the displayed form of the object generated.", 
"AppellF1" : "AppellF1[a,b₁,b₂,c,x,y] is the Appell hypergeometric function of two variables F₁(a;b₁,b₂;c;x,y). ", 
"Append" : "Append[expr,elem] gives expr with elem appended. ", 
"AppendTo" : "AppendTo[s,elem] appends elem to the value of s, and resets s to the result. ", 
"Apply" : "Apply[f,expr] or f@@expr replaces the head of expr by f. \nApply[f,expr,{1}] or f@@@expr replaces heads at level 1 of expr by f.\nApply[f,expr,levelspec] replaces heads in parts of expr specified by levelspec. ", 
"ArcCos" : "ArcCos[z] gives the arc cosine cos⁻¹(z) of the complex number z. ", 
"ArcCosh" : "ArcCosh[z] gives the inverse hyperbolic cosine cosh⁻¹(z) of the complex number z. ", 
"ArcCot" : "ArcCot[z] gives the arc cotangent cot⁻¹(z) of the complex number z. ", 
"ArcCoth" : "ArcCoth[z] gives the inverse hyperbolic cotangent coth⁻¹(z) of the complex number z. ", 
"ArcCsc" : "ArcCsc[z] gives the arc cosecant csc⁻¹(z) of the complex number z. ", 
"ArcCsch" : "ArcCsch[z] gives the inverse hyperbolic cosecant csch⁻¹(z) of the complex number z. ", 
"ArcSec" : "ArcSec[z] gives the arc secant sec⁻¹(z) of the complex number z. ", 
"ArcSech" : "ArcSech[z] gives the inverse hyperbolic secant sech⁻¹(z) of the complex number z. ", 
"ArcSin" : "ArcSin[z] gives the arc sine sin⁻¹(z) of the complex number z. ", 
"ArcSinDistribution" : "ArcSinDistribution[{xₘᵢₙ,xₘₐₓ}] represents the arc sine distribution supported between xₘᵢₙ and xₘₐₓ.", 
"ArcSinh" : "ArcSinh[z] gives the inverse hyperbolic sine sinh⁻¹(z) of the complex number z. ", 
"ArcTan" : "ArcTan[z] gives the arc tangent tan⁻¹(z) of the complex number z. \nArcTan[x,y] gives the arc tangent of (y)\/(x), taking into account which quadrant the point (x,y) is in. ", 
"ArcTanh" : "ArcTanh[z] gives the inverse hyperbolic tangent tanh⁻¹(z) of the complex number z. ", 
"Arg" : "Arg[z] gives the argument of the complex number z. ", 
"ArgMax" : "ArgMax[f,x] gives a position xₘₐₓ at which f is maximized.\nArgMax[f,{x,y,…}] gives a position {xₘₐₓ,yₘₐₓ,…} at which f is maximized.\nArgMax[{f,cons},{x,y,…}] gives a position at which f is maximized subject to the constraints cons. \nArgMax[{f,cons},{x,y,…},dom] gives a position at which f is maximized over the domain dom, typically Reals or Integers.", 
"ArgMin" : "ArgMin[f,x] gives a position xₘᵢₙ at which f is minimized.\nArgMin[f,{x,y,…}] gives a position {xₘᵢₙ,yₘᵢₙ,…} at which f is minimized.\nArgMin[{f,cons},{x,y,…}] gives a position at which f is minimized subject to the constraints cons. \nArgMin[{f,cons},{x,y,…},dom] gives a position at which f is minimized over the domain dom, typically Reals or Integers.", 
"ArgumentCountQ" : "ArgumentCountQ[head, len, min, max] tests whether the number len of arguments of a function head is between min and max.\nArgumentCountQ[head,len,{m₁,m₂,…,mᵢ}] tests whether the number len of arguments of a function head is one of the mᵢ.", 
"ArithmeticGeometricMean" : "ArithmeticGeometricMean[a,b] gives the arithmetic‐geometric mean of a and b. ", 
"Array" : "Array[f,n] generates a list of length n, with elements f[i]. \nArray[f,{n₁,n₂,…}] generates an n₁⨯n₂⨯… array of nested lists, with elements f[i₁,i₂,…]. \nArray[f,{n₁,n₂,…},{r₁,r₂,…}] generates a list using the index origins rᵢ (default 1). \nArray[f,dims,origin,h] uses head h, rather than List, for each level of the array. ", 
"ArrayComponents" : "ArrayComponents[array] gives an array in which all identical elements of array are replaced by an integer index representing the component in which the element lies.\nArrayComponents[array,level] finds the identical elements at the specified level in array.", 
"ArrayDepth" : "ArrayDepth[expr] gives the depth to which expr is a full array, with all the parts at a particular level being lists of the same length, or is a SparseArray object. ", 
"ArrayFlatten" : "ArrayFlatten[{{m₁₁,m₁₂,…},{m₂₁,m₂₂,…},…}] creates a single flattened matrix from a matrix of matrices Subscript[m,ij]. \nArrayFlatten[a,r] flattens out r pairs of levels in the array a.", 
"ArrayPad" : "ArrayPad[array,m] gives an array with m 0s of padding on every side. \nArrayPad[array,m,padding] uses the specified padding.\nArrayPad[array,{m,n},…] pads with m elements at the beginning and n elements at the end. \nArrayPad[array,{{m₁,n₁},{m₂,n₂},…},…] pads with mᵢ, nᵢ elements at level i in array. ", 
"ArrayPlot" : "ArrayPlot[array] generates a plot in which the values in an array are shown in a discrete array of squares. ", 
"ArrayQ" : "ArrayQ[expr] gives True if expr is a full array or a SparseArray object, and gives False otherwise. \nArrayQ[expr,patt] requires expr to be a full array with a depth that matches the pattern patt. \nArrayQ[expr,patt,test] requires also that test yield True when applied to each of the array elements in expr. ", 
"ArrayRules" : "ArrayRules[SparseArray[…]] gives the rules {pos₁->val₁,pos₂->val₂,…} specifying elements in a sparse array. \nArrayRules[list] gives rules for SparseArray[list]. ", 
"Arrow" : "Arrow[{pt₁,pt₂}] is a graphics primitive that represents an arrow from pt₁ to pt₂.\nArrow[{pt₁,pt₂},s] represents an arrow with its ends set back from pt₁ and pt₂ by a distance s. \nArrow[{pt₁,pt₂},{s₁,s₂}] sets back by s₁ from pt₁ and s₂ from pt₂. \nArrow[curve,…] represents an arrow following the specified curve.", 
"Arrowheads" : "Arrowheads[spec] is a graphics directive specifying that arrows that follow should have arrowheads with sizes, positions, and forms specified by spec. ", 
"AspectRatio" : "AspectRatio is an option for Graphics and related functions that specifies the ratio of height to width for a plot. ", 
"AspectRatioFixed" : "AspectRatioFixed is an option for Cell that specifies whether graphics in the cell should be constrained to stay the same shape when they are interactively resized using the front end. ", 
"Assert" : "Assert[test] represents the assertion that test is True. If assertions have been enabled, test is evaluated when the assertion is encountered. If test is not True, then an assertion failure is generated.\nAssert[test,tag] specifies a tag that will be used to identify the assertion if it fails.", 
"Assuming" : "Assuming[assum,expr] evaluates expr with assum appended to $Assumptions, so that assum is included in the default assumptions used by functions such as Refine, Simplify, and Integrate. ", 
"Assumptions" : "Assumptions is an option for functions such as Simplify, Refine, and Integrate that specifies default assumptions to be made about symbolic quantities. ", 
"AstronomicalData" : "AstronomicalData[\"name\",\"property\"] gives the value of the specified property of the astronomical object with the specified name.\nAstronomicalData[\"name\",{\"property\",date}] gives the value of a property at a particular date and time.", 
"Asynchronous" : "Asynchronous is an option for WolframAlpha that determines whether to use the asynchronous features of the Wolfram|Alpha API.", 
"AtomQ" : "AtomQ[expr] yields True if expr is an expression which cannot be divided into subexpressions, and yields False otherwise. ", 
"Attributes" : "Attributes[symbol] gives the list of attributes for a symbol. ", 
"AugmentedSymmetricPolynomial" : "AugmentedSymmetricPolynomial[{r₁,r₂,…}] represents a formal augmented symmetric polynomial with exponents r₁, r₂, ….\nAugmentedSymmetricPolynomial[{{r₁₁,…,Subscript[r,1n]},{r₂₁,…,Subscript[r,2n]},…}] represents a multivariate formal augmented symmetric polynomial with exponent vectors {r₁₁, …, Subscript[r,1n]}, {r₂₁, …, Subscript[r,2n]}, ….\nAugmentedSymmetricPolynomial[rspec,data] gives the augmented symmetric polynomial in data.", 
"AutoAction" : "AutoAction is an option for objects such as Slider, Locator, and Button that specifies whether they should automatically take action whenever the mouse pointer is over them, even if they are not clicked. ", 
"AutoDelete" : "AutoDelete is an option for boxes that specifies whether a box is automatically deleted when its contents are edited.", 
"AutoGeneratedPackage" : "AutoGeneratedPackage is an option for notebooks that specifies whether a package is automatically created when a notebook that contains initialization cells or groups is saved.", 
"AutoIndent" : "AutoIndent is an option for Style and Cell that specifies what automatic indentation should be done at the beginning of a new line after an explicit return character has been entered. ", 
"AutoItalicWords" : "AutoItalicWords is an option for Cell that gives a list of words that should automatically be put in italics when they are entered. ", 
"AutoloadPath" : "AutoloadPath is a global option that specifies from which directories packages are automatically loaded when Mathematica is started.", 
"Automatic" : "Automatic represents an option or other value that is to be chosen automatically by a built‐in function. ", 
"AutoMultiplicationSymbol" : "AutoMultiplicationSymbol is an option for objects such as Cell and Notebook that specifies whether to automatically display a multiplication symbol between numbers that would be multiplied if evaluated.", 
"AutoOpenNotebooks" : "AutoOpenNotebooks is a global option that specifies which notebooks should be automatically opened when Mathematica is started.", 
"AutoOpenPalettes" : "AutoOpenPalettes is a global option that specifies the palettes that are automatically opened when Mathematica is started.", 
"AutorunSequencing" : "AutorunSequencing is an option for Manipulate that specifies how autorun should use the controls provided.", 
"AutoScroll" : "AutoScroll is an option to SelectionMove and related functions that specifies whether a notebook should automatically be scrolled to display the current selection.", 
"AutoSpacing" : "AutoSpacing is an option for Style and Cell that specifies whether spaces between successive characters should be adjusted automatically. ", 
"Axes" : "Axes is an option for graphics functions that specifies whether axes should be drawn. ", 
"AxesEdge" : "AxesEdge is an option for three-dimensional graphics functions that specifies on which edges of the bounding box axes should be drawn. ", 
"AxesLabel" : "AxesLabel is an option for graphics functions that specifies labels for axes. ", 
"AxesOrigin" : "AxesOrigin is an option for graphics functions that specifies where any axes drawn should cross. ", 
"AxesStyle" : "AxesStyle is an option for graphics functions that specifies how axes should be rendered. ", 
"Axis" : "Axis is a symbol that represents the axis for purposes of alignment and positioning. ", 
"BabyMonsterGroupB" : "BabyMonsterGroupB[] represents the sporadic simple baby monster group B.", 
"Back" : "Back is a symbol that represents the back of a graphic for purposes of placement and alignment.", 
"Background" : "Background is an option that specifies what background color to use. ", 
"Backslash" : "Backslash[x,y,…] displays as x∖y∖….", 
"Backward" : "Backward is a symbol that represents the backward direction for purposes of motion and animation.", 
"Band" : "Band[{i,j}] represents the sequence of positions on the diagonal band that starts with {i,j} in a sparse array.\nBand[{iₘᵢₙ,jₘᵢₙ,…},{iₘₐₓ,jₘₐₓ,…}] represents the positions between {iₘᵢₙ,jₘᵢₙ,…} and {iₘₐₓ,jₘₐₓ,…}.\nBand[{iₘᵢₙ,jₘᵢₙ,…},{iₘₐₓ,jₘₐₓ,…},{di,dj,…}] represents positions starting with {iₘᵢₙ,jₘᵢₙ,…} and then moving with step {di,dj,…}.", 
"BarabasiAlbertGraphDistribution" : "BarabasiAlbertGraphDistribution[n,k] represents a Barabasi–Albert graph distribution for n-vertex graphs where a new vertex with k edges is added at each step. ", 
"BarChart" : "BarChart[{y₁,y₂,…}] makes a bar chart with bar lengths y₁,  y₂, ….\nBarChart[{…,wᵢ[yᵢ,…],…,Subscript[w,j][Subscript[y,j],…],…}] makes a bar chart with bar features defined by the symbolic wrappers wₖ.\nBarChart[{data₁,data₂,…}] makes a bar chart from multiple datasets dataᵢ. ", 
"BarChart3D" : "BarChart3D[{y₁,y₂,…}] makes a 3D bar chart with bar lengths y₁, y₂, ….\nBarChart3D[{…,wᵢ[yᵢ,…],…,Subscript[w,j][Subscript[y,j],…],…}] makes a 3D bar chart with bar features defined by the symbolic wrappers wₖ.\nBarChart3D[{data₁,data₂,…}] makes a 3D bar chart from multiple datasets dataᵢ. ", 
"BarnesG" : "BarnesG[z] gives the Barnes G-function G(z).", 
"BarOrigin" : "BarOrigin is an option to BarChart and related functions that specifies the origin placement for bars. ", 
"BarSpacing" : "BarSpacing is an option to BarChart and related functions that controls the spacing between bars and groups of bars.", 
"BaseForm" : "BaseForm[expr,n] prints with the numbers in expr given in base n. ", 
"Baseline" : "Baseline is a symbol that represents the baseline for purposes of alignment and positioning. ", 
"BaselinePosition" : "BaselinePosition is an option that specifies where the baseline of an object is considered to be for purposes of alignment with surrounding text or other expressions. ", 
"BaseStyle" : "BaseStyle is an option for formatting and related constructs that specifies the base style to use for them. ", 
"BatesDistribution" : "BatesDistribution[n] represents the distribution of a mean of n random variables uniformly distributed from 0 to 1.\nBatesDistribution[n,{min,max}] represents the distribution of a mean of n random variables uniformly distributed from min to max.", 
"BattleLemarieWavelet" : "BattleLemarieWavelet[] represents the Battle-Lemarié wavelet of order 3.\nBattleLemarieWavelet[n] represents the Battle-Lemarié wavelet of order n evaluated on equally spaced interval {-10,10}.\nBattleLemarieWavelet[n,lim] represents the Battle-Lemarié wavelet of order n evaluated on equally spaced interval {-lim,lim}. ", 
"Because" : "Because[x,y] displays as x∵y.", 
"BeckmannDistribution" : "BeckmannDistribution[μ₁,μ₂,σ₁,σ₂] represents the Beckmann distribution with means μ₁ and μ₂ and standard deviations σ₁ and σ₂.\nBeckmannDistribution[μ₁,μ₂,σ₁,σ₂,ρ] represents the Beckmann distribution with means μ₁ and μ₂, standard deviations σ₁ and σ₂, and correlation ρ.", 
"Beep" : "Beep[] generates an audible beep when evaluated. ", 
"Begin" : "Begin[\"context`\"] resets the current context. ", 
"BeginDialogPacket" : "BeginDialogPacket[integer] is a MathLink packet that indicates the start of the Dialog subsession referenced by integer.", 
"BeginPackage" : "BeginPackage[\"context`\"] makes context` and System` the only active contexts. \nBeginPackage[\"context`\",{\"need `\"\n     1,\"need `\"\n     2,…}] calls Needs on the needᵢ. ", 
"BellB" : "BellB[n] gives the Bell number Bₙ. \nBellB[n,x] gives the Bell polynomial Bₙ(x). ", 
"BellY" : "BellY[n,k,{x₁,…,Subscript[x,n-k+1]}] gives the partial Bell polynomial Subscript[Y,n,k](x₁,…,Subscript[x,n-k+1]). \nBellY[n,k,m] gives the generalized partial Bell polynomial of a matrix m.\nBellY[m] gives the generalized Bell polynomial of a matrix m.", 
"Below" : "Below is used to specify alignment in print forms such as ColumnForm and TableForm.", 
"BenfordDistribution" : "BenfordDistribution[b] represents a Benford distribution with base parameter b.", 
"BeniniDistribution" : "BeniniDistribution[α,β,σ] represents a Benini distribution with shape parameters α and β and scale parameter σ.", 
"BenktanderGibratDistribution" : "BenktanderGibratDistribution[a,b] represents a Benktander distribution of type I with parameters a and b.", 
"BenktanderWeibullDistribution" : "BenktanderWeibullDistribution[a,b] represents a Benktander distribution of type II with parameters a and b.", 
"BernoulliB" : "BernoulliB[n] gives the Bernoulli number Bₙ. \nBernoulliB[n,x] gives the Bernoulli polynomial Bₙ(x). ", 
"BernoulliDistribution" : "BernoulliDistribution[p] represents a Bernoulli distribution with probability parameter p.", 
"BernoulliGraphDistribution" : "BernoulliGraphDistribution[n,p] represents a Bernoulli graph distribution for n-vertex graphs with edge probability p.", 
"BernsteinBasis" : "BernsteinBasis[d,n,x] represents the nᵗʰ Bernstein basis function of degree d at x.", 
"BesselI" : "BesselI[n,z] gives the modified Bessel function of the first kind Iₙ(z). ", 
"BesselJ" : "BesselJ[n,z] gives the Bessel function of the first kind Jₙ(z). ", 
"BesselJZero" : "BesselJZero[n,k] represents the kᵗʰ zero of the Bessel function Jₙ(x).\nBesselJZero[n,k,x₀] represents the kᵗʰ zero greater than x₀.", 
"BesselK" : "BesselK[n,z] gives the modified Bessel function of the second kind Kₙ(z). ", 
"BesselY" : "BesselY[n,z] gives the Bessel function of the second kind Yₙ(z). ", 
"BesselYZero" : "BesselYZero[n,k] represents the kᵗʰ zero of the Bessel function of the second kind Yₙ(x).\nBesselYZero[n,k,x₀] represents the kᵗʰ zero greater than x₀.", 
"Beta" : "Beta[a,b] gives the Euler beta function Β(a,b). \nBeta[z,a,b] gives the incomplete beta function Subscript[Β,z](a,b). ", 
"BetaBinomialDistribution" : "BetaBinomialDistribution[α,β,n] represents a beta binomial mixture distribution with beta distribution parameters α and β, and n binomial trials.", 
"BetaDistribution" : "BetaDistribution[α,β] represents a continuous beta distribution with shape parameters α and β.", 
"BetaNegativeBinomialDistribution" : "BetaNegativeBinomialDistribution[α,β,n] represents a beta negative binomial mixture distribution with beta distribution parameters α and β, and n successful trials.", 
"BetaPrimeDistribution" : "BetaPrimeDistribution[p,q] represents a beta prime distribution with shape parameters p and q. \nBetaPrimeDistribution[p,q,β] represents a generalized beta prime distribution with scale parameter β.\nBetaPrimeDistribution[p,q,α,β] represents a generalized beta distribution of the second kind with shape parameter α.", 
"BetaRegularized" : "BetaRegularized[z,a,b] gives the regularized incomplete beta function Subscript[I,z](a,b). ", 
"BetweennessCentrality" : "BetweennessCentrality[g] gives a list of betweenness centralities for the vertices in the graph g.", 
"BezierCurve" : "BezierCurve[{pt₁,pt₂,…}] is a graphics primitive that represents a Bézier curve with control points ptᵢ.", 
"BezierFunction" : "BezierFunction[{pt₁,pt₂,…}] represents a Bézier function for a curve defined by the control points ptᵢ.\nBezierFunction[array] represents a Bézier function for a surface or high-dimensional manifold. ", 
"BilateralFilter" : "BilateralFilter[image,σ,μ] applies a bilateral filter of spatial spread σ and pixel value spread μ to image.", 
"Binarize" : "Binarize[image] creates a binary image from image by replacing all values above a globally determined threshold with 1 and others with 0.\nBinarize[image,t] creates a binary image by replacing all values above t with 1 and others with 0.\nBinarize[image,{t₁,t₂}] creates a binary image by replacing all values in the range t₁ through t₂ with 1 and others with 0.\nBinarize[image,f] creates a binary image by replacing all channel value lists for which f[v] yields True with 1, and others with 0.", 
"BinaryFormat" : "BinaryFormat is an option for OpenRead and related functions that specifies that a stream should be opened in binary format, so that no textual interpretation of newlines or other data is done.", 
"BinaryImageQ" : "BinaryImageQ[image] yields True if image has the form of a binary image, and False otherwise.", 
"BinaryRead" : "BinaryRead[stream] reads one byte of raw binary data from an input stream, and returns an integer from 0 to 255. \nBinaryRead[stream,type] reads an object of the specified type. \nBinaryRead[stream,{type₁,type₂,…}] reads a sequence of objects of the specified types. ", 
"BinaryReadList" : "BinaryReadList[\"file\"] reads all remaining bytes from a file, and returns them as a list of integers from 0 to 255. \nBinaryReadList[\"file\",type] reads objects of the specified type from a file, until the end of the file is reached. The list of objects read is returned. \nBinaryReadList[\"file\",{type₁,type₂,…}] reads objects with a sequence of types, until the end of the file is reached. \nBinaryReadList[\"file\",types,n] reads only the first n objects of the specified types. ", 
"BinaryWrite" : "BinaryWrite[channel,b] writes a byte of data, specified as an integer from 0 to 255. \nBinaryWrite[channel,{b₁,b₂,…}] writes a sequence of bytes. \nBinaryWrite[channel,\"string\"] writes the raw sequence of characters in a string. \nBinaryWrite[channel,x,type] writes an object of the specified type. \nBinaryWrite[channel,{x₁,x₂,…},type] writes a sequence of objects of the specified type. \nBinaryWrite[channel,{x₁,x₂,…},{type₁,type₂,…}] writes a sequence of objects with a sequence of types. ", 
"BinCounts" : "BinCounts[{x₁,x₂,…}] counts the number of elements xᵢ whose values lie in successive integer bins.\nBinCounts[{x₁,x₂,…},dx] counts the number of elements xᵢ whose values lie in successive bins of width dx.\nBinCounts[{x₁,x₂,…},{xₘᵢₙ,xₘₐₓ,dx}] counts the number of xᵢ in successive bins of width dx from xₘᵢₙ to xₘₐₓ. \nBinCounts[{x₁,x₂,…},{{b₁,b₂,…}}] counts the number of xᵢ in the intervals [b₁,b₂), [b₂,b₃), …. \nBinCounts[{{x₁,y₁,…},{x₂,y₂,…},…},xbins,ybins,…] gives an array of counts where the first index corresponds to x bins, the second to y, and so on. ", 
"BinLists" : "BinLists[{x₁,x₂,…}] gives lists of the elements xᵢ whose values lie in successive integer bins.\nBinLists[{x₁,x₂,…},dx] gives lists of the elements xᵢ whose values lie in successive bins of width dx.\nBinLists[{x₁,x₂,…},{xₘᵢₙ,xₘₐₓ,dx}] gives lists of the xᵢ that lie in successive bins of width dx from xₘᵢₙ to xₘₐₓ. \nBinLists[{x₁,x₂,…},{{b₁,b₂,…}}] gives lists of the xᵢ that lie in the intervals [b₁,b₂), [b₂,b₃), …. \nBinLists[{{x₁,y₁,…},{x₂,y₂,…},…},xbins,ybins,…] gives an array of lists where the first index corresponds to x bins, the second to y, and so on. ", 
"Binomial" : "Binomial[n,m] gives the binomial coefficient (GridBox[{{{n}}, {{m}}}]). ", 
"BinomialDistribution" : "BinomialDistribution[n,p] represents a binomial distribution with n trials and success probability p.", 
"BinormalDistribution" : "BinormalDistribution[{μ₁,μ₂},{σ₁,σ₂},ρ] represents a bivariate normal distribution with mean {μ₁, μ₂} and covariance matrix {{σ₁²,ρ σ₁ σ₂},{ρ σ₁ σ₂,σ₂²}}.\nBinormalDistribution[{σ₁,σ₂},ρ] represents a bivariate normal distribution with zero mean.\nBinormalDistribution[ρ] represents a bivariate normal distribution with zero mean and covariance matrix {{1,ρ },{ρ,1}}.", 
"BiorthogonalSplineWavelet" : "BiorthogonalSplineWavelet[] represents a biorthogonal spline wavelet of order 4 and dual order 2.\nBiorthogonalSplineWavelet[n,m] represents a biorthogonal spline wavelet of order n and dual order m.", 
"BipartiteGraphQ" : "BipartiteGraphQ[g] yields True if the graph g is a bipartite graph and False otherwise.", 
"BirnbaumSaundersDistribution" : "BirnbaumSaundersDistribution[α,λ] represents the Birnbaum–Saunders distribution with shape parameter α and scale parameter λ.", 
"BitAnd" : "BitAnd[n₁,n₂,…] gives the bitwise AND of the integers nᵢ. ", 
"BitClear" : "BitClear[n,k] sets to 0 the bit corresponding to the coefficient of 2ᵏ in the integer n. ", 
"BitGet" : "BitGet[n,k] gets the bit corresponding to the coefficient of 2ᵏ in the integer n. ", 
"BitLength" : "BitLength[n] gives the number of binary bits necessary to represent the integer n. ", 
"BitNot" : "BitNot[n] gives the bitwise NOT of the integer n. ", 
"BitOr" : "BitOr[n₁,n₂,…] gives the bitwise OR of the integers nᵢ. ", 
"BitSet" : "BitSet[n,k] sets to 1 the bit corresponding to the coefficient of 2ᵏ in the integer n. ", 
"BitShiftLeft" : "BitShiftLeft[n,k] shifts the binary bits in the integer n to the left by k places, padding with zeros on the right.\nBitShiftLeft[n] shifts one bit to the left.", 
"BitShiftRight" : "BitShiftRight[n,k] shifts the binary bits in the integer n to the right by k places, dropping bits that are shifted past the unit's position on the right. \nBitShiftRight[n] shifts one bit to the right.", 
"BitXor" : "BitXor[n₁,n₂,…] gives the bitwise XOR of the integers nᵢ. ", 
"Black" : "Black represents the color black in graphics or style specifications. ", 
"Blank" : "_ or Blank[] is a pattern object that can stand for any Mathematica expression. \n_h or Blank[h] can stand for any expression with head h. ", 
"BlankForm" : "BlankForm is an internal symbol used for formatting and printing.", 
"BlankNullSequence" : "___ (three _ characters) or BlankNullSequence[] is a pattern object that can stand for any sequence of zero or more Mathematica expressions. \n___h or BlankNullSequence[h] can stand for any sequence of expressions, all of which have head h. ", 
"BlankSequence" : "__ (two _ characters) or BlankSequence[] is a pattern object that can stand for any sequence of one or more Mathematica expressions. \n__h or BlankSequence[h] can stand for any sequence of one or more expressions, all of which have head h. ", 
"Blend" : "Blend[{col₁,col₂},x] gives a color obtained by blending a fraction 1-x of color col₁ and x of color col₂.\nBlend[{col₁,col₂,col₃,…},x] linearly interpolates between colors colᵢ as x varies from 0 to 1.\nBlend[{{x₁,col₁},{x₂,col₂},…},x] interpolates to give colᵢ when x=xᵢ.\nBlend[{col₁,col₂,…},{u₁,u₂,…}] blends all the colᵢ, using fraction uᵢ of color colᵢ. \nBlend[{col₁,col₂,…}] blends equal fractions of all the colᵢ.", 
"Block" : "Block[{x,y,…},expr] specifies that expr is to be evaluated with local values for the symbols x, y, …. \nBlock[{x=x₀,…},expr] defines initial local values for x, …. ", 
"BlockRandom" : "BlockRandom[expr] evaluates expr with all pseudorandom generators localized, so that uses of SeedRandom, RandomInteger, and related functions within the evaluation of expr do not affect subsequent pseudorandom sequences.", 
"Blue" : "Blue represents the color blue in graphics or style specifications. ", 
"Blur" : "Blur[image] gives a blurred version of image.\nBlur[image,r] gives a version of image blurred over pixel radius r.", 
"BodePlot" : "BodePlot[g] gives the Bode plot of a rational function g in one complex variable.\nBodePlot[sys] gives the Bode plot of a TransferFunctionModel or StateSpaceModel object sys.\nBodePlot[…,{fₘᵢₙ,fₘₐₓ}] gives the plot for frequencies from fₘᵢₙ to fₘₐₓ.", 
"Bold" : "Bold represents a bold font weight.", 
"Bookmarks" : "Bookmarks is an option for Manipulate and related functions that gives a list of bookmark settings.", 
"Boole" : "Boole[expr] yields 1 if expr is True and 0 if it is False. ", 
"BooleanConvert" : "BooleanConvert[expr] converts the Boolean expression expr to disjunctive normal form.\nBooleanConvert[expr,form] converts the Boolean expression expr to the specified form.\nBooleanConvert[expr,form,cond] finds an expression in the specified form that is equivalent to expr when cond is true.", 
"BooleanCountingFunction" : "BooleanCountingFunction[kₘₐₓ,n] represents a Boolean function of n variables that gives True if at most kₘₐₓ variables are True.\nBooleanCountingFunction[{k},n] represents a function of n variables that gives True if exactly k variables are True.\nBooleanCountingFunction[{kₘᵢₙ,kₘₐₓ},n] represents a function that gives True if between kₘᵢₙ and kₘₐₓ variables are True.\nBooleanCountingFunction[{{k₁,k₂,…}},n] represents a function that gives True if exactly kᵢ variables are True.\nBooleanCountingFunction[spec,{a₁,a₂,…}] gives the Boolean expression in variables aᵢ corresponding to the Boolean counting function specified by spec.\nBooleanCountingFunction[spec,{a₁,a₂,…},form] gives the Boolean expression in the form specified by form.", 
"BooleanFunction" : "BooleanFunction[k,n] represents the kᵗʰ Boolean function in n variables.\nBooleanFunction[values] represents the Boolean function corresponding to the specified vector of truth values.\nBooleanFunction[{{i₁₁,i₁₂,…}->o₁,…}] represents the Boolean function defined by the specified mapping from inputs to outputs.\nBooleanFunction[spec,{a₁,a₂,…}] gives the Boolean expression in variables aᵢ corresponding to the Boolean function specified by spec.\nBooleanFunction[spec,{a₁,a₂,…},form] gives the Boolean expression in the form specified by form.", 
"BooleanGraph" : "BooleanGraph[bfunc,g₁,…,gₙ] gives the Boolean graph defined by the Boolean function bfunc on the graphs g₁, …, gₙ.", 
"BooleanMaxterms" : "BooleanMaxterms[k,n] represents the kᵗʰ maxterm in n variables.\nBooleanMaxterms[{k₁,k₂,…},n] represents the conjunction of the maxterms kᵢ.\nBooleanMaxterms[{{u₁,…,uₙ},{v₁,…},…}] represents the conjunction of maxterms given by the exponent vectors uᵢ, vᵢ, ….\nBooleanMaxterms[spec,{a₁,a₂,…}] gives the Boolean expression in variables aᵢ corresponding to the maxterms function specified by spec.\nBooleanMaxterms[spec,{a,a₂,…},form] gives the Boolean expression in the form specified by form.", 
"BooleanMinimize" : "BooleanMinimize[expr] finds a minimal-length disjunctive normal form representation of expr.\nBooleanMinimize[expr,form] finds a minimal-length representation for expr in the specified form.\nBooleanMinimize[expr,form,cond] finds a minimal-length expression in the specified form that is equivalent to expr when cond is true.", 
"BooleanMinterms" : "BooleanMinterms[k,n] represents the kᵗʰ minterm in n variables.\nBooleanMinterms[{k₁,k₂,…},n] represents the disjunction of the minterms kᵢ.\nBooleanMinterms[{{u₁,…,uₙ},{v₁,…},…}] represents the disjunction of minterms given by the exponent vectors uᵢ, vᵢ, ….\nBooleanMinterms[spec,{a₁,a₂,…}] gives the Boolean expression in variables aᵢ corresponding to the minterms function specified by spec.\nBooleanMinterms[spec,{a,a₂,…},form] gives the Boolean expression in the form specified by form.", 
"Booleans" : "Booleans represents the domain of Booleans, as in x∈Booleans. ", 
"BooleanTable" : "BooleanTable[bf] gives a list of truth values for all possible combinations of variable values supplied to the Boolean function bf.\nBooleanTable[expr,{a₁,a₂,…}] gives a list of the truth values of the Boolean expression expr for all possible combinations of values of the aᵢ.\nBooleanTable[expr,{a₁,a₂,…},{b₁,…},…] gives a nested table of truth values of expr with the outermost level giving possible combinations of the aᵢ.", 
"BooleanVariables" : "BooleanVariables[expr] gives a list of the Boolean variables in the Boolean expression expr.\nBooleanVariables[bf] gives the number of Boolean variables in the BooleanFunction object bf.", 
"BorderDimensions" : "BorderDimensions[image] gives the pixel width of uniform borders of image in the form {{left,right},{bottom,top}}.\nBorderDimensions[image,t] finds borders whose pixels vary by an amount less than t.", 
"BorelTannerDistribution" : "BorelTannerDistribution[α,n] represents a Borel–Tanner distribution with shape parameters α and n.", 
"Bottom" : "Bottom is a symbol that represents the bottom for purposes of alignment and positioning. ", 
"BottomHatTransform" : "BottomHatTransform[image,ker] gives the morphological bottom-hat transform of image with respect to structuring element ker.\nBottomHatTransform[image,r] gives the bottom-hat transform with respect to a range r square.", 
"BoundaryStyle" : "BoundaryStyle is an option for plotting functions that specifies the style in which boundaries of regions should be drawn. ", 
"BoxBaselineShift" : "BoxBaselineShift is an option for AdjustmentBox that specifies how much the baseline of the box should be shifted relative to those of neighboring characters.", 
"BoxData" : "BoxData[boxes] is a low-level representation of the contents of a typesetting cell.", 
"Boxed" : "Boxed is an option for Graphics3D that specifies whether to draw the edges of the bounding box in a three‐dimensional picture. ", 
"BoxFormFormatTypes" : "BoxFormFormatTypes is a global option that specifies the list of typeset format types that are currently defined.", 
"BoxFrame" : "BoxFrame is an option for FrameBox objects that specifies whether to draw a frame around the contents of the box.", 
"BoxMargins" : "BoxMargins is an option for AdjustmentBox objects that specifies the margins to leave around the contents of the box.", 
"BoxMatrix" : "BoxMatrix[r] gives a (2 r+1)×(2 r+1) matrix of 1s.\nBoxMatrix[r,w] gives a (2 r+1)×(2 r+1) block of 1s centered in a w×w matrix of 0s.\nBoxMatrix[{r₁,r₂,…},…] gives a (2 r₁+1) (2 r₂+1) … array of 1s.", 
"BoxRatios" : "BoxRatios is an option for Graphics3D that gives the ratios of side lengths for the bounding box of the three‐dimensional picture. ", 
"BoxStyle" : "BoxStyle is an option for three-dimensional graphics functions that specifies how the bounding box should be rendered. ", 
"BoxWhiskerChart" : "BoxWhiskerChart[{x₁,x₂,…}] makes a box‐and‐whisker chart for the values xᵢ.\nBoxWhiskerChart[{x₁,x₂,…},bwspec] makes a chart with box‐and‐whisker symbol specification bwspec.\nBoxWhiskerChart[{data₁,data₂,…},…] makes a chart with box‐and‐whisker symbol for each dataᵢ.\nBoxWhiskerChart[{{data₁,data₂,…},…},…] makes a box‐and‐whisker chart from multiple groups of datasets {data₁,data₂,…}.", 
"BracketingBar" : "BracketingBar[x, y, …] displays as |x,y,…|.", 
"BrayCurtisDistance" : "BrayCurtisDistance[u,v] gives the Bray–Curtis distance between vectors u and v.", 
"BreadthFirstScan" : "BreadthFirstScan[g,s,{event₁->f₁,event₂->f₂,…}] performs a breadth-first scan (bfs) of the graph g starting at the vertex s and evaluates fᵢ whenever \"eventᵢ\" occurs.\nBreadthFirstScan[g,{event₁->f₁,event₂->f₂,…}] performs a breadth-first scan of the whole graph g.", 
"Break" : "Break[] exits the nearest enclosing Do, For, or While. ", 
"Brown" : "Brown represents the color brown in graphics or style specifications. ", 
"BrownForsytheTest" : "BrownForsytheTest[data] tests whether the variance of data is 1. \nBrownForsytheTest[{data₁,data₂}] tests whether the variances of data₁ and data₂ are equal.\nBrownForsytheTest[dspec,Subsuperscript[ σ, 0, 2]] tests a dispersion measure against Subsuperscript[ σ, 0, 2].\nBrownForsytheTest[dspec,Subsuperscript[ σ, 0, 2],\"property\"] returns the value of \"property\".", 
"BSplineBasis" : "BSplineBasis[d,x] gives the zeroth uniform B-spline basis function of degree d at x.\nBSplineBasis[d,n,x] gives the nᵗʰ uniform B-spline basis function of degree d.\nBSplineBasis[{d,{u₁,u₂,…}},n,x]  gives the nᵗʰ non-uniform B-spline basis function of degree d with knots at positions uᵢ.", 
"BSplineCurve" : "BSplineCurve[{pt₁,pt₂,…}] is a graphics primitive that represents a non-uniform rational B-spline curve with control points ptᵢ.", 
"BSplineFunction" : "BSplineFunction[{pt₁,pt₂,…}] represents a B-spline function for a curve defined by the control points ptᵢ.\nBSplineFunction[array] represents a B-spline function for a surface or high-dimensional manifold. ", 
"BSplineSurface" : "BSplineSurface[array] is a graphics primitive that represents a non-uniform rational B-spline surface defined by an array of x,y,z control points.", 
"BubbleChart" : "BubbleChart[{{x₁,y₁,z₁},{x₂,y₂,z₂},…}] makes a bubble chart with bubbles at positions {xᵢ,yᵢ} with sizes zᵢ.\nBubbleChart[{…,wᵢ[{xᵢ,yᵢ,zᵢ},…],…,Subscript[w,j][{Subscript[x,j],Subscript[y,j],Subscript[z,j]},…],…}] makes a bubble chart with bubble features defined by the symbolic wrappers wₖ.\nBubbleChart[{data₁,data₂,…}] makes a bubble chart from multiple datasets dataᵢ. ", 
"BubbleChart3D" : "BubbleChart3D[{{x₁,y₁,z₁,u₁},{x₂,y₂,z₂,u₂},…}] makes a 3D bubble chart with bubbles at positions {xᵢ,yᵢ,zᵢ} with sizes uᵢ.\nBubbleChart3D[{…,wᵢ[{xᵢ,yᵢ,zᵢ,uᵢ},…],…,Subscript[w,j][{Subscript[x,j],Subscript[y,j],Subscript[z,j],Subscript[u,j]},…],…}] makes a 3D bubble chart with bubble features defined by the symbolic wrappers wₖ.\nBubbleChart3D[{data₁,data₂,…}] makes a 3D bubble chart from multiple datasets dataᵢ. ", 
"BubbleScale" : "BubbleScale is an option to BubbleChart and related functions that specifies how the scale of each bubble should be determined from the value of each data element.", 
"BubbleSizes" : "BubbleSizes is an option to BubbleChart and related functions that specifies the range of sizes used for bubbles. ", 
"ButterflyGraph" : "ButterflyGraph[n] gives the order-n butterfly graph. \nButterflyGraph[n,b] gives the base-b order-n butterfly graph. ", 
"Button" : "Button[label,action] represents a button that is labeled with label, and evaluates action whenever it is clicked. ", 
"ButtonBar" : "ButtonBar[{lbl₁:>act₁,lbl₂:>act₂,…}] represents a bar of buttons with labels lblᵢ that perform actions actᵢ when pressed.", 
"ButtonBox" : "ButtonBox[boxes] is a low-level box construct that represents a button in a notebook expression.", 
"ButtonBoxOptions" : "ButtonBoxOptions->{opt₁->val₁,opt₂->val₂,…} is an option for cells that specifies settings for buttons within the cell.", 
"ButtonData" : "ButtonData is an option for the low-level function ButtonBox that specifies the second argument to give to the ButtonFunction for the button when the button is active and is clicked. ", 
"ButtonEvaluator" : "ButtonEvaluator is an option for the low-level function ButtonBox that specifies where the expression constructed from ButtonFunction should be sent for evaluation. ", 
"ButtonExpandable" : "ButtonExpandable is an option for the low-level function ButtonBox that specifies whether the button should expand to fill any GridBox position in which it appears. ", 
"ButtonFrame" : "ButtonFrame is an option for the low-level function ButtonBox that specifies the type of frame to display around a button. ", 
"ButtonFunction" : "ButtonFunction is an option for the low-level function ButtonBox that specifies the function to execute when the button is active and is clicked. ", 
"ButtonMargins" : "ButtonMargins is an option for ButtonBox that specifies how much space in printer's points to leave around the contents of a button when the button is displayed. ", 
"ButtonMinHeight" : "ButtonMinHeight is an option for the low-level function ButtonBox that specifies the minimum total height in units of font size that should be allowed for the button. ", 
"ButtonNote" : "ButtonNote is an option for ButtonBox that specifies what should be displayed in the status line of the current notebook window when the button is active and the cursor is placed on top of it. ", 
"ButtonNotebook" : "ButtonNotebook[] gives the notebook, if any, that contains the button which initiated the current evaluation. ", 
"ButtonSource" : "ButtonSource is an option for the low-level function ButtonBox that specifies the first argument to give to the ButtonFunction for the button when the button is active and is clicked. ", 
"ButtonStyle" : "ButtonStyle is an option for ButtonBox that specifies the default properties for the button. ", 
"Byte" : "Byte represents a single byte of data in Read. ", 
"ByteCount" : "ByteCount[expr] gives the number of bytes used internally by Mathematica to store expr. ", 
"ByteOrdering" : "ByteOrdering is an option for BinaryRead, BinaryWrite, and related functions that specifies what ordering of bytes should be assumed for your computer system.", 
"C" : "C[i] is the default form for the iᵗʰ parameter or constant generated in representing the results of various symbolic computations. ", 
"CallPacket" : "CallPacket[integer,list] is a MathLink packet encapsulating a request to invoke the external function numbered integer with the arguments contained in list.", 
"CanberraDistance" : "CanberraDistance[u,v] gives the Canberra distance between vectors u and v.", 
"Cancel" : "Cancel[expr] cancels out common factors in the numerator and denominator of expr. ", 
"CancelButton" : "CancelButton[] represents a Cancel button in a dialog that closes the dialog window when clicked.\nCancelButton[action] represents a button labeled Cancel that evaluates action when clicked.\nCancelButton[label,action] uses label as the label for the button.", 
"CandlestickChart" : "CandlestickChart[{{date₁,{open₁,high₁,low₁,close₁}},…}] makes a chart with candles representing open, high, low, and close prices for each date. \nCandlestickChart[{\"name\",daterange}] makes a candlestick chart for the financial entity \"name\" over the date range daterange. ", 
"Cap" : "Cap[x,y,…] displays as x⌢y⌢….", 
"CapForm" : "CapForm[type] is a graphics primitive that specifies what type of caps should be used at the ends of lines, tubes, and related primitives.", 
"CapitalDifferentialD" : "CapitalDifferentialD[x] displays as x.", 
"CarmichaelLambda" : "CarmichaelLambda[n] gives the Carmichael function λ(n), defined as the smallest integer m such that kᵐ≡1mod n for all k relatively prime to n. ", 
"Cases" : "Cases[{e₁,e₂,…},pattern] gives a list of the eᵢ that match the pattern. \nCases[{e₁,…},pattern->rhs] gives a list of the values of rhs corresponding to the eᵢ that match the pattern. \nCases[expr,pattern,levelspec] gives a list of all parts of expr on levels specified by levelspec that match the pattern. \nCases[expr,pattern->rhs,levelspec] gives the values of rhs that match the pattern. \nCases[expr,pattern,levelspec,n] gives the first n parts in expr that match the pattern. ", 
"Cashflow" : "Cashflow[{c₀,c₁,…,cₙ}] represents a series of cash flows occurring at unit time intervals.\nCashflow[{c₀,c₁,…,cₙ},q] represents cash flows occurring at time intervals q.\nCashflow[{{time₁,c₁},{time₂,c₂},…}] represents cash flows occurring at the specified times.", 
"Casoratian" : "Casoratian[{y₁,y₂,…},n] gives the Casoratian determinant for the sequences y₁, y₂, … depending on n.\nCasoratian[eqn,y,n] gives the Casoratian determinant for the basis of the solutions of the linear difference equation eqn involving y[n+m]. \nCasoratian[eqns,{y₁,y₂,…},n] gives the Casoratian determinant for the system of linear difference equations eqns.", 
"Catalan" : "Catalan is Catalan's constant, with numerical value ≃0.915966. ", 
"CatalanNumber" : "CatalanNumber[n] gives the nᵗʰ Catalan number Cₙ.", 
"Catch" : "Catch[expr] returns the argument of the first Throw generated in the evaluation of expr. \nCatch[expr,form] returns value from the first Throw[value,tag] for which form matches tag. \nCatch[expr,form,f] returns f[value,tag]. ", 
"CauchyDistribution" : "CauchyDistribution[a,b] represents a Cauchy distribution with location parameter a and scale parameter b.", 
"CayleyGraph" : "CayleyGraph[group] returns a Cayley graph representation of group.", 
"CDF" : "CDF[dist,x] gives the cumulative distribution function for the symbolic distribution dist evaluated at x.\nCDF[dist,{x₁,x₂,…}] gives the multivariate cumulative distribution function for the symbolic distribution dist evaluated at {x₁,x₂,…}.\nCDF[dist] gives the CDF as a pure function.", 
"CDFDeploy" : "CDFDeploy[\"file.cdf\",expr] deploys expr in a form that can be played by Wolfram CDF Player.\nCDFDeploy[\"file.cdf\",notebook] deploys a notebook.\nCDFDeploy[\"file.cdf\",NotebookSelection[notebook]] deploys the current selection in notebook.\nCDFDeploy[\"outfile.cdf\",\"infile.nb\"] deploys the notebook \"infile.nb\".", 
"CDFInformation" : "CDFInformation[expr] gives a list of properties relevant to a CDF deployed with the content expr.\nCDFInformation[notebook] gives usage properties for a CDF to be deployed from the given notebook.\nCDFInformation[NotebookSelection[notebook]] gives CDF usage properties for only the selected cells in the given notebook.\nCDFInformation[\"file\"] gives CDF usage properties for the named notebook or CDF file.", 
"CDFWavelet" : "CDFWavelet[] represents a Cohen–Daubechies–Feauveau wavelet of type \"9\/7\". \nCDFWavelet[\"type\"] represents a Cohen–Daubechies–Feauveau wavelet of type \"type\". ", 
"Ceiling" : "Ceiling[x] gives the smallest integer greater than or equal to x. \nCeiling[x,a] gives the smallest multiple of a greater than or equal to x. ", 
"Cell" : "Cell[contents] is the low-level representation of a cell inside a Mathematica notebook. \nCell[contents,\"style\"] represents a cell in the specified style.", 
"CellAutoOverwrite" : "CellAutoOverwrite is an option for Cell which specifies whether an output cell should be overwritten by new output when the preceding input cell is evaluated. ", 
"CellBaseline" : "CellBaseline is an option for Cell which specifies where the baseline of the cell should be assumed to be when it appears inside another cell. ", 
"CellBracketOptions" : "CellBracketOptions->{opt₁->val₁,opt₂->val₂,…} is an option for cells that specifies settings for cell brackets.", 
"CellChangeTimes" : "CellChangeTimes is an option to Cell that specifies when changes were made to the cell.", 
"CellContext" : "CellContext is an option for Cell which specifies the context to use for the evaluation of the contents of the cell.", 
"CellDingbat" : "CellDingbat is an option for Cell which specifies what dingbat to use to emphasize a cell. ", 
"CellDynamicExpression" : "CellDynamicExpression is an option for cells that specifies an expression to be dynamically updated whenever the cell is visible on-screen.", 
"CellEditDuplicate" : "CellEditDuplicate is an option for Cell which specifies whether the front end should make a copy of the cell before actually applying any changes in its contents that you request. ", 
"CellEpilog" : "CellEpilog is an option for Cell which gives an expression to evaluate after each ordinary evaluation of the contents of the cell.", 
"CellEvaluationDuplicate" : "CellEvaluationDuplicate is an option for Cell which specifies whether the front end should make a copy of the cell before performing any evaluation of its contents that you request. ", 
"CellEvaluationFunction" : "CellEvaluationFunction is an option to Cell which gives a function to be applied to every expression from the cell that is sent to the kernel for ordinary evaluation. ", 
"CellEventActions" : "CellEventActions is an option for Cell that gives a list of actions to perform when specified events occur in connection with a cell in a notebook. ", 
"CellFrame" : "CellFrame is an option for Cell which specifies whether a frame should be drawn around a cell. ", 
"CellFrameColor" : "CellFrameColor is an option that specifies the color of the frame around a cell.", 
"CellFrameLabelMargins" : "CellFrameLabelMargins is an option for cells that specifies the absolute margins in printer's points between a cell's frame and the labels around the frame.", 
"CellFrameLabels" : "CellFrameLabels is an option that specifies the labels associated with the frame around a cell.", 
"CellFrameMargins" : "CellFrameMargins is an option for Cell which specifies the absolute margins in printer’s points to leave inside a frame that is drawn around a cell. ", 
"CellGroup" : "CellGroup[{cell₁,cell₂,…}] gives an open group of cells that can appear in a Mathematica notebook.\nCellGroup[{cell₁,cell₂,…},1] gives a cell group in which only the first cell is open.\nCellGroup[{cell₁,cell₂,…},-1] gives a cell group in which only the last cell is open.\nCellGroup[{cell₁,cell₂,…},{i₁,i₂,…}] gives a cell group in which cells i₁, i₂, … are open. ", 
"CellGroupData" : "CellGroupData[{cell₁,cell₂,…}] is a low-level construct that represents an open group of cells in a notebook. \nCellGroupData[{cell₁,cell₂,…},1] represents a cell group in which only the first cell is open.\nCellGroupData[{cell₁,cell₂,…},{i₁,i₂,…}] represents a cell group with cells at positions i₁, i₂, … open. ", 
"CellGrouping" : "CellGrouping is a notebook option that specifies how cells in the notebook should be assembled into groups. ", 
"CellGroupingRules" : "CellGroupingRules is an option for cells that specifies the rules used for grouping a cell.", 
"CellHorizontalScrolling" : "CellHorizontalScrolling is an option for cells that specifies whether the contents of a cell can be scrolled from left to right using the horizontal scroll bar of the notebook.", 
"CellLabel" : "CellLabel is an option for Cell which gives the label to use for a particular cell. ", 
"CellLabelAutoDelete" : "CellLabelAutoDelete is an option for Cell which specifies whether a label for the cell should be automatically deleted if the contents of the cell are modified or the notebook containing the cell is saved in a file. ", 
"CellLabelMargins" : "CellLabelMargins is an option for cells that specifies the absolute margins in printer's points around a cell label.", 
"CellLabelPositioning" : "CellLabelPositioning is an option for cells that specifies where the label for a cell is positioned.", 
"CellMargins" : "CellMargins is an option for Cell that specifies the absolute margins in printer's points to leave around a cell. ", 
"CellOpen" : "CellOpen is an option for Cell that specifies whether the contents of a cell should be explicitly displayed. ", 
"CellPrint" : "CellPrint[expr] inserts expr as a complete cell in the current notebook just below the cell being evaluated. \nCellPrint[{expr₁,expr₂,…}] inserts a sequence of cells. ", 
"CellProlog" : "CellProlog is an option to Cell that gives an expression to evaluate before each ordinary evaluation of the contents of the cell.", 
"CellSize" : "CellSize is an option for cells that specifies the width and height of an inline cell.", 
"CellTags" : "CellTags is an option for Cell that gives a list of tags to associate with a cell. ", 
"CellularAutomaton" : "CellularAutomaton[rule,init,t] generates a list representing the evolution of the cellular automaton with the specified rule from initial condition init for t steps. \nCellularAutomaton[rule,init] gives the result of evolving init for one step. \nCellularAutomaton[rule,init,{tspec,xspec,…}] gives only those parts of the evolution specified by tspec, xspec, etc. \nCellularAutomaton[rule,init,{t,All,…}] includes at each step all cells that could be affected over the course of t steps. ", 
"CensoredDistribution" : "CensoredDistribution[{xₘᵢₙ,xₘₐₓ},dist] represents the distribution of values that come from dist and are censored to be between xₘᵢₙ and xₘₐₓ.\nCensoredDistribution[{{xₘᵢₙ,xₘₐₓ},{yₘᵢₙ,yₘₐₓ},…},dist] represents the distribution of values that come from the multivariate distribution dist and are censored to be between xₘᵢₙ and xₘₐₓ, yₘᵢₙ and yₘₐₓ, etc.", 
"Censoring" : "Censoring[t,c] represents a censored event time t with censoring c.\nCensoring[{t₁,t₂,…},c] represents a vector of censored event times tᵢ with censoring c.\nCensoring[{t₁,t₂,…},{c₁,c₂,…}] represents a vector of event times tᵢ with corresponding censoring cᵢ.", 
"Center" : "Center is a symbol that represents the center for purposes of alignment and positioning. ", 
"CenterDot" : "CenterDot[x,y,…] displays as x·y·….", 
"CentralMoment" : "CentralMoment[list,r] gives the rᵗʰ central moment of the elements in list with respect to their mean.\nCentralMoment[dist,r] gives the rᵗʰ central moment of the symbolic distribution dist.\nCentralMoment[r] represents the rᵗʰ formal central moment. ", 
"CentralMomentGeneratingFunction" : "CentralMomentGeneratingFunction[dist,t] gives the central moment generating function for the symbolic distribution dist as a function of the variable t. \nCentralMomentGeneratingFunction[dist,{t₁,t₂,…}] gives the central moment generating function for the multivariate symbolic distribution dist as a function of the variables t₁, t₂, …. ", 
"CForm" : "CForm[expr] prints as a C language version of expr. ", 
"ChampernowneNumber" : "ChampernowneNumber[b] gives the base-b Champernowne number Subscript[C,b].\nChampernowneNumber[] gives the base-10 Champernowne number.", 
"ChanVeseBinarize" : "ChanVeseBinarize[image] finds a two-level segmentation of image by computing optimal contours around regions of consistent intensity in image.\nChanVeseBinarize[image,marker] uses the foreground pixels of marker as the initial contours.", 
"Character" : "Character represents a single character in Read. ", 
"CharacterEncoding" : "CharacterEncoding is an option for input and output functions which specifies what raw character encoding should be used. ", 
"CharacterEncodingsPath" : "CharacterEncodingsPath is a global option that specifies which directories are searched for character encoding files.", 
"CharacteristicFunction" : "CharacteristicFunction[dist,t] gives the characteristic function for the symbolic distribution dist as a function of the variable t.\nCharacteristicFunction[dist,{t₁,t₂,…}] gives the characteristic function for the multivariate symbolic distribution dist as a function of the variables t₁, t₂, ….", 
"CharacteristicPolynomial" : "CharacteristicPolynomial[m,x] gives the characteristic polynomial for the matrix m. \nCharacteristicPolynomial[{m,a},x] gives the generalized characteristic polynomial with respect to a. ", 
"CharacterRange" : "CharacterRange[c₁,c₂] yields a list of the characters in the range from \"c₁\" to \"c₂\". ", 
"Characters" : "Characters[\"string\"] gives a list of the characters in a string. ", 
"ChartBaseStyle" : "ChartBaseStyle is an option for charting functions that specifies the base style for all chart elements.", 
"ChartElementFunction" : "ChartElementFunction is an option for charting functions such as BarChart that gives a function to use to generate the primitives for rendering each chart element.", 
"ChartElements" : "ChartElements is an option to charting functions such as BarChart that specifies the graphics to use as the basis for bars or other chart elements. ", 
"ChartLabels" : "ChartLabels is an option for charting functions that specifies what labels should be used for chart elements.", 
"ChartLayout" : "ChartLayout is an option to charting functions which specifies the overall layout to use.", 
"ChartLegends" : "ChartLegends is an option for charting functions that specifies what legends should be used for chart elements. ", 
"ChartStyle" : "ChartStyle is an option for charting functions that specifies styles in which chart elements should be drawn.", 
"ChebyshevDistance" : "ChebyshevDistance[u,v] gives the Chebyshev or sup norm distance between vectors u and v.", 
"ChebyshevT" : "ChebyshevT[n,x] gives the Chebyshev polynomial of the first kind Tₙ(x). ", 
"ChebyshevU" : "ChebyshevU[n,x] gives the Chebyshev polynomial of the second kind Uₙ(x). ", 
"Check" : "Check[expr,failexpr] evaluates expr, and returns the result, unless messages were generated, in which case it evaluates and returns failexpr. \nCheck[expr,failexpr,{s₁::t₁,s₂::t₂,…}] checks only for the specified messages. \nCheck[expr,failexpr,\"name\"] checks only for messages in the named message group.", 
"CheckAbort" : "CheckAbort[expr,failexpr] evaluates expr, returning failexpr if an abort occurs. ", 
"CheckAll" : "CheckAll[expr, f] evaluates expr and returns f[expr, HoldComplete[control₁, …]] where the control-i expressions are aborts, throws, or other flow control commands currently being executed (but stopped by CheckAll).", 
"Checkbox" : "Checkbox[x] represents a checkbox with setting x, displayed as Checkbox[True] when x is True and Checkbox[False] when x is False. \nCheckbox[Dynamic[x]] takes the setting to be the dynamically updated current value of x, with the value of x being toggled if the checkbox is clicked. \nCheckbox[x,{val₁,val₂}] represents a checkbox that toggles between values val₁ and val₂, and displays as Checkbox[False] and Checkbox[True] respectively. \nCheckbox[x,{val₁,val₂,val₃,…}] represents a checkbox that cycles through values valᵢ, and displays as Checkbox[3] for all valᵢ with i>2. ", 
"CheckboxBar" : "CheckboxBar[x,{val₁,val₂,…}] represents a checkbox bar with setting x and with checkboxes for values valᵢ to include in the list x.\nCheckboxBar[Dynamic[x],{val₁,val₂,…}] takes the setting to be the dynamically updated current value of x, with the values in the list x being reset every time a checkbox is clicked.\nCheckboxBar[x,{val₁->lbl₁,val₂->lbl₂,…}] represents a checkbox bar in which the checkbox associated with value valᵢ has label lblᵢ.", 
"ChemicalData" : "ChemicalData[\"name\",\"property\"] gives the value of the specified property for the chemical \"name\".\nChemicalData[\"name\"] gives a structure diagram for the chemical with the specified name.\nChemicalData[\"class\"] gives a list of available chemicals in the specified class.", 
"ChessboardDistance" : "ChessboardDistance[u,v] gives the chessboard, Chebyshev, or sup norm distance between vectors u and v.", 
"ChiDistribution" : "ChiDistribution[ν] represents a χ distribution with ν degrees of freedom.", 
"ChineseRemainder" : "ChineseRemainder[{r₁,r₂,…},{m₁,m₂,…}] gives the smallest non‐negative x that satisfies all the integer congruences x mod mᵢ = rᵢ mod mᵢ.", 
"ChiSquareDistribution" : "ChiSquareDistribution[ν] represents a χ² distribution with ν degrees of freedom.", 
"ChoiceButtons" : "ChoiceButtons[] represents a pair of OK and Cancel buttons that close a dialog.\nChoiceButtons[{actₒₖ,Subscript[act,cancel]}] represents OK and Cancel buttons that evaluate the corresponding actᵢ when clicked.\nChoiceButtons[{lblₒₖ,Subscript[lbl,cancel]},{actₒₖ,Subscript[act,cancel]}] uses the lblᵢ to label the buttons.", 
"ChoiceDialog" : "ChoiceDialog[expr] puts up a standard choice dialog that displays expr together with OK and Cancel buttons, and returns True if OK is clicked and False if Cancel is clicked.\nChoiceDialog[expr,{lbl₁->val₁,lbl₂->val₂,…}] includes buttons with labels lblᵢ, and returns the corresponding valᵢ for the button clicked.", 
"CholeskyDecomposition" : "CholeskyDecomposition[m] gives the Cholesky decomposition of a matrix m. ", 
"Chop" : "Chop[expr] replaces approximate real numbers in expr that are close to zero by the exact integer 0. ", 
"Circle" : "Circle[{x,y},r] is a two-dimensional graphics primitive that represents a circle of radius r centered at the point x, y. \nCircle[{x,y}] gives a circle of radius 1. \nCircle[{x,y},r,{θ₁,θ₂}] gives a circular arc. \nCircle[{x,y},{rₓ,Subscript[r,y]}] gives an ellipse with semi‐axes of lengths rₓ and Subscript[r,y], oriented parallel to the coordinate axes. ", 
"CircleDot" : "CircleDot[x,y,…] displays as x⊙y⊙….", 
"CircleMinus" : "CircleMinus[x,y] displays as x⊖y. ", 
"CirclePlus" : "CirclePlus[x,y,…] displays as x⊕y⊕….", 
"CircleTimes" : "CircleTimes[x] displays as ⊗x.\nCircleTimes[x,y,…] displays as x⊗y⊗….", 
"CirculantGraph" : "CirculantGraph[n,j] gives the circulant graph with n vertices and jump j Cₙ(j).\nCirculantGraph[n,{j₁,j₂,…}] gives the circulant graph with n vertices and jumps j₁, j₂, … Cₙ(j₁,j₂,…).", 
"CityData" : "CityData[\"name\",\"property\"] gives the value of the specified property for the city with the specified name.\nCityData[\"name\"] gives a list of the full specifications of cities whose names are consistent with name.", 
"Clear" : "Clear[symbol₁,symbol₂,…] clears values and definitions for the symbolᵢ. \nClear[\"form \"\n     1,\"form \"\n     2,…] clears values and definitions for all symbols whose names match any of the string patterns formᵢ. ", 
"ClearAll" : "ClearAll[symb₁,symb₂,…] clears all values, definitions, attributes, messages, and defaults associated with symbols. \nClearAll[\"form \"\n     1,\"form \"\n     2,…] clears all symbols whose names textually match any of the formᵢ. ", 
"ClearAttributes" : "ClearAttributes[s,attr] removes attr from the list of attributes of the symbol s. ", 
"ClearSystemCache" : "ClearSystemCache[] clears internal system caches of stored results.", 
"ClebschGordan" : "ClebschGordan[{j₁,m₁},{j₂,m₂},{j,m}] gives the Clebsch–Gordan coefficient for the decomposition of |j,m〉 in terms of |j₁,m₁〉|j₂,m₂〉. ", 
"ClickPane" : "ClickPane[image,func] represents a clickable pane that displays as image and applies func to the x,y coordinates of each click within the pane.\nClickPane[image,{{xₘᵢₙ,yₘᵢₙ},{xₘₐₓ,yₘₐₓ}},func] specifies the range of coordinates to use.", 
"Clip" : "Clip[x] gives x clipped to be between -1 and +1. \nClip[x,{min,max}] gives x for min≤x≤max, min for x<min and max for x>max. \nClip[x,{min,max},{vₘᵢₙ,vₘₐₓ}] gives vₘᵢₙ for x<min and vₘₐₓ for x>max. ", 
"ClipFill" : "ClipFill is an option for plotting functions that specifies what should be shown where curves or surfaces would extend beyond the plot range. ", 
"ClippingStyle" : "ClippingStyle is an option for plotting functions that specifies the style of what should be drawn when curves or surfaces would extend beyond the plot range. ", 
"Clock" : "Clock[] represents a clock variable whose value cycles continuously from 0 to 1 once per second when it appears inside a dynamically updated object such as a Dynamic. \nClock[t] cycles from 0 to t every t seconds.\nClock[vₘₐₓ,t] cycles from 0 to vₘₐₓ every t seconds.\nClock[{vₘᵢₙ,vₘₐₓ},t] cycles through the range vₘᵢₙ to vₘₐₓ every t seconds.\nClock[{vₘᵢₙ,vₘₐₓ}] cycles through the range vₘᵢₙ to vₘₐₓ over the course of vₘₐₓ-vₘᵢₙ seconds.\nClock[{vₘᵢₙ,vₘₐₓ,dv}] cycles from vₘᵢₙ to vₘₐₓ in steps of dv, spending dv seconds at each value.\nClock[{vₘᵢₙ,vₘₐₓ,dv},t] cycles from vₘᵢₙ to vₘₐₓ in steps dv every t seconds.\nClock[vals,t,n] goes through the cycle only n times, then always yields only the maximum value.", 
"Close" : "Close[stream] closes a stream. ", 
"CloseKernels" : "CloseKernels[] terminates all parallel kernels from the list Kernels[].\nCloseKernels[k] terminates the kernel k.\nCloseKernels[{k₁,k₂,…}] terminates the kernels k₁, k₂, ….", 
"ClosenessCentrality" : "ClosenessCentrality[g] gives a list of closeness centralities for the vertices in the graph g.", 
"Closing" : "Closing[image,ker] gives the morphological closing of image with respect to the structuring element ker.\nClosing[image,r] gives the closing with respect to a range r square.", 
"ClosingAutoSave" : "ClosingAutoSave is an option for notebooks that specifies whether a notebook is automatically saved when it is closed.", 
"ClusteringComponents" : "ClusteringComponents[array] gives an array in which each element of array is replaced by an integer index representing the cluster in which the element lies.\nClusteringComponents[array,n] finds at most n clusters.\nClusteringComponents[array,n,level] finds clusters at the specified level in array.\nClusteringComponents[image] finds clusters of pixels with similar values in image.\nClusteringComponents[image,n] finds at most n clusters in image.", 
"CMYKColor" : "CMYKColor[cyan,magenta,yellow,black] is a graphics directive which specifies that graphical objects which follow are to be displayed in the color given. \nCMYKColor[c,m,y,k,a] specifies opacity a. ", 
"Coefficient" : "Coefficient[expr,form] gives the coefficient of form in the polynomial expr. \nCoefficient[expr,form,n] gives the coefficient of form^n in expr. ", 
"CoefficientArrays" : "CoefficientArrays[polys,vars] gives the arrays of coefficients of the variables vars in the polynomials polys. ", 
"CoefficientDomain" : "CoefficientDomain is an option for GroebnerBasis, PolynomialReduce and PolynomialMod which specifies the domain for polynomial coefficients.", 
"CoefficientList" : "CoefficientList[poly,var] gives a list of coefficients of powers of var in poly, starting with power 0. \nCoefficientList[poly,{var₁,var₂,…}] gives an array of coefficients of the varᵢ. ", 
"CoefficientRules" : "CoefficientRules[poly,{x₁,x₂,…}] gives the list {{e₁₁,e₁₂,…}->c₁,{e₂₁,…}->c₂,…} of exponent vectors and coefficients for the monomials in poly with respect to the xᵢ.\nCoefficientRules[poly,{x₁,x₂,…},order] gives the result with the monomial ordering specified by order.", 
"CoifletWavelet" : "CoifletWavelet[] represents a Coiflet wavelet of order 2.\nCoifletWavelet[n] represents a Coiflet wavelet of order n.", 
"Collect" : "Collect[expr,x] collects together terms involving the same powers of objects matching x. \nCollect[expr,{x₁,x₂,…}] collects together terms that involve the same powers of objects matching x₁, x₂, …. \nCollect[expr,var,h] applies h to the expression that forms the coefficient of each term obtained. ", 
"Colon" : "Colon[x,y,…] displays as x∶y∶….", 
"ColonForm" : "ColonForm[a,b] prints as a: b.", 
"ColorCombine" : "ColorCombine[{image₁,image₂,…}] creates a multichannel image by combining the sequence of channels in the imageᵢ. \nColorCombine[{image₁,image₂,…},colorspace] combines images that represent the color components specified by colorspace.", 
"ColorConvert" : "ColorConvert[expr,colspace] converts color specifications in expr to refer to the color space represented by colspace.", 
"ColorData" : "ColorData[\"scheme\"] gives a function that generates colors in the named color scheme when applied to parameter values. \nColorData[\"scheme\",\"property\"] gives the specified property of a color scheme.\nColorData[\"collection\"] gives a list of color schemes in a named collection.\nColorData[] gives a list of named collections of color schemes.", 
"ColorDataFunction" : "ColorDataFunction[range,…] is a function that represents a color scheme. ", 
"ColorFunction" : "ColorFunction is an option for graphics functions that specifies a function to apply to determine colors of elements. ", 
"ColorFunctionScaling" : "ColorFunctionScaling is an option for graphics functions that specifies whether arguments supplied to a color function should be scaled to lie between 0 and 1. ", 
"Colorize" : "Colorize[m] generates an image from an integer matrix m, using colors for positive integers and black for non-positive integers.\nColorize[image] replaces intensity values in image with pseudocolor values.", 
"ColorNegate" : "ColorNegate[image] gives the negative of image, in which all colors have been negated.", 
"ColorOutput" : "ColorOutput is an option for graphics functions that specifies the type of color output to produce. ", 
"ColorQuantize" : "ColorQuantize[image,n] gives an approximation to image that uses only n distinct colors.", 
"ColorRules" : "ColorRules is an option for ArrayPlot which specifies how colors of cells should be determined from values. ", 
"ColorSelectorSettings" : "ColorSelectorSettings->{opt->val} is a global option that specifies settings for the Color dialog box.", 
"ColorSeparate" : "ColorSeparate[image] gives a list of single-channel images corresponding to each of the color channels in image.\nColorSeparate[image,colorspace] gives a list of images corresponding to the components of colorspace.", 
"ColorSetter" : "ColorSetter[color] represents a color setter which displays as a swatch of the specified color and when clicked brings up a system color picker dialog.\nColorSetter[Dynamic[color]] uses the dynamically updated current value of color, with the value of color being reset if the color is modified.\nColorSetter[] gives a color setter with initial color gray.", 
"ColorSlider" : "ColorSlider[color] represents a color slider currently set to the color corresponding to color.\nColorSlider[Dynamic[color]] uses the dynamically updated current value of color, with the value of color being reset if the color is modified.\nColorSlider[] represents a color slider with an initial gray color.", 
"ColorSpace" : "ColorSpace is an option for Image and related functions that specifies the color space to which color values refer.", 
"Column" : "Column[{expr₁,expr₂,…}] is an object that formats with the exprᵢ arranged in a column, with expr₁ above expr₂, etc. \nColumn[list,alignment] aligns each element horizontally in the specified way. \nColumn[list,alignment,spacing] leaves the specified number of x-heights of spacing between successive elements.", 
"ColumnAlignments" : "ColumnAlignments is an option for the low-level function GridBox that specifies how entries in each column should be aligned. ", 
"ColumnForm" : "ColumnForm[{e₁,e₂,…}] prints as a column with e₁ above e₂, etc. \nColumnForm[list,horiz] specifies the horizontal alignment of each element. \nColumnForm[list,horiz,vert] also specifies the vertical alignment of the whole column. ", 
"ColumnLines" : "ColumnLines is an option for the low-level function GridBox which specifies whether lines should be drawn between adjacent columns. ", 
"ColumnsEqual" : "ColumnsEqual is an option for the low-level function GridBox which specifies whether all columns in the grid should be assigned equal width. ", 
"ColumnSpacings" : "ColumnSpacings is an option for the low-level function GridBox which specifies the spaces in ems that should be inserted between adjacent columns. ", 
"ColumnWidths" : "ColumnWidths is an option for the low-level function GridBox which specifies the widths to use for columns. ", 
"CommonDefaultFormatTypes" : "CommonDefaultFormatTypes->{opt₁->val₁,opt₂->val₂,…} is an option that specifies default formats for newly created cells.", 
"Commonest" : "Commonest[list] gives a list of the elements that are the most common in list.\nCommonest[list,n] gives a list of the n most common elements in list.", 
"CommonestFilter" : "CommonestFilter[image,r] transforms image by replacing each pixel with the most common pixel value in its range r neighborhood.\nCommonestFilter[data,r] applies commonest filtering to an array of data.", 
"CompilationOptions" : "CompilationOptions is an option for Compile that specifies settings for the compilation process. ", 
"CompilationTarget" : "CompilationTarget is an option for Compile that specifies the target runtime for the compiled function. ", 
"Compile" : "Compile[{x₁,x₂,…},expr] creates a compiled function that evaluates expr assuming numerical values of the xᵢ. \nCompile[{{x₁,t₁},…},expr] assumes that xᵢ is of a type that matches tᵢ. \nCompile[{{x₁,t₁,n₁},…},expr] assumes that xᵢ is a rank nᵢ array of objects, each of a type that matches tᵢ. \nCompile[vars,expr,{{p₁,pt₁},…}] assumes that subexpressions in expr that match pᵢ are of types that match ptᵢ. ", 
"Compiled" : "Compiled is an option for various numerical and plotting functions which specifies whether the expressions they work with should automatically be compiled. ", 
"CompiledFunction" : "CompiledFunction[args…] represents compiled code for evaluating a compiled function. ", 
"Complement" : "Complement[eₐₗₗ,e₁,e₂,…] gives the elements in eₐₗₗ which are not in any of the eᵢ. ", 
"CompleteGraph" : "CompleteGraph[n] gives the complete graph with n vertices Kₙ.\nCompleteGraph[{n₁,n₂,…,nₖ}] gives the complete k-partite graph with n₁+n₂+⋯+nₖ vertices Subscript[K,n₁,n₂,…,nₖ].", 
"CompleteGraphQ" : "CompleteGraphQ[g] yields True if the graph g is a complete graph, and False otherwise.\nCompleteGraphQ[g,vlist] yields True if the subgraph induced by vlist is a complete graph, and False otherwise.", 
"CompleteKaryTree" : "CompleteKaryTree[n] gives the complete binary tree with n levels.\nCompleteKaryTree[n,k] gives the complete k-ary tree with n levels.", 
"Complex" : "Complex is the head used for complex numbers. ", 
"Complexes" : "Complexes represents the domain of complex numbers, as in x∈Complexes. ", 
"ComplexExpand" : "ComplexExpand[expr] expands expr assuming that all variables are real. \nComplexExpand[expr,{x₁,x₂,…}] expands expr assuming that variables matching any of the xᵢ are complex. ", 
"ComplexInfinity" : "ComplexInfinity represents a quantity with infinite magnitude, but undetermined complex phase. ", 
"ComplexityFunction" : "ComplexityFunction is an option for Simplify and other functions which gives a function to rank the complexity of different forms of an expression. ", 
"ComponentMeasurements" : "ComponentMeasurements[m,\"prop\"] computes the values of property prop for each component of a label matrix m that consists of identical elements.\nComponentMeasurements[image,\"prop\"] uses the connectivity of nonzero pixels in image to compute the label matrix.\nComponentMeasurements[{m,image},\"prop\"] uses pixel values of image to compute property prop.\nComponentMeasurements[…,\"prop\",crit] only returns measurements that satisfy a criterion crit.", 
"ComposeList" : "ComposeList[{f₁,f₂,…},x] generates a list of the form {x,f₁[x],f₂[f₁[x]],…}. ", 
"ComposeSeries" : "ComposeSeries[series₁,series₂,…] composes several power series. ", 
"Composition" : "Composition[f₁,f₂,f₃,…] represents a composition of the functions f₁, f₂, f₃, …. ", 
"CompoundExpression" : "expr₁;expr₂;… evaluates the exprᵢ in turn, giving the last one as the result. ", 
"Compress" : "Compress[expr] gives a compressed representation of expr as a string. ", 
"Condition" : "patt\/;test is a pattern which matches only if the evaluation of test yields True. \nlhs:>rhs\/;test represents a rule which applies only if the evaluation of test yields True. \nlhs:=rhs\/;test is a definition to be used only if test yields True. ", 
"ConditionalExpression" : "ConditionalExpression[expr,cond] is a symbolic construct that represents the expression expr when the condition cond is True.", 
"Conditioned" : "Conditioned[expr,cond] or expr⦈cond represents expr conditioned by the predicate cond.", 
"Cone" : "Cone[{{x₁,y₁,z₁},{x₂,y₂,z₂}},r] represents a cone with a base of radius r centered at (x₁,y₁,z₁) and a tip at (x₂,y₂,z₂). \nCone[{{x₁,y₁,z₁},{x₂,y₂,z₂}}] represents a cone with a base of radius 1.", 
"ConfidenceLevel" : "ConfidenceLevel is an option for LinearModelFit and other fitting functions that specifies the confidence level to use in generating parameter and prediction intervals.", 
"ConfigurationPath" : "ConfigurationPath is a global option that specifies which directories are searched for systemwide configuration information.", 
"Congruent" : "Congruent[x,y,…] displays as x≡y≡….", 
"Conjugate" : "Conjugate[z] or z gives the complex conjugate of the complex number z. ", 
"ConjugateTranspose" : "ConjugateTranspose[m] or Superscript[m, ] gives the conjugate transpose of m. ", 
"Conjunction" : "Conjunction[expr,{a₁,a₂,…}] gives the conjunction of expr over all choices of the Boolean variables aᵢ.", 
"Connect" : "Connect is a setting for the LinkMode option of LinkOpen.  LinkMode->Connect causes a link to be created that will connect to a link listening on a named port.", 
"ConnectedComponents" : "ConnectedComponents[g] gives the connected components of the graph g.\nConnectedComponents[g,{v₁,v₂,…}] gives the connected components that include at least one of the vertices v₁, v₂, ….", 
"ConnectedGraphQ" : "ConnectedGraphQ[g] yields True if the graph g is connected, and False otherwise.", 
"ConoverTest" : "ConoverTest[{data₁,data₂}] tests whether the variances of data₁ and data₂ are equal.\nConoverTest[dspec,Subsuperscript[ σ, 0, 2]] tests a dispersion measure against Subsuperscript[ σ, 0, 2].\nConoverTest[dspec,Subsuperscript[ σ, 0, 2],\"property\"] returns the value of \"property\".", 
"Constant" : "Constant is an attribute that indicates zero derivative of a symbol with respect to all parameters. ", 
"ConstantArray" : "ConstantArray[c,n] generates a list of n copies of the element c.\nConstantArray[c,{n₁,n₂,…}] generates an n₁⨯n₂⨯… array of nested lists containing copies of the element c.", 
"Constants" : "Constants is an option for Dt which gives a list of objects to be taken as constants. ", 
"ContentPadding" : "ContentPadding is an option for objects that can be displayed with frames that specifies whether the vertical margins should shrink wrap tightly around the contents.", 
"ContentSelectable" : "ContentSelectable is an option to constructs such as Inset, Graphics, and GraphicsGroup that specifies whether and how content within them should be selectable. ", 
"ContentSize" : "ContentSize is an option for Manipulate and other functions that specifies the size of the content area to use.", 
"Context" : "Context[] gives the current context. \nContext[symbol] gives the context in which a symbol appears. ", 
"Contexts" : "Contexts[] gives a list of all contexts. \nContexts[\"string\"] gives a list of the contexts that match the string. ", 
"ContextToFileName" : "ContextToFileName[\"context\"] gives the string specifying the file name that is by convention associated with a particular context.", 
"Continue" : "Continue[] exits to the nearest enclosing Do, For, or While in a procedural program. ", 
"ContinuedFraction" : "ContinuedFraction[x,n] generates a list of the first n terms in the continued fraction representation of x. \nContinuedFraction[x] generates a list of all terms that can be obtained given the precision of x. ", 
"ContinuedFractionK" : "ContinuedFractionK[f,g,{i,iₘᵢₙ,iₘₐₓ}] represents the continued fraction Subsuperscript[ Κ, i=iₘᵢₙ, iₘₐₓ]f\/g.\nContinuedFractionK[g,{i,iₘᵢₙ,iₘₐₓ}] represents the continued fraction Subsuperscript[ Κ, i=iₘᵢₙ, iₘₐₓ]1\/g.", 
"ContinuousAction" : "ContinuousAction is an option for Manipulate, Slider, and related functions that specifies whether action should be taken continuously while controls are being moved.", 
"ContinuousTimeModelQ" : "ContinuousTimeModelQ[expr] gives True if expr is a continuous-time StateSpaceModel or TransferFunctionModel object, and False otherwise.", 
"ContinuousWaveletData" : "ContinuousWaveletData[{{oct₁,voc₁}->coef₁,…},wave] yields a continuous wavelet data object with wavelet coefficients coefᵢ corresponding to octave and voice {octᵢ,vocᵢ} and wavelet wave.", 
"ContinuousWaveletTransform" : "ContinuousWaveletTransform[{x₁,x₂,…}] gives the continuous wavelet transform of a list of values xᵢ.\nContinuousWaveletTransform[data,wave] gives the continuous wavelet transform using the wavelet wave.\nContinuousWaveletTransform[data,wave,{noct,nvoc}] gives the continuous wavelet transform using noct octaves with nvoc voices per octave.\nContinuousWaveletTransform[sound,…] gives the continuous wavelet transform of sampled sound.", 
"ContourDetect" : "ContourDetect[image] gives a binary image in which white pixels correspond to the zeros and zero crossings in image.\nContourDetect[image,delta] treats values in image that are smaller in absolute value than delta as zero.", 
"ContourGraphics" : "ContourGraphics[array] is a representation of a contour plot. ", 
"ContourLabels" : "ContourLabels is an option for contour plots that specifies how to label contours. ", 
"ContourLines" : "ContourLines is an option for contour plots that specifies whether to draw explicit contour lines. ", 
"ContourPlot" : "ContourPlot[f,{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] generates a contour plot of f as a function of x and y. \nContourPlot[f==g,{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] plots contour lines for which f=g. \nContourPlot[{f₁==g₁,f₂==g₂,…},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] plots several contour lines. ", 
"ContourPlot3D" : "ContourPlot3D[f,{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ},{z,zₘᵢₙ,zₘₐₓ}] produces a three-dimensional contour plot of f as a function of x, y, and z. \nContourPlot3D[f==g,{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ},{z,zₘᵢₙ,zₘₐₓ}] plots the contour surface for which f=g. ", 
"Contours" : "Contours is an option for contour plots that specifies the contours to draw. ", 
"ContourShading" : "ContourShading is an option for contour plots that specifies how the regions between contour lines should be shaded. ", 
"ContourStyle" : "ContourStyle is an option for contour plots that specifies the style in which contour lines or surfaces should be drawn. ", 
"ContraharmonicMean" : "ContraharmonicMean[list] gives the contraharmonic mean of the values in list.\nContraharmonicMean[list,p] gives the order p Lehmer contraharmonic mean.", 
"Control" : "Control[{u,dom}] represents an interactive control for the variable u in the domain dom, with the type of control chosen to be appropriate for the domain specified.\nControl[{{u,uᵢₙᵢₜ},dom}] represents a control with initial value uᵢₙᵢₜ.", 
"ControlActive" : "ControlActive[act,norm] evaluates to act if a control that affects act is actively being used, and to norm otherwise.", 
"ControllabilityGramian" : "ControllabilityGramian[ss] gives the controllability Gramian of the StateSpaceModel object ss.", 
"ControllabilityMatrix" : "ControllabilityMatrix[ss] gives the controllability matrix of the StateSpaceModel object ss.", 
"ControllableDecomposition" : "ControllableDecomposition[ss] yields the controllable decomposition of the StateSpaceModel object ss. The result is a list {Subscript[s,c],Subscript[ss,c]} where Subscript[s,c] is the transformation matrix and Subscript[ss,c] is the controllable subspace of ss.", 
"ControllableModelQ" : "ControllableModelQ[ss] yields True if the StateSpaceModel object ss is controllable, and False otherwise.", 
"ControllerInformation" : "ControllerInformation[] gives dynamically updated information on currently connected controller devices.", 
"ControllerLinking" : "ControllerLinking is an option for Manipulate, Graphics3D, Plot3D, and related functions that specifies whether to allow interactive control by external controllers.", 
"ControllerManipulate" : "ControllerManipulate[expr,{u,uₘᵢₙ,uₘₐₓ}] generates a version of expr set up to allow interactive manipulation of the value of u using an external controller device.\nControllerManipulate[expr,{u,uₘᵢₙ,uₘₐₓ,du}] allows the value of u to vary between uₘᵢₙ and uₘₐₓ in steps du. \nControllerManipulate[expr,{{u,uᵢₙᵢₜ},uₘᵢₙ,uₘₐₓ,…}] takes the initial value of u to be uᵢₙᵢₜ. \nControllerManipulate[expr,{u,{u₁,u₂,…}}] allows u to take on discrete values u₁, u₂, …. \nControllerManipulate[expr,{u,…},{v,…},…] allows each of the u, v, … to be manipulated by the external controller device. \nControllerManipulate[expr,cᵤ->{u,…},cᵥ->{v,…},…] links the parameters to the specified controllers on the external controller device.", 
"ControllerMethod" : "ControllerMethod is an option for Manipulate, Graphics3D, Plot3D, and related functions that specifies the default way that controls on an external controller device should apply.", 
"ControllerPath" : "ControllerPath is an option that gives a list of external controllers or classes of controllers to try for functions such as ControllerState, Manipulate, and Graphics3D.", 
"ControllerState" : "ControllerState[\"c\"] gives the state of the control c for the first connected controller device on which it is supported.\nControllerState[{\"c \"\n  1,\"c \"\n  2,…}] gives the states of several controls.\nControllerState[id,\"c\"] gives the state of control c for controller devices with the specified identifier.\nControllerState[id,{\"c \"\n  1,\"c \"\n  2,…}] gives the states of several controls for several controller devices.", 
"ControlPlacement" : "ControlPlacement is an option for Manipulate, TabView, and other control objects that specifies where controls should be placed.", 
"ControlsRendering" : "ControlsRendering is a Style option that specifies how controls should be rendered.", 
"ControlType" : "ControlType is an option for Manipulate and related functions that specifies what type of controls should be displayed.", 
"Convergents" : "Convergents[list] gives a list of the convergents corresponding to the continued fraction terms list.\nConvergents[x,n] gives the first n convergents for a number x.\nConvergents[x] gives if possible all convergents leading to the number x.", 
"ConversionOptions" : "ConversionOptions is an option to Import and Export used to pass special options to a particular format.", 
"ConversionRules" : "ConversionRules is an option for Cell that can be set to a list of rules specifying how the contents of the cell are to be converted to external formats. ", 
"ConvertToPostScriptPacket" : "ConvertToPostScriptPacket is an internal symbol used for formatting.", 
"Convolve" : "Convolve[f,g,x,y] gives the convolution with respect to x of the expressions f and g.\nConvolve[f,g,{x₁,x₂,…},{y₁,y₂,…}] gives the multidimensional convolution.", 
"ConwayGroupCo1" : "ConwayGroupCo1[] represents the sporadic simple Conway group Co₁.", 
"ConwayGroupCo2" : "ConwayGroupCo2[] represents the sporadic simple Conway group Co₂.", 
"ConwayGroupCo3" : "ConwayGroupCo3[] represents the sporadic simple Conway group Co₃.", 
"CoordinatesToolOptions" : "CoordinatesToolOptions is an option for Graphics that gives values of options associated with the Get Coordinates tool.", 
"CoprimeQ" : "CoprimeQ[n₁,n₂] yields True if n₁ and n₂ are relatively prime, and yields False otherwise. \nCoprimeQ[n₁,n₂,…] yields True if all pairs of the nᵢ are relatively prime, and yields False otherwise. ", 
"Coproduct" : "Coproduct[x,y,…] displays as x∐y∐….", 
"CopulaDistribution" : "CopulaDistribution[ker,{dist₁,dist₂,…}] represents a copula distribution with kernel distribution ker and marginal distributions dist₁, dist₂, ….", 
"Copyable" : "Copyable is an option for Cell that specifies whether a cell can be copied interactively using the front end. ", 
"CopyDirectory" : "CopyDirectory[dir₁,dir₂] copies the directory dir₁ to dir₂. ", 
"CopyFile" : "CopyFile[file₁,file₂] copies file₁ to file₂. ", 
"CopyToClipboard" : "CopyToClipboard[expr] replaces the contents of the clipboard with expr.", 
"CornerFilter" : "CornerFilter[image] computes a measure for the presence of a corner for each pixel in image and returns the result as an intensity image.\nCornerFilter[image,r] detects corners at a pixel range r.", 
"CornerNeighbors" : "CornerNeighbors is an option for various array and image processing functions that specifies whether diagonally adjacent corners should be considered neighbors of particular elements. ", 
"Correlation" : "Correlation[v₁,v₂] gives the correlation between the vectors v₁ and v₂.\nCorrelation[m] gives the correlation matrix for the matrix m.\nCorrelation[m₁,m₂] gives the correlation matrix for the matrices m₁ and m₂.\nCorrelation[dist] gives the correlation matrix for the multivariate symbolic distribution dist.\nCorrelation[dist,i,j] gives the (i,j)ᵗʰ correlation for the multivariate symbolic distribution dist. ", 
"CorrelationDistance" : "CorrelationDistance[u,v] gives the correlation coefficient distance between vectors u and v.", 
"Cos" : "Cos[z] gives the cosine of z. ", 
"Cosh" : "Cosh[z] gives the hyperbolic cosine of z. ", 
"CoshIntegral" : "CoshIntegral[z] gives the hyperbolic cosine integral Chi(z).", 
"CosineDistance" : "CosineDistance[u,v] gives the angular cosine distance between vectors u and v.", 
"CosIntegral" : "CosIntegral[z] gives the cosine integral function Ci(z). ", 
"Cot" : "Cot[z] gives the cotangent of z. ", 
"Coth" : "Coth[z] gives the hyperbolic cotangent of z. ", 
"Count" : "Count[list,pattern] gives the number of elements in list that match pattern. \nCount[expr,pattern,levelspec] gives the total number of subexpressions matching pattern that appear at the levels in expr specified by levelspec. ", 
"CounterAssignments" : "CounterAssignments is an option for selections that sets the value of a specified counter.", 
"CounterFunction" : "CounterFunction is an option for counters that specifies the symbols used to display the value of the counter.", 
"CounterIncrements" : "CounterIncrements is an option for selections that specifies whether the value of a specified counter is incremented by one.", 
"CounterStyleMenuListing" : "CounterStyleMenuListing is an option for cells that specifies what counter styles are listed in the Counter popup menu of the Create Automatic Numbering Object dialog box.", 
"CountRoots" : "CountRoots[poly,x] gives the number of real roots of the polynomial poly in x.\nCountRoots[poly,{x,a,b}] gives the number of roots between a and b. ", 
"CountryData" : "CountryData[\"tag\",\"property\"] gives the value of the specified property for the country, country-like entity, or group of countries specified by \"tag\".\nCountryData[\"tag\",{property,…,dates}] gives time series for certain economic and other properties.", 
"Covariance" : "Covariance[v₁,v₂] gives the covariance between the vectors v₁ and v₂.\nCovariance[m] gives the covariance matrix for the matrix m.\nCovariance[m₁,m₂] gives the covariance matrix for the matrices m₁ and m₂.\nCovariance[dist] gives the covariance matrix for the multivariate symbolic distribution dist.\nCovariance[dist,i,j] gives the (i,j)ᵗʰ covariance for the multivariate symbolic distribution dist. ", 
"CovarianceEstimatorFunction" : "CovarianceEstimatorFunction is an option for generalized linear model fitting functions that specifies the estimator for the parameter covariance matrix.", 
"CramerVonMisesTest" : "CramerVonMisesTest[data] tests whether data is normally distributed using the Cramér–von Mises test.\nCramerVonMisesTest[data,dist] tests whether data is distributed according to dist using the Cramér–von Mises test.\nCramerVonMisesTest[data,dist,\"property\"] returns the value of \"property\".", 
"CreateArchive" : "CreateArchive[source] creates a compressed archive in the current directory from a file or directory specified by source.\nCreateArchive[source,path] creates a compressed archive in the directory or file specified by path.", 
"CreateDialog" : "CreateDialog[expr] creates a dialog notebook containing expr and opens it in the front end.\nCreateDialog[expr,obj] replaces the notebook represented by the notebook object obj with the one obtained from expr.", 
"CreateDirectory" : "CreateDirectory[\"dir\"] creates a directory with name dir. \nCreateDirectory[] creates a directory in the default area for temporary directories on your computer system.", 
"CreateDocument" : "CreateDocument[] creates an empty document notebook and opens it in the front end.\nCreateDocument[expr] creates and opens a document notebook containing the expression expr.\nCreateDocument[{expr₁,expr₂,…}] creates and opens a document notebook consisting of a sequence of cells containing the exprᵢ.\nCreateDocument[expr,obj] replaces the notebook represented by the notebook object obj with the one obtained from expr.", 
"CreateIntermediateDirectories" : "CreateIntermediateDirectories is an option for CreateDirectory and related functions that specifies whether to create intermediate directories in a directory path specified.", 
"CreatePalette" : "CreatePalette[expr] creates a palette notebook containing expr, and opens it in the front end.\nCreatePalette[{expr₁,expr₂,…}] creates and opens a palette notebook consisting of a sequence of cells containing the exprᵢ.\nCreatePalette[expr,obj] replaces the notebook represented by the notebook object obj with the one obtained from expr.", 
"CreateScheduledTask" : "CreateScheduledTask[expr] creates a task that will repeatedly evaluate expr once per second.\nCreateScheduledTask[expr,time] creates a task that will repeatedly evaluate expr every time seconds.\nCreateScheduledTask[expr,{time}] creates a task that will evaluate expr once after time seconds.\nCreateScheduledTask[expr,{time,count}] creates a task that will try evaluating expr once every time seconds up to count times total.\nCreateScheduledTask[expr,timespec,start] creates a task that will evaluate expr according to timespec starting at start time.", 
"CreateWindow" : "CreateWindow[] creates an empty window in the front end.\nCreateWindow[nb] creates a window displaying the notebook expression nb, and opens it in the front end.\nCreateWindow[nb,obj] replaces the notebook represented by the notebook object obj with the one obtained from expr.", 
"CriticalSection" : "CriticalSection[{var₁,var₂,…},expr] locks the variables varᵢ with respect to parallel computation, evaluates expr, then releases the varᵢ.", 
"Cross" : "Cross[a,b] gives the vector cross product of a and b. ", 
"CrossingDetect" : "CrossingDetect[image] gives a binary image in which white pixels correspond to the zero crossings in image.\nCrossingDetect[image,delta] treats values in image that are smaller in absolute value than delta as zero.", 
"CrossMatrix" : "CrossMatrix[r] gives a matrix whose elements are 1 in a centered cross-shaped region that extends r positions along each index direction, and are 0 otherwise.\nCrossMatrix[r,w] gives a w⨯w matrix containing a cross-shaped region of 1s.\nCrossMatrix[{r₁,r₂,…},…] yields an array whose elements are 1 in a centered cross-shaped region that extends rᵢ positions in the iᵗʰ index direction.", 
"Csc" : "Csc[z] gives the cosecant of z. ", 
"Csch" : "Csch[z] gives the hyperbolic cosecant of z. ", 
"Cubics" : "Cubics is an option for functions that involve solving algebraic equations, that specifies whether explicit forms for solutions to cubic equations should be given.", 
"Cuboid" : "Cuboid[{xₘᵢₙ,yₘᵢₙ,zₘᵢₙ}] is a three-dimensional graphics primitive that represents a unit cube, oriented parallel to the axes. \nCuboid[{xₘᵢₙ,yₘᵢₙ,zₘᵢₙ},{xₘₐₓ,yₘₐₓ,zₘₐₓ}] specifies a cuboid by giving the coordinates of opposite corners. ", 
"Cumulant" : "Cumulant[dist,r] gives the rᵗʰ cumulant of the symbolic distribution dist.\nCumulant[list,r] gives the rᵗʰ cumulant of the elements in the list.\nCumulant[r] represents the rᵗʰ formal cumulant. ", 
"CumulantGeneratingFunction" : "CumulantGeneratingFunction[dist,t] gives the cumulant generating function for the symbolic distribution dist as a function of the variable t. \nCumulantGeneratingFunction[dist,{t₁,t₂,…}] gives the cumulant generating function for the multivariate symbolic distribution dist as a function of the variables t₁, t₂, …. ", 
"Cup" : "Cup[x,y,…] displays as x⌣y⌣….", 
"CupCap" : "CupCap[x,y,…] displays as x≍y≍….", 
"Curl" : "Curl[f] gives the curl of the vector-valued function f in the default coordinate system. Curl[f, coordsys] gives the curl of f in the coordinate system coordsys.", 
"CurrentImage" : "CurrentImage[] returns the current image captured from a connected camera.\nCurrentImage[n] returns n sequential image frames as a list.", 
"CurrentValue" : "CurrentValue[item] gives the current value of item at a location in the Mathematica system and interface. \nCurrentValue[{item,spec}] gives the current value for the feature of item specified by spec.\nCurrentValue[obj,item] gives the current value of item associated with the object obj. ", 
"CurvatureFlowFilter" : "CurvatureFlowFilter[image] applies a mean curvature flow filter to image.\nCurvatureFlowFilter[image,t] specifies the amount t of curvature flow to be applied.\nCurvatureFlowFilter[image,t,k] applies the curvature flow with a modified conductance term parametrized by k.", 
"CurveClosed" : "CurveClosed is an option for JoinedCurve that specifies whether individual curve components should be closed curves.", 
"Cyan" : "Cyan represents the color cyan in graphics or style specifications. ", 
"CycleGraph" : "CycleGraph[n] gives the cycle graph with n vertices Cₙ.", 
"Cycles" : "Cycles[{cyc₁,cyc₂,…}] represents a permutation with disjoint cycles cycᵢ.", 
"CyclicGroup" : "CyclicGroup[n] represents the cyclic group of degree n.", 
"Cyclotomic" : "Cyclotomic[n,x] gives the nᵗʰ cyclotomic polynomial in x. ", 
"Cylinder" : "Cylinder[{{x₁,y₁,z₁},{x₂,y₂,z₂}},r] represents a cylinder of radius r around the line from (x₁,y₁,z₁) to (x₂,y₂,z₂). \nCylinder[{{x₁,y₁,z₁},{x₂,y₂,z₂}}] represents a cylinder of radius 1. ", 
"CylindricalDecomposition" : "CylindricalDecomposition[ineqs,{x₁,x₂,…}] finds a decomposition of the region represented by the inequalities ineqs into cylindrical parts whose directions correspond to the successive xᵢ. ", 
"D" : "D[f,x] gives the partial derivative ∂f\/∂x. \nD[f,{x,n}] gives the multiple derivative ∂ⁿf\/∂xⁿ. \nD[f,x,y,…] differentiates f successively with respect to x,y,….\nD[f,{{x₁,x₂,…}}] for a scalar f gives the vector derivative (∂f\/∂x₁,∂f\/∂x₂,…). \nD[f,{array}] gives a tensor derivative.", 
"DagumDistribution" : "DagumDistribution[p,a,b] represents a Dagum distribution with shape parameters p and a and scale parameter b.", 
"DamerauLevenshteinDistance" : "DamerauLevenshteinDistance[u,v] gives the Damerau–Levenshtein distance between strings or vectors u and v.", 
"DampingFactor" : "DampingFactor is an option for FindRoot, which can be used to control convergence behavior. DampingFactor -> n uses a damping factor of n in Newton's method.", 
"Darker" : "Darker[color] represents a darker version of the specified color. \nDarker[color,f] represents a version of the specified color darkened by a fraction f. \nDarker[image,…] gives a darker version of an image.", 
"Dashed" : "Dashed is a graphics directive specifying that lines that follow should be drawn dashed.", 
"Dashing" : "Dashing[{r₁,r₂,…}] is a two-dimensional graphics directive specifying that lines that follow are to be drawn dashed, with successive segments of lengths r₁, r₂, … (repeated cyclically). The rᵢ are given as a fraction of the total width of the graph. \nDashing[r] is equivalent to Dashing[{r,r}]. ", 
"DataDistribution" : "DataDistribution[ddist,…] represents a probability distribution of type ddist, estimated from a set of data.", 
"DataRange" : "DataRange is an option for functions such as ListPlot and ListDensityPlot that specifies what range of actual coordinates the data should be assumed to occupy. ", 
"DataReversed" : "DataReversed is an option for ArrayPlot and related functions that specifies whether data should be plotted in reverse order.", 
"Date" : "Date[] gives the current local date and time in the form {year,month,day,hour,minute,second}. ", 
"DateDifference" : "DateDifference[date₁,date₂] gives the number of days from date₁ to date₂.\nDateDifference[date₁, date₂,\"unit\"] gives the difference between date₁ and date₂ in the specified unit.\nDateDifference[date₁,date₂,{\"unit \"\n     1,\"unit \"\n     2,…}] gives the difference as a list with elements corresponding to the successive \"unitᵢ\".", 
"DateFunction" : "DateFunction is an option for DateListPlot that specifies how dates given as input should be converted to date lists.", 
"DateList" : "DateList[] gives the current local date and time in the form {year,month,day,hour,minute,second}. \nDateList[time] gives a date list corresponding to an AbsoluteTime specification.\nDateList[{y,m,d,h,m,s}] converts a date list to standard normalized form. \nDateList[\"string\"] converts a date string to a date list. \nDateList[{\"string\",{\"e \"\n  1,\"e \"\n  2,…}}] gives the date list obtained by extracting elements \"eᵢ\" from \"string\".", 
"DateListLogPlot" : "DateListLogPlot[{{date₁,v₁},{date₂,v₂},…}] makes a log plot with values vᵢ at a sequence of dates.\nDateListLogPlot[{v₁,v₂,…},datespec] makes a log plot with dates at equal intervals specified by datespec.\nDateListLogPlot[{list₁,list₂,…}] plots several lists of values.", 
"DateListPlot" : "DateListPlot[{{date₁,v₁},{date₂,v₂},…}] plots points with values vᵢ at a sequence of dates.\nDateListPlot[{v₁,v₂,…},datespec] plots points with dates at equal intervals specified by datespec.\nDateListPlot[{list₁,list₂,…}] plots several lists of values.", 
"DatePattern" : "DatePattern[{\"e \"\n  1,\"e \"\n  2,…}] represents the characters of a date with elements of type \"eᵢ\" in StringExpression.\nDatePattern[{\"e \"\n  1,\"e \"\n  2,…},sep] allows separators that match the string expression sep.", 
"DatePlus" : "DatePlus[date,n] gives the date n days after date.\nDatePlus[date,{n,\"unit\"}] gives the date n units after date.\nDatePlus[date,{{n₁,unit₁},{n₂,unit₂},…}] gives a date offset by nᵢ units of each specified size. \nDatePlus[n] gives the date n days after the current date.\nDatePlus[offset] gives the date with the specified offset from the current date.", 
"DateString" : "DateString[] gives a string representing the complete current local date and time. \nDateString[\"elem\"] gives the specified element or format for date and time.\nDateString[{\"elem \"\n     1,\"elem \"\n     2,…}] concatenates the specified elements in the order given.\nDateString[{y,m,d,h,m,s}] gives a string corresponding to a DateList specification.\nDateString[time] gives a string corresponding to an AbsoluteTime specification.\nDateString[spec,elems] gives elements elems of the date or time specification spec.", 
"DateTicksFormat" : "DateTicksFormat is an option for DateListPlot which specifies how date tick labels should be formatted.", 
"DaubechiesWavelet" : "DaubechiesWavelet[] represents a Daubechies wavelet of order 2. \nDaubechiesWavelet[n] represents a Daubechies wavelet of order n.", 
"DavisDistribution" : "DavisDistribution[b,n,μ] represents a Davis distribution with scale parameter b, shape parameter n, and location parameter μ.", 
"DawsonF" : "DawsonF[z] gives the Dawson integral F(z).", 
"DeBruijnGraph" : "DeBruijnGraph[m,n] gives the n-dimensional De Bruijn graph with m symbols.\nDeBruijnGraph[m,n,type] gives the De Bruijn graph with connectivity given by type.", 
"Decimal" : "Decimal is a setting for the ColumnAlignments option of GridBox which states that numbers should align along the decimal place.", 
"DeclarePackage" : "DeclarePackage[\"context`\",{\"name \"\n     1,\"name \"\n     2,…}] declares that Needs[\"context`\"] should automatically be executed if a symbol with any of the specified names is ever used. ", 
"Decompose" : "Decompose[poly,x] decomposes a polynomial, if possible, into a composition of simpler polynomials. ", 
"Decrement" : "x-- decreases the value of x by 1, returning the old value of x. ", 
"DedekindEta" : "DedekindEta[τ] gives the Dedekind eta modular elliptic function η(τ).", 
"Default" : "Default[f] gives the default value for arguments of the function f obtained with a _. pattern object. \nDefault[f,i] gives the default value to use when _. appears as the iᵗʰ argument of f. \nDefault[f,i,n] gives the default value for the iᵗʰ argument out of a total of n arguments. \nDefault[f,…]=val defines default values for arguments of f.", 
"DefaultAxesStyle" : "DefaultAxesStyle is a low-level option for graphics functions that specifies the default style to use in displaying axes and axes-like constructs.", 
"DefaultBaseStyle" : "DefaultBaseStyle is a low-level option for formatting and related constructs that specifies a default base style to use before BaseStyle.", 
"DefaultBoxStyle" : "DefaultBoxStyle is a low-level option for three-dimensional graphics functions that specifies the default style to use in rendering the bounding box.", 
"DefaultButton" : "DefaultButton[] represents an OK button that closes a dialog, and is the default when Enter is pressed in the dialog.\nDefaultButton[action] represents a button that is labeled OK, and whose action is to evaluate action.\nDefaultButton[label,action] uses label as the label for the button.", 
"DefaultColor" : "DefaultColor is an option for graphics functions that specifies the default color to use for lines, points, etc. ", 
"DefaultDuplicateCellStyle" : "DefaultDuplicateCellStyle is a notebook option that specifies the default style to use for cells created by automatic duplication of other cells in the notebook. ", 
"DefaultDuration" : "DefaultDuration is an option to Animate and related functions that specifies the default total duration of the animation in seconds.", 
"DefaultElement" : "DefaultElement is an option for Grid and related constructs which specifies what to insert when a new element is interactively created.", 
"DefaultFaceGridsStyle" : "DefaultFaceGridsStyle is a low-level option for 3D graphics functions that specifies the default style to use in rendering face grids.", 
"DefaultFieldHintStyle" : "DefaultFieldHintStyle is a low-level option for InputField that specifies the default style to use for displaying the field hint.", 
"DefaultFontProperties" : "DefaultFontProperties is a global option that specifies various properties of a font family, such as its character encoding and whether it is monospaced.", 
"DefaultFormatType" : "DefaultFormatType is an option for cells that specifies the format used for displaying expressions in a newly created cell.", 
"DefaultFrameStyle" : "DefaultFrameStyle is a low-level option for graphics and related constructs that specifies the default style to use in displaying their frames.", 
"DefaultFrameTicksStyle" : "DefaultFrameTicksStyle is a low-level option for 2D graphics functions that specifies the default style to use in rendering frame ticks.", 
"DefaultGridLinesStyle" : "DefaultGridLinesStyle is a low-level option for 2D graphics functions that specifies the default style to use in rendering grid lines.", 
"DefaultInlineFormatType" : "DefaultInlineFormatType is an option for cells that specifies the format used for displaying expressions in a newly created inline cell.", 
"DefaultLabelStyle" : "DefaultLabelStyle is a low-level option for formatting and related constructs that specifies the default style to use in displaying their label-like elements.", 
"DefaultMenuStyle" : "DefaultMenuStyle is a low-level option for menu-generating constructs that specifies the default style to use for displaying menu items.", 
"DefaultNaturalLanguage" : "DefaultNaturalLanguage is an option for character selections that specifies the language used when checking the spelling of a word in a human natural language selection.", 
"DefaultNewCellStyle" : "DefaultNewCellStyle is a notebook option which specifies the default style to use for new cells created in the notebook. ", 
"DefaultNewInlineCellStyle" : "DefaultNewInlineCellStyle is an option for cells that specifies the default style to use for new inline cells created in the notebook.", 
"DefaultNotebook" : "DefaultNotebook is a global option that specifies which notebook is used as a template for all new notebooks.", 
"DefaultOptions" : "DefaultOptions is a style option that allows default options to be specified for particular formatting and related constructs. ", 
"DefaultStyleDefinitions" : "DefaultStyleDefinitions is a global option that specifies the default stylesheet for all new notebooks.", 
"DefaultTicksStyle" : "DefaultTicksStyle is a low-level option for graphics functions that specifies the default style to use in rendering ticks.", 
"DefaultValues" : "DefaultValues[f] gives a list of transformation rules corresponding to all defaults (values for Default[f[x,…],…], etc.) defined for the symbol f.", 
"Defer" : "Defer[expr] yields an object that displays as the unevaluated form of expr, but that is evaluated if it is explicitly given as Mathematica input. ", 
"Definition" : "Definition[symbol] prints as the definitions given for a symbol. ", 
"Degree" : "Degree gives the number of radians in one degree. It has a numerical value of (π)\/(180). ", 
"DegreeCentrality" : "DegreeCentrality[g] gives a list of vertex degrees for the vertices in the underlying simple graph of g. \nDegreeCentrality[g,\"InDegree\"] gives a list of vertex in-degrees.\nDegreeCentrality[g,\"OutDegree\"] gives a list of vertex out-degrees.", 
"DegreeGraphDistribution" : "DegreeGraphDistribution[dlist] represents a degree graph distribution with vertex degree dlist. ", 
"DegreeLexicographic" : "DegreeLexicographic represents the degree lexicographic ordering of monomials.", 
"DegreeReverseLexicographic" : "DegreeReverseLexicographic represents the degree reverse lexicographic ordering of monomials.", 
"Deinitialization" : "Deinitialization is an option for Dynamic, DynamicModule, Manipulate, and related constructs that specifies an expression to be evaluated when the construct can no longer be displayed or used. ", 
"Del" : "Del[x] displays as ∇x.", 
"Deletable" : "Deletable is an option for Cell that specifies whether the cell can be deleted interactively using the front end. ", 
"Delete" : "Delete[expr,n] deletes the element at position n in expr. If n is negative, the position is counted from the end. \nDelete[expr,{i,j,…}] deletes the part at position {i,j,…}. \nDelete[expr,{{i₁,j₁,…},{i₂,j₂,…},…}] deletes parts at several positions. ", 
"DeleteBorderComponents" : "DeleteBorderComponents[image] replaces connected components adjacent to the border in a binary image image with background pixels.\nDeleteBorderComponents[m] replaces components adjacent to the border in a label matrix m with 0.", 
"DeleteCases" : "DeleteCases[expr,pattern] removes all elements of expr that match pattern. \nDeleteCases[expr,pattern,levelspec] removes all parts of expr on levels specified by levelspec that match pattern. \nDeleteCases[expr,pattern,levelspec,n] removes the first n parts of expr that match pattern. ", 
"DeleteContents" : "DeleteContents is an option for DeleteDirectory that specifies whether the contents of directories should automatically be deleted.", 
"DeleteDirectory" : "DeleteDirectory[\"dir\"] deletes the specified directory. ", 
"DeleteDuplicates" : "DeleteDuplicates[list] deletes all duplicates from list.\nDeleteDuplicates[list,test] applies test to pairs of elements to determine whether they should be considered duplicates. ", 
"DeleteFile" : "DeleteFile[\"file\"] deletes a file. \nDeleteFile[{\"file \"\n     1,\"file \"\n     2,…}] deletes a list of files. ", 
"DeleteSmallComponents" : "DeleteSmallComponents[image] replaces small connected components in a binary image image with background pixels.\nDeleteSmallComponents[m] replaces positive integers in a label matrix m with 0 if their tally is small.\nDeleteSmallComponents[…,n] replaces components consisting of n or less elements.", 
"DeletionWarning" : "DeletionWarning is an option for InterpretationBox or TagBox objects that specifies whether a warning is issued if the box is deleted.", 
"Delimiter" : "Delimiter represents a delimiter to be displayed in objects such as PopupMenu and Manipulate. ", 
"DelimiterFlashTime" : "DelimiterFlashTime is an option for cells and notebooks that specifies how long in seconds a delimiter should flash when its matching delimiter is entered. ", 
"DelimiterMatching" : "DelimiterMatching is an option for selections that specifies whether an opening delimiter will match only its respective closing delimiter or any closing delimiter.", 
"Delimiters" : "Delimiters is an option to Splice that specifies the delimiters to look for. The default is Delimiters -> {\"<*\", \"*>\"}.", 
"Denominator" : "Denominator[expr] gives the denominator of expr. ", 
"DensityGraphics" : "DensityGraphics[array] is a representation of a density plot. ", 
"DensityHistogram" : "DensityHistogram[{{x₁,y₁},{x₂,y₂},…}] plots a density histogram of the values {xᵢ,yᵢ}.\nDensityHistogram[{{x₁,y₁},{x₂,y₂},…},bspec] plots a density histogram with bins specified by bspec.\nDensityHistogram[{{x₁,y₁},{x₂,y₂},…},bspec,hspec] plots a density histogram with bin densities computed according to the specification hspec.", 
"DensityPlot" : "DensityPlot[f,{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] makes a density plot of f as a function of x and y. ", 
"DependentVariables" : "DependentVariables is an option which specifies the list of all objects that should be considered as dependent variables in equations that have been supplied.", 
"Deploy" : "Deploy[expr] yields a deployed version of expr in which elements such as Slider, InputField, Locator, and Button are active, but general editing and selection is disabled. ", 
"Deployed" : "Deployed is an option for displayed objects, cells, and notebooks that specifies whether their contents should be considered deployed, so that elements such as Slider, InputField, Locator, and Button are active, but general editing and selection is disabled. ", 
"Depth" : "Depth[expr] gives the maximum number of indices needed to specify any part of expr, plus 1. ", 
"DepthFirstScan" : "DepthFirstScan[g,s,{event₁->f₁,event₂->f₂,…}] performs a depth-first scan of the graph g starting at the vertex s and evaluates fᵢ whenever \"eventᵢ\" occurs.\nDepthFirstScan[g,{event₁->f₁,event₂->f₂,…}] performs a depth-first scan of the whole graph g.", 
"Derivative" : "f' represents the derivative of a function f of one argument. \nDerivative[n₁,n₂,…][f] is the general form, representing a function obtained from f by differentiating n₁ times with respect to the first argument, n₂ times with respect to the second argument, and so on. ", 
"DerivativeFilter" : "DerivativeFilter[image,{n₁,n₂}] computes the nᵢᵗʰ derivative of image in the vertical and horizontal directions.\nDerivativeFilter[image,{n₁,n₂},σ] computes the derivative at a Gaussian scale of standard deviation σ.\nDerivativeFilter[array,{n₁,n₂,…}] computes the derivative of array.", 
"DesignMatrix" : "DesignMatrix[{{x₁₁,x₁₂,…,y₁},{x₂₁,x₂₂,…,y₂},…},{f₁,f₂,…},{x₁,x₂,…}] constructs the design matrix for the linear model β₀+β₁ f₁+β₂ f₂+….", 
"Det" : "Det[m] gives the determinant of the square matrix m. ", 
"Developer`BesselSimplify" : "BesselSimplify[expr] transforms Bessel functions in expr, trying to either decrease the number of Bessel functions, or convert Bessel functions into more elementary functions. ", 
"Developer`BoundingBox" : "BoundingBox[expr] gives the absolute size in printer’s points of the bounding box for the displayed version of expr. \nBoundingBox[expr,\"env\"] gives the bounding box for the version obtained in the specified style environment. ", 
"Developer`CellInformation" : "CellInformation[obj] gives information about selected cells in the notebook represented by the notebook object obj. ", 
"Developer`FibonacciSimplify" : "FibonacciSimplify[expr,assum] tries to simplify combinations of symbolic Fibonacci numbers in expr using assumptions assum. ", 
"Developer`FindDivisions" : "FindDivisions[{xₘᵢₙ,xₘₐₓ},n] finds a list of about n “nice” numbers that divide the interval around xₘᵢₙ to xₘₐₓ into equally spaced parts. \nFindDivisions[{xₘᵢₙ,xₘₐₓ,dx},n] makes the parts always have lengths that are integer multiples of dx. \nFindDivisions[{xₘᵢₙ,xₘₐₓ},{n₁,n₂,…}] finds successive subdivisions into about n₁, n₂, … parts. \nFindDivisions[{xₘᵢₙ,xₘₐₓ,{dx₁,dx₂,…}},{n₁,n₂,…}] uses spacings that are forced to be multiples of dx₁, dx₂, … . \nFindDivisions[{xₘᵢₙ,xₘₐₓ,{dx₁,dx₂,…}}] gives all numbers in the interval with spacings dxᵢ. ", 
"Developer`FromPackedArray" : "FromPackedArray[expr] unpacks expr so that its internal representation is not a packed array. ", 
"Developer`GammaSimplify" : "GammaSimplify[expr] transforms gamma functions in expr, trying to either decrease the number of gamma functions, or convert combinations of them into more elementary functions. ", 
"Developer`MachineIntegerQ" : "MachineIntegerQ[expr] returns True if expr corresponds to a machine‐sized integer, and False otherwise. ", 
"Developer`NotebookConvert" : "NotebookConvert[\"name\"] converts a Mathematica notebook from a previous version of Mathematica to one for the current version.", 
"Developer`PackedArrayForm" : "PackedArrayForm[expr] prints with packed arrays in expr shown in summary form, without all of their elements explicitly given. ", 
"Developer`PackedArrayQ" : "PackedArrayQ[expr] returns True if expr is a packed array in its internal representation, and returns False otherwise. \nPackedArrayQ[expr,type] returns True if expr is a packed array of objects of the specified type. \nPackedArrayQ[expr,type,rank] returns True if expr is a packed array of the specified rank. ", 
"Developer`PartitionMap" : "PartitionMap[f,list,n] applies f to list after partitioning into non‐overlapping sublists of length n. \nPartitionMap[f,list,n,d] applies f to sublists obtained by partitioning with offset d. \nPartitionMap[f,list,{n₁,n₂,…}] applies f after partitioning a nested list into blocks of size n₁⨯n₂⨯… . \nPartitionMap[f,list,{n₁,n₂,…},{d₁,d₂,…}] applies f after partitioning using offset dᵢ at level i. \nPartitionMap[f,list,n,d,{Subscript[k,L],Subscript[k,R]}] specifies where sublists should begin and end. \nPartitionMap[f,list,n,d,{Subscript[k,L],Subscript[k,R]},padding] specifies what padding should be used. ", 
"Developer`PolyGammaSimplify" : "PolyGammaSimplify[expr] transforms polygamma functions in expr, trying to either decrease the number of polygamma functions, or convert combinations of them into more elementary functions. ", 
"Developer`PolyLogSimplify" : "PolyLogSimplify[expr] transforms polylogarithm functions in expr, trying to either decrease the number of polylogarithm functions, or convert combinations of them into more elementary functions. ", 
"Developer`ReplaceAllUnheld" : "ReplaceAllUnheld[expr,rules] applies a rule or list of rules in an attempt to transform each subpart of expr that would be automatically evaluated. ", 
"Developer`ToPackedArray" : "ToPackedArray[expr] uses packed arrays if possible in the internal representation of expr. ", 
"Developer`TrigToRadicals" : "TrigToRadicals[expr] converts trigonometric functions to radicals whenever possible in expr. ", 
"Developer`ZeroQ" : "ZeroQ[expr] returns True if built‐in transformations allow it to be determined that expr is numerically equal to zero, and returns False otherwise. ", 
"Developer`ZetaSimplify" : "ZetaSimplify[expr] transforms zeta functions in expr, trying to either decrease the number of zeta functions, or convert combinations of them into more elementary functions. ", 
"Developer`$MaxMachineInteger" : "$MaxMachineInteger gives the maximum integer that is represented internally as a single atomic data element on your computer system. ", 
"DGaussianWavelet" : "DGaussianWavelet[] represents a derivative of Gaussian wavelet of derivative order 2.\nDGaussianWavelet[n] represents a derivative of Gaussian wavelet of derivative order n.", 
"DiacriticalPositioning" : "DiacriticalPositioning is an option for UnderscriptBox and related boxes that specifies how close diacritical characters are drawn to the base character.", 
"Diagonal" : "Diagonal[m] gives the list of elements on the leading diagonal of the matrix m.\nDiagonal[m,k] gives the elements on the kᵗʰ diagonal of m.", 
"DiagonalMatrix" : "DiagonalMatrix[list] gives a matrix with the elements of list on the leading diagonal, and 0 elsewhere. \nDiagonalMatrix[list,k] gives a matrix with the elements of list on the kᵗʰ diagonal.\nDiagonalMatrix[list,k,n] pads with 0s to create an n×n matrix.", 
"Dialog" : "Dialog[] initiates a dialog. \nDialog[expr] initiates a dialog with expr as the current value of %. ", 
"DialogInput" : "DialogInput[expr] interactively puts up expr as a dialog notebook, waits until a DialogReturn[e] is evaluated from within it, and then returns the result e. \nDialogInput[{x=x₀,y=y₀,…},expr] sets up local variables x, y, … in expr.", 
"DialogNotebook" : "DialogNotebook[{cell₁,cell₂,…}] represents a dialog notebook that can be manipulated by the Mathematica front end. ", 
"DialogProlog" : "DialogProlog is an option for Dialog that can give an expression to evaluate before the dialog starts. ", 
"DialogReturn" : "DialogReturn[expr] closes a dialog window, returning the expression expr from the dialog.\nDialogReturn[] closes a dialog window, returning Null.", 
"DialogSymbols" : "DialogSymbols is an option for Dialog which gives a list of symbols whose values should be localized in the dialog. ", 
"Diamond" : "Diamond[x,y,…] displays as x⋄y⋄….", 
"DiamondMatrix" : "DiamondMatrix[r] gives a matrix whose elements are 1 in a diamond-shaped region that extends r index positions to each side, and are 0 otherwise.\nDiamondMatrix[r,w] gives a w×w matrix containing a diamond-shaped region of 1s.\nDiamondMatrix[{r₁,r₂,…},…] yields an array whose elements are 1 in a diamond-shaped region that extends rᵢ index positions in the iᵗʰ direction.", 
"DiceDissimilarity" : "DiceDissimilarity[x,y] gives the Dice dissimilarity between Boolean vectors x and y.", 
"DictionaryLookup" : "DictionaryLookup[patt] finds all words in an English dictionary that match the string pattern patt.\nDictionaryLookup[patt,n] gives only the first n words found.\nDictionaryLookup[{\"lang\",patt}] finds words in the language specified by lang.", 
"DifferenceDelta" : "DifferenceDelta[f,i] gives the discrete difference ∆ᵢf=f(i+1)-f(i).\nDifferenceDelta[f,{i,n}] gives the multiple difference Subsuperscript[ ∆, i, n](f).\nDifferenceDelta[f,{i,n,h}] gives the multiple difference with step h.\nDifferenceDelta[f,i,j,…] computes the partial difference with respect to i,j,….", 
"DifferenceRoot" : "DifferenceRoot[lde] represents a function that solves the linear difference equation specified by lde[a,n].", 
"DifferenceRootReduce" : "DifferenceRootReduce[expr,n] attempts to reduce expr to a single DifferenceRoot object as a function of n.", 
"Differences" : "Differences[list] gives the successive differences of elements in list. \nDifferences[list,n] gives the nᵗʰ differences of list. \nDifferences[list,{n₁,n₂,…}] gives the successive nₖᵗʰ differences at level k in a nested list. ", 
"DifferentialD" : "DifferentialD[x] displays as ⅆx.", 
"DifferentialRoot" : "DifferentialRoot[lde] represents a function that solves the linear differential equation specified by lde[y,x].", 
"DifferentialRootReduce" : "DifferentialRootReduce[expr,x] attempts to reduce expr to a single DifferentialRoot object as a function of x.\nDifferentialRootReduce[expr,{x,x₀}] takes the initial conditions to be specified at x=x₀.", 
"DigitBlock" : "DigitBlock is an option for NumberForm and related functions that specifies the maximum length of blocks of digits between breaks. ", 
"DigitCharacter" : "DigitCharacter represents a digit character 0–9 in StringExpression. ", 
"DigitCount" : "DigitCount[n,b,d] gives the number of d digits in the base-b representation of n. \nDigitCount[n,b] gives a list of the numbers of 1, 2, …, b-1, 0 digits in the base-b representation of n. \nDigitCount[n] gives a list of the numbers of 1, 2, …, 9, 0 digits in the base-10 representation of n. ", 
"DigitQ" : "DigitQ[string] yields True if all the characters in the string are digits in the range 0 through 9, and yields False otherwise. ", 
"DihedralGroup" : "DihedralGroup[n] represents the dihedral group of order 2n.", 
"Dilation" : "Dilation[image,ker] gives the morphological dilation of image with respect to the structuring element ker.\nDilation[image,r] gives the dilation with respect to a range r square.", 
"Dimensions" : "Dimensions[expr] gives a list of the dimensions of expr. \nDimensions[expr,n] gives a list of the dimensions of expr down to level n. ", 
"DiracComb" : "DiracComb[x] represents the Dirac comb function giving a delta function at every integer point. \nDiracComb[x₁,x₂,…] represents the multidimensional Dirac comb function.", 
"DiracDelta" : "DiracDelta[x] represents the Dirac delta function δ(x). \nDiracDelta[x₁,x₂,…] represents the multidimensional Dirac delta function δ(x₁,x₂,…). ", 
"DirectedEdge" : "DirectedEdge[u,v] or uv represents a directed edge from u to v.", 
"DirectedEdges" : "DirectedEdges is an option for Graph, GraphPlot, and related functions that specifies whether edges should be taken to be directed.", 
"DirectedGraph" : "DirectedGraph[g] gives a directed graph from the undirected graph g.\nDirectedGraph[g,conv] gives a directed graph using the conversion conv.", 
"DirectedGraphQ" : "DirectedGraphQ[g] yields True if the graph g is a directed graph and False otherwise.", 
"DirectedInfinity" : "DirectedInfinity[] represents an infinite numerical quantity whose direction in the complex plane is unknown. \nDirectedInfinity[z] represents an infinite numerical quantity that is a positive real multiple of the complex number z. ", 
"Direction" : "Direction is an option for Limit that specifies the direction in which the limit is taken.", 
"Directive" : "Directive[g₁,g₂,…] represents a single graphics directive composed of the directives g₁, g₂, ….", 
"Directory" : "Directory[] gives the current working directory. ", 
"DirectoryName" : "DirectoryName[\"name\"] extracts the directory name from the specification for a file. ", 
"DirectoryQ" : "DirectoryQ[\"name\"] gives True if the directory with the specified name exists, and gives False otherwise.", 
"DirectoryStack" : "DirectoryStack[] gives the directory stack that represents the sequence of current directories used. ", 
"DirichletCharacter" : "DirichletCharacter[k,j,n] gives the Dirichlet character Subscript[χ,{k,j}](n) with modulus k and index j.", 
"DirichletConvolve" : "DirichletConvolve[f,g,n,m] gives the Dirichlet convolution of the expressions f and g. ", 
"DirichletDistribution" : "DirichletDistribution[{α₁,…,Subscript[α,k+1]}] represents a Dirichlet distribution of dimension k with shape parameters αᵢ.", 
"DirichletL" : "DirichletL[k,j,s] gives the Dirichlet L-function L(χ,s) for the Dirichlet character χ(n) with modulus k and index j.", 
"DirichletTransform" : "DirichletTransform[expr,n,s] gives the Dirichlet transform of expr with respect to n.", 
"DiscreteConvolve" : "DiscreteConvolve[f,g,n,m] gives the convolution with respect to n of the expressions f and g. \nDiscreteConvolve[f,g,{n₁,n₂,…},{m₁,m₂,…}] gives the multidimensional convolution.", 
"DiscreteDelta" : "DiscreteDelta[n₁,n₂,…] gives the discrete delta function δ(n₁,n₂,…), equal to 1 if all the nᵢ are zero, and 0 otherwise. ", 
"DiscreteIndicator" : "DiscreteIndicator[x,x₁,{u₁,u₂,…}] yields the discrete indicator function, equal to 1 if x=x₁ and 0 if x=uᵢ for any i.", 
"DiscreteLQEstimatorGains" : "DiscreteLQEstimatorGains[ss,{w,v},τ] gives the optimal discrete-time estimator gain matrix with sampling period τ for the continuous-time StateSpaceModel object ss with process and measurement noise covariance matrices w and v.\nDiscreteLQEstimatorGains[{ss,sensors},{w,v},τ] specifies sensors as the noisy measurements of ss.\nDiscreteLQEstimatorGains[{ss,sensors,dinputs},{w,v},τ] specifies dinputs as the deterministic inputs of ss.", 
"DiscreteLQRegulatorGains" : "DiscreteLQRegulatorGains[ss,{q,r},τ] gives the optimal discrete-time state feedback gain matrix with sampling period τ for the continuous-time StateSpaceModel object ss and the quadratic cost function with state and control weighting matrices q and r.\nDiscreteLQRegulatorGains[ss,{q,r,p},τ] includes the state-control cross-coupling matrix p in the cost function.\nDiscreteLQRegulatorGains[{ss,finputs},{…},τ] specifies the feedback inputs of ss.", 
"DiscreteLyapunovSolve" : "DiscreteLyapunovSolve[a,c] finds the numeric solution x of the discrete matrix equation a.x.a-x=c.\nDiscreteLyapunovSolve[a,b,c] solves a.x.b-x=c.\nDiscreteLyapunovSolve[{a,d},c] solves a.x.a-d.x.d=c.\nDiscreteLyapunovSolve[{a,d},{b,e},c] solves a.x.b-d.x.e=c.", 
"DiscretePlot" : "DiscretePlot[expr,{n,nₘₐₓ}] generates a plot of the values of expr when n runs from 1 to nₘₐₓ.\nDiscretePlot[expr,{n,nₘᵢₙ,nₘₐₓ}] generates a plot of the values of expr when n runs from nₘᵢₙ to nₘₐₓ.\nDiscretePlot[expr,{n,nₘᵢₙ,nₘₐₓ,dn}] uses steps dn. \nDiscretePlot[expr,{n,{n₁,n₂,…}}] uses the successive values n₁, n₂, ….\nDiscretePlot[{expr₁,expr₂,…},…] plots the values of all the exprᵢ.", 
"DiscretePlot3D" : "DiscretePlot3D[expr,{i,iₘᵢₙ,iₘₐₓ},{j,jₘᵢₙ,jₘₐₓ}] generates a plot of the values of expr when i runs from iₘᵢₙ to iₘₐₓ and j runs from jₘᵢₙ to jₘₐₓ.\nDiscretePlot3D[expr,{i,iₘᵢₙ,iₘₐₓ,di},{j,jₘᵢₙ,jₘₐₓ,dj}] uses steps di and dj.\nDiscretePlot3D[expr,{i,{i₁,i₂,…}},{j,{j₁,j₂,…}}] uses successive i values i₁, i₂, … and j values j₁,  j₂, …. \nDiscretePlot3D[{expr₁,expr₂,…},…,…] plots the values of all the exprᵢ.", 
"DiscreteRatio" : "DiscreteRatio[f,i] gives the discrete ratio (f(i+1))\/(f(i)).\nDiscreteRatio[f,{i,n}] gives the multiple discrete ratio.\nDiscreteRatio[f,{i,n,h}] gives the multiple discrete ratio with step h. \nDiscreteRatio[f,i,j,…] computes the partial difference ratio with respect to i, j, ….", 
"DiscreteRiccatiSolve" : "DiscreteRiccatiSolve[{a,b},{q,r}] gives the matrix x that is the stabilizing solution of the discrete algebraic Riccati equation Superscript[a, ].x.a-x-Superscript[a, ].x.b.(r+TemplateBox[{b}, ConjugateTranspose].x.b)⁻¹.Superscript[b, ].x.a+q=0.\nDiscreteRiccatiSolve[{a,b},{q,r,p}] solves Superscript[a, ].x.a-x-(Superscript[a, ].x.b+p).(r+TemplateBox[{b}, ConjugateTranspose].x.b)⁻¹.(Superscript[b, ].x.a+Superscript[p, ])+q=0. ", 
"DiscreteShift" : "DiscreteShift[f,i] gives the discrete shift ᵢ(f(i))=f(i+1). \nDiscreteShift[f,{i,n}] gives the multiple shift Subsuperscript[ , i, n] f.\nDiscreteShift[f,{i,n,h}] gives the multiple shift of step h.\nDiscreteShift[f,i,j,…] computes partial shifts with respect to i, j, ….", 
"DiscreteTimeModelQ" : "DiscreteTimeModelQ[expr] gives True if expr is a discrete-time StateSpaceModel or TransferFunctionModel object and False otherwise.", 
"DiscreteUniformDistribution" : "DiscreteUniformDistribution[{iₘᵢₙ,iₘₐₓ}] represents a discrete uniform distribution over the integers from iₘᵢₙ to iₘₐₓ.\nDiscreteUniformDistribution[{{iₘᵢₙ,iₘₐₓ},{jₘᵢₙ,jₘₐₓ},…}] represents a multivariate discrete uniform distribution over integers within the box {{iₘᵢₙ,iₘₐₓ},{jₘᵢₙ,jₘₐₓ},…}.", 
"DiscreteWaveletData" : "DiscreteWaveletData[{wind₁->coef₁,…},wave,wtrans] yields a discrete wavelet data object with wavelet coefficients coefᵢ corresponding to wavelet index windᵢ, wavelet wave, and wavelet transform wtrans.\nDiscreteWaveletData[{wind₁->coef₁,…},wave,wtrans,{d₁,…}] yields a discrete wavelet data object assuming data dimensions {d₁,…}.", 
"DiscreteWaveletPacketTransform" : "DiscreteWaveletPacketTransform[data] gives the discrete wavelet packet transform (DWPT) of an array of data.\nDiscreteWaveletPacketTransform[data,wave] gives the discrete wavelet packet transform using the wavelet wave.\nDiscreteWaveletPacketTransform[data,wave,r] gives the discrete wavelet packet transform using r levels of refinement.\nDiscreteWaveletPacketTransform[image,…] gives the discrete wavelet packet transform of an image.\nDiscreteWaveletPacketTransform[sound,…] gives the discrete wavelet packet transform of sampled sound.", 
"DiscreteWaveletTransform" : "DiscreteWaveletTransform[data] gives the discrete wavelet transform (DWT) of an array of data.\nDiscreteWaveletTransform[data,wave] gives the discrete wavelet transform using the wavelet wave.\nDiscreteWaveletTransform[data,wave,r] gives the discrete wavelet transform using r levels of refinement.\nDiscreteWaveletTransform[image,…] gives the discrete wavelet transform of an image.\nDiscreteWaveletTransform[sound,…] gives the discrete wavelet transform of sampled sound.", 
"Discriminant" : "Discriminant[poly,var] computes the discriminant of the polynomial poly with respect to the variable var.\nDiscriminant[poly,var,Modulus->p] computes the discriminant modulo p.", 
"Disjunction" : "Disjunction[expr,{a₁,a₂,…}] gives the disjunction of expr over all choices of the Boolean variables aᵢ.", 
"Disk" : "Disk[{x,y},r] is a two-dimensional graphics primitive that represents a filled disk of radius r centered at the point x, y. \nDisk[{x,y}] gives a disk of radius 1. \nDisk[{x,y},r,{θ₁,θ₂}] gives a segment of a disk. \nDisk[{x,y},{rₓ,Subscript[r,y]}] gives an elliptical disk with semiaxes of lengths rₓ and Subscript[r,y], oriented parallel to the coordinate axes. ", 
"DiskMatrix" : "DiskMatrix[r] gives a matrix whose elements are 1 in a disk-shaped region of radius r, and are otherwise 0.\nDiskMatrix[r,w] gives a w×w matrix containing a disk of 1s with radius r.\nDiskMatrix[{r₁,r₂,…},…] yields an array whose elements are 1 in an ellipsoidal region with semiaxis rᵢ in the iᵗʰ index direction.", 
"Dispatch" : "Dispatch[{lhs₁->rhs₁,lhs₂->rhs₂,…}] generates an optimized dispatch table representation of a list of rules. The object produced by Dispatch can be used to give the rules in expr\/.rules. ", 
"DispersionEstimatorFunction" : "DispersionEstimatorFunction is an option for generalized linear model fitting functions that specifies the estimator for the dispersion parameter.", 
"Display" : "Display[channel,graphics] writes graphics or sound to the specified output channel in PostScript format. \nDisplay[channel,graphics,\"format\"] writes graphics or sound in the specified format. \nDisplay[channel,expr,\"format\"] writes boxes, cells, or notebook expressions in the specified format. ", 
"DisplayAllSteps" : "DisplayAllSteps is an option to Animate and related functions that specifies whether all frames should be displayed in an animation, even if to do so would slow the animation down.", 
"DisplayEndPacket" : "DisplayEndPacket[] is a MathLink packet that indicates the end of a series of expressions relating to a postscript graphic.", 
"DisplayForm" : "DisplayForm[expr] prints with low-level boxes inside expr shown in explicit two-dimensional or other form. ", 
"DisplayFunction" : "DisplayFunction is an option for graphics and sound functions that specifies a function to apply to graphics and sound objects before returning them.", 
"DisplayPacket" : "DisplayPacket[] is a MathLink packet that indicates the beginning of a series of expressions related to a PostScript graphic.", 
"DisplayString" : "DisplayString[graphics] generates a string giving graphics or sound in PostScript format. \nDisplayString[graphics,\"format\"] generates a string giving graphics or sound in the specified format. \nDisplayString[expr,\"format\"] generates a string giving boxes, cells, or notebook expressions in the specified format. ", 
"DistanceFunction" : "DistanceFunction is an option for functions such as Nearest that specifies the distance value to assume between any two specified points.", 
"DistanceTransform" : "DistanceTransform[image] gives the distance transform of image, in which the value of each pixel is replaced by its distance to the nearest background pixel.\nDistanceTransform[image,t] treats values above t as foreground.", 
"Distribute" : "Distribute[f[x₁,x₂,…]] distributes f over Plus appearing in any of the xᵢ. \nDistribute[expr,g] distributes over g. \nDistribute[expr,g,f] performs the distribution only if the head of expr is f. ", 
"Distributed" : "Distributed[x,dist] or x≈dist asserts that the random variable x is distributed according to the probability distribution dist.\nDistributed[{x₁,x₂,…},dist] or {x₁,x₂,…}≈dist asserts that the random vector {x₁,x₂,…} is distributed according to the multivariate probability distribution dist.", 
"DistributedContexts" : "DistributedContexts is an option for various parallel computing functions that specifies which definitions for symbols appearing in an expression should be distributed to all parallel kernels.", 
"DistributeDefinitions" : "DistributeDefinitions[s₁,s₂,…] distributes all definitions for the symbols sᵢ to all parallel kernels.\nDistributeDefinitions[\"context`\"] distributes definitions for all symbols in the specified context.", 
"DistributionChart" : "DistributionChart[{data₁,data₂,…}] makes a distribution chart with a distribution symbol for each dataᵢ.\nDistributionChart[{…,wᵢ[dataᵢ,…],…,Subscript[w,j][Subscript[data,j],…],…}] makes a distribution chart with symbol features defined by the symbolic wrappers wₖ.\nDistributionChart[{{data₁,data₂,…},…}] makes a distribution chart from multiple groups of datasets {data₁,data₂,…}.", 
"DistributionFitTest" : "DistributionFitTest[data] tests whether data is normally distributed. \nDistributionFitTest[data,dist] tests whether data is distributed according to dist. \nDistributionFitTest[data,dist,\"property\"] returns the value of \"property\".", 
"DistributionParameterAssumptions" : "DistributionParameterAssumptions[dist] gives a logical expression for assumptions on parameters in the symbolic distribution dist.", 
"DistributionParameterQ" : "DistributionParameterQ[dist] yields True if dist is a valid distribution, and yields False otherwise.", 
"Dithering" : "Dithering is an option for ColorQuantize that specifies whether or not to apply dithering while quantizing the pixel values.", 
"Div" : " Div [ f ] gives the divergence,  ∇· f , of the vector field  f  in the default coordinate system. \n Div [ f , coordsys ] gives the divergence of  f  in the coordinate system  coordsys .", 
"Divide" : "x\/y or Divide[x,y] is equivalent to x y^-1. ", 
"DivideBy" : "x\/=c divides x by c and returns the new value of x. ", 
"Dividers" : "Dividers is an option for Grid and related constructs that specifies where and how to draw divider lines.", 
"Divisible" : "Divisible[n,m] yields True if n is divisible by m, and yields False if it is not. ", 
"Divisors" : "Divisors[n] gives a list of the integers that divide n. ", 
"DivisorSigma" : "DivisorSigma[k,n] gives the divisor function σₖ(n). ", 
"DivisorSum" : "DivisorSum[n,form] represents the sum of form[i] for all i that divide n.\nDivisorSum[n,form,cond] includes only those divisors for which cond[i] gives True.", 
"DMSList" : "DMSList[θ] converts an angle θ given in decimal degrees to a DMS list {degree,minute,second}.\nDMSList[\"dms\"] converts a DMS string to a DMS list {degree,minute,second}.\nDMSList[\"latlong\"] converts a latitude-longitude string to a pair of DMS lists.", 
"DMSString" : "DMSString[θ] converts an angle θ given in decimal degrees to a degrees-minutes-seconds string.\nDMSString[{ϕ,λ}] converts latitude and longitude given in decimal degrees to a DMS latitude-longitude string.\nDMSString[{d,m,s}] converts a DMS list to a DMS string.", 
"Do" : "Do[expr,{iₘₐₓ}] evaluates expr iₘₐₓ times. \nDo[expr,{i,iₘₐₓ}] evaluates expr with the variable i successively taking on the values 1 through iₘₐₓ (in steps of 1). \nDo[expr,{i,iₘᵢₙ,iₘₐₓ}] starts with i=iₘᵢₙ. \nDo[expr,{i,iₘᵢₙ,iₘₐₓ,di}] uses steps di. \nDo[expr,{i,{i₁,i₂,…}}] uses the successive values i₁, i₂, ….\nDo[expr,{i,iₘᵢₙ,iₘₐₓ},{j,jₘᵢₙ,jₘₐₓ},…] evaluates expr looping over different values of j, etc. for each i. ", 
"DockedCells" : "DockedCells is an option for notebooks that gives a list of cells that are to be displayed \"docked\" at the top of the notebook.", 
"DocumentNotebook" : "DocumentNotebook[{cell₁,cell₂,…}] represents a complete document notebook in the Mathematica front end. ", 
"DOSTextFormat" : "DOSTextFormat is an option for OpenRead, OpenWrite, and OpenAppend that specifies whether files should be opened in text mode. With DOSTextFormat -> True, Mathematica uses the normal text format for the type of computer on which Mathematica is running. Text mode typically entails translation of a text file's line-ending characters into the newline character \"\\n\". With DOSTextFormat -> False, files are opened in \"binary mode\", in which no such translation is performed. On some systems, there is no difference between text mode and binary mode.", 
"Dot" : "a.b.c or Dot[a,b,c] gives products of vectors, matrices, and tensors. ", 
"DotDashed" : "DotDashed is a graphics directive specifying that lines that follow should be drawn dot-dashed.", 
"DotEqual" : "DotEqual[x,y,…] displays as x≐y≐….", 
"Dotted" : "Dotted is a graphics directive specifying that lines that follow should be drawn dotted.", 
"DoubleBracketingBar" : "DoubleBracketingBar[x,y,…] displays as ‖x,y,…‖.", 
"DoubleDownArrow" : "DoubleDownArrow[x,y,…] displays as x⇓y….", 
"DoubleLeftArrow" : "DoubleLeftArrow[x,y,…] displays as x⇐y⇐….", 
"DoubleLeftRightArrow" : "DoubleLeftRightArrow[x,y,…] displays as x⇔y⇔….", 
"DoubleLeftTee" : "DoubleLeftTee[x,y] displays as x⫤y.", 
"DoubleLongLeftArrow" : "DoubleLongLeftArrow[x,y,…] displays as x⟸y⟸….", 
"DoubleLongLeftRightArrow" : "DoubleLongLeftRightArrow[x,y,…] displays as x⟺y⟺….", 
"DoubleLongRightArrow" : "DoubleLongRightArrow[x,y,…] displays as x⟹y⟹….", 
"DoubleRightArrow" : "DoubleRightArrow[x,y,…] displays as x⇒y⇒….", 
"DoubleRightTee" : "DoubleRightTee[x,y] displays as x⊨y.", 
"DoubleUpArrow" : "DoubleUpArrow[x,y,…] displays as x⇑y⇑….", 
"DoubleUpDownArrow" : "DoubleUpDownArrow[x,y,…] displays as x⇕y⇕….", 
"DoubleVerticalBar" : "DoubleVerticalBar[x,y,…] displays as x∥y∥….", 
"DoublyInfinite" : "DoublyInfinite is an option for LerchPhi. With DoublyInfinite -> True, the summation is taken from -Infinity to Infinity. With DoublyInfinite -> False, the summation is taken from zero to Infinity.", 
"DownArrow" : "DownArrow[x,y,…] displays as x↓y↓….", 
"DownArrowBar" : "DownArrowBar[x,y,…] displays as x⤓y⤓….", 
"DownArrowUpArrow" : "DownArrowUpArrow[x,y,…] displays as x⇵y⇵….", 
"DownLeftRightVector" : "DownLeftRightVector[x,y,…] displays as x⥐y⥐….", 
"DownLeftTeeVector" : "DownLeftTeeVector[x,y,…] displays as x⥞y⥞….", 
"DownLeftVector" : "DownLeftVector[x,y,…] displays as x↽y↽….", 
"DownLeftVectorBar" : "DownLeftVectorBar[x,y,…] displays as x⥖y⥖….", 
"DownRightTeeVector" : "DownRightTeeVector[x,y,…] displays as x⥟y⥟….", 
"DownRightVector" : "DownRightVector[x,y,…] displays as x⇁y⇁….", 
"DownRightVectorBar" : "DownRightVectorBar[x,y,…] displays as x⥗y⥗….", 
"DownTee" : "DownTee[x,y] displays as x⊤y.", 
"DownTeeArrow" : "DownTeeArrow[x,y,…] displays as x↧y↧….", 
"DownValues" : "DownValues[f] gives a list of transformation rules corresponding to all downvalues defined for the symbol f. ", 
"DragAndDrop" : "DragAndDrop is a global front end option that specifies whether to allow drag‐and‐drop editing. ", 
"Drop" : "Drop[list,n] gives list with its first n elements dropped. \nDrop[list,-n] gives list with its last n elements dropped. \nDrop[list,{n}] gives list with its nᵗʰ element dropped. \nDrop[list,{m,n}] gives list with elements m through n dropped. \nDrop[list,{m,n,s}] gives list with elements m through n in steps of s dropped. \nDrop[list,seq₁,seq₂,…] gives a nested list in which elements specified by seqᵢ have been dropped at level i in list. ", 
"DSolve" : "DSolve[eqn,y,x] solves a differential equation for the function y, with independent variable x. \nDSolve[{eqn₁,eqn₂,…},{y₁,y₂,…},x] solves a list of differential equations. \nDSolve[eqn,y,{x₁,x₂,…}] solves a partial differential equation. ", 
"Dt" : "Dt[f,x] gives the total derivative df\/dx. \nDt[f] gives the total differential df. \nDt[f,{x,n}] gives the multiple derivative dⁿf\/dxⁿ. \nDt[f,x₁,x₂,…] gives d\/dx₁ d\/dx₂ … f. ", 
"DualSystemsModel" : "DualSystemsModel[ss] gives the dual of the StateSpaceModel object ss. ", 
"DumpGet" : "DumpGet[ \"filename\"] reads in a file saved with DumpSave.", 
"DumpSave" : "DumpSave[\"file.mx\",symbol] writes definitions associated with a symbol to a file in internal Mathematica format. \nDumpSave[\"file.mx\",\"context`\"] writes out definitions associated with all symbols in the specified context. \nDumpSave[\"file.mx\",{object₁,object₂,…}] writes out definitions for several symbols or contexts. \nDumpSave[\"package`\",objects] chooses the name of the output file based on the computer system used. ", 
"Dynamic" : "Dynamic[expr] represents an object that displays as the dynamically updated current value of expr. If the displayed form of Dynamic[expr] is interactively changed or edited, an assignment expr=val is done to give expr the new value val that corresponds to the displayed form. \nDynamic[expr,None] does not allow interactive changing or editing. \nDynamic[expr,f] continually evaluates f[val,expr] during interactive changing or editing of val. \nDynamic[expr,{f,Subscript[f,end]}] also evaluates Subscript[f,end][val,expr] when interactive changing or editing is complete. \nDynamic[expr,{fₛₜₐᵣₜ,f,Subscript[f,end]}] also evaluates fₛₜₐᵣₜ[val,expr] when interactive changing or editing begins. ", 
"DynamicEvaluationTimeout" : "DynamicEvaluationTimeout is an option for displayed objects, cells, and notebooks that specifies the timeout in seconds for any Dynamic computations they contain.", 
"DynamicModule" : "DynamicModule[{x,y,…},expr] represents an object which maintains the same local instance of the symbols x, y, … in the course of all evaluations of Dynamic objects in expr. Symbols specified in a DynamicModule will by default have their values maintained even across Mathematica sessions. \nDynamicModule[{x=x₀,y=y₀,…},expr] specifies initial values for x, y, …. ", 
"DynamicModuleValues" : "DynamicModuleValues is an option for DynamicModule that stores downvalues of local symbols.", 
"DynamicSetting" : "DynamicSetting[e] represents an object which displays as e, but is interpreted as the dynamically updated current value of Setting[e] if supplied as Mathematica input.\nDynamicSetting[f,e] displays as e, but is interpreted as f[e] if supplied as input.", 
"DynamicWrapper" : "DynamicWrapper[e,expr] represents an object that displays as e, but dynamically updates the expression expr whenever that object is visible on screen.", 
"E" : "E is the exponential constant ⅇ (base of natural logarithms), with numerical value ≃2.71828.", 
"EdgeAdd" : "EdgeAdd[g,e] makes a graph by adding the edge e to the graph g.\nEdgeAdd[g,{e₁,e₂,…}] adds a collection of edges to g.", 
"EdgeCount" : "EdgeCount[g] gives a count of the number of edges in the graph g.\nEdgeCount[g,patt] gives a count of the number of edges that match the pattern patt.", 
"EdgeCoverQ" : "EdgeCoverQ[g,elist] yields True if the edge list elist is an edge cover of the graph g and False otherwise.", 
"EdgeDelete" : "EdgeDelete[g,e] makes a graph by deleting the edge e from the graph g.\nEdgeDelete[g,{e₁,e₂,…}] deletes a collection of edges from g.\nEdgeDelete[g,patt] deletes all edges that match the pattern patt.", 
"EdgeDetect" : "EdgeDetect[image] finds edges in image and returns the result as a binary image.\nEdgeDetect[image,r] finds edges at the scale of the specified pixel range r.\nEdgeDetect[image,r,t] uses a threshold t for selecting image edges.", 
"EdgeForm" : "EdgeForm[g] is a graphics directive which specifies that edges of polygons and other filled graphics objects are to be drawn using the graphics directive or list of directives g. ", 
"EdgeIndex" : "EdgeIndex[g,e] gives the integer index for the edge e in the graph g.", 
"EdgeLabeling" : "EdgeLabeling is an option for GraphPlot and related functions that specifies whether labeling specified for edges should be displayed by default.", 
"EdgeLabels" : "EdgeLabels is an option and property for Graph and related functions that specifies what labels and label positions should be used for edges. ", 
"EdgeLabelStyle" : "EdgeLabelStyle is an option and property for Graph and related functions that specifies the style to use for edge labels.", 
"EdgeList" : "EdgeList[g] gives the list of edges for the graph g. \nEdgeList[g,patt] gives a list of edges that match the pattern patt.", 
"EdgeQ" : "EdgeQ[g,e] yields True if e is an edge in the graph g and False otherwise.", 
"EdgeRenderingFunction" : "EdgeRenderingFunction is an option for GraphPlot and related functions that gives a function to generate the graphics primitives to use in rendering each edge.", 
"EdgeRules" : "EdgeRules[g] gives the list of edge rules for the graph g.", 
"EdgeShapeFunction" : "EdgeShapeFunction is an option and property for Graph and related functions that specifies a function to use to generate primitives for rendering each edge. ", 
"EdgeStyle" : "EdgeStyle is an option and property for Graph and related functions that specifies what style to use for edges. ", 
"EdgeWeight" : "EdgeWeight is an option and property for Graph and related functions that specifies an edge weight.", 
"Editable" : "Editable is an option for displayed objects, cells, and notebooks that specifies whether their contents can be edited interactively using the front end. ", 
"EditCellTagsSettings" : "EditCellTagsSettings->{opt₁->val₁,opt₂->val₂} is a global option that specifies settings for the Edit Cell Tags dialog box.", 
"EditDistance" : "EditDistance[u,v] gives the edit or Levenshtein distance between strings or vectors u and v.", 
"EffectiveInterest" : "EffectiveInterest[r,q] gives the effective interest rate corresponding to interest specification r, compounded at time intervals q.", 
"Eigensystem" : "Eigensystem[m] gives a list {values,vectors} of the eigenvalues and eigenvectors of the square matrix m. \nEigensystem[{m,a}] gives the generalized eigenvalues and eigenvectors of m with respect to a. \nEigensystem[m,k] gives the eigenvalues and eigenvectors for the first k eigenvalues of m. \nEigensystem[{m,a},k] gives the first k generalized eigenvalues and eigenvectors.", 
"Eigenvalues" : "Eigenvalues[m] gives a list of the eigenvalues of the square matrix m. \nEigenvalues[{m,a}] gives the generalized eigenvalues of m with respect to a. \nEigenvalues[m,k] gives the first k eigenvalues of m. \nEigenvalues[{m,a},k] gives the first k generalized eigenvalues.", 
"EigenvectorCentrality" : "EigenvectorCentrality[g] gives a list of eigenvector centralities for the vertices in the graph g.\nEigenvectorCentrality[g,\"In\"] gives a list of in-centralities for a directed graph g.\nEigenvectorCentrality[g,\"Out\"] gives a list of out-centralities for a directed graph g.", 
"Eigenvectors" : "Eigenvectors[m] gives a list of the eigenvectors of the square matrix m. \nEigenvectors[{m,a}] gives the generalized eigenvectors of m with respect to a. \nEigenvectors[m,k] gives the first k eigenvectors of m. \nEigenvectors[{m,a},k] gives the first k generalized eigenvectors.", 
"Element" : "Element[x,dom] or x∈dom asserts that x is an element of the domain dom. \nElement[{x₁,x₂,…},dom] asserts that all the xᵢ are elements of dom. \nElement[patt,dom] asserts that any expression matching the pattern patt is an element of dom. ", 
"ElementData" : "ElementData[\"name\",\"property\"] gives the value of the specified property for the chemical element \"name\".\nElementData[n,\"property\"] gives the specified property for the nᵗʰ chemical element.", 
"Eliminate" : "Eliminate[eqns,vars] eliminates variables between a set of simultaneous equations. ", 
"EliminationOrder" : "EliminationOrder represents the elimination ordering of monomials.", 
"EllipticE" : "EllipticE[m] gives the complete elliptic integral E(m). \nEllipticE[ϕ,m] gives the elliptic integral of the second kind E(ϕ|m). ", 
"EllipticExp" : "EllipticExp[u,{a,b}] is the inverse for EllipticLog. It produces a list {x,y} such that u==EllipticLog[{x,y},{a,b}]. ", 
"EllipticExpPrime" : "EllipticExpPrime[u,{a,b}] gives the derivative of EllipticExp[u,{a,b}] with respect to u.", 
"EllipticF" : "EllipticF[ϕ,m] gives the elliptic integral of the first kind F(ϕ|m). ", 
"EllipticK" : "EllipticK[m] gives the complete elliptic integral of the first kind K(m). ", 
"EllipticLog" : "EllipticLog[{x,y},{a,b}] gives the generalized logarithm associated with the elliptic curve y²=x³+a x²+b x. ", 
"EllipticNomeQ" : "EllipticNomeQ[m] gives the nome q corresponding to the parameter m in an elliptic function. ", 
"EllipticPi" : "EllipticPi[n,m] gives the complete elliptic integral of the third kind Π(n|m). \nEllipticPi[n,ϕ,m] gives the incomplete elliptic integral Π(n;ϕ|m). ", 
"EllipticReducedHalfPeriods" : "EllipticReducedHalfPeriods[{u, v}] gives a reduced pair of half periods {w, w'} corresponding to the same lattice as that of {u, v}.", 
"EllipticTheta" : "EllipticTheta[a,u,q] gives the theta function ϑₐ(u,q)(a=1,…,4). ", 
"EllipticThetaPrime" : "EllipticThetaPrime[a,u,q] gives the derivative with respect to u of the theta function ϑₐ(u,q)(a=1,…,4). ", 
"EmitSound" : "EmitSound[snd] emits the sound snd when evaluated. \nEmitSound[{snd₁,snd₂,…}] emits each of the sounds sndᵢ in sequence. ", 
"EmpiricalDistribution" : "EmpiricalDistribution[{x₁,x₂,…}] represents an empirical distribution based on the data values xᵢ.\nEmpiricalDistribution[{{x₁,y₁,…},{x₂,y₂,…},…}] represents a multivariate empirical distribution based on the data values {xᵢ,yᵢ,…}.\nEmpiricalDistribution[{w₁,w₂,…}->{d₁,d₂,…}] represents an empirical distribution where data values dᵢ occur with weights wᵢ.", 
"EmptyGraphQ" : "EmptyGraphQ[g] yields True if g is an empty graph and False otherwise.", 
"Enabled" : "Enabled is an option for objects such as Slider that specifies whether the objects should be enabled for interactive manipulation. ", 
"Encode" : "Encode[\"source\",\"dest\"] writes an encoded version of the file source to the file dest. \n<<dest decodes the file before reading its contents. \nEncode[\"source\",\"dest\",\"key\"] produces an encoded file that must be read in using Get[\"dest\",\"key\"]. ", 
"End" : "End[] returns the present context, and reverts to the previous one. ", 
"EndAdd" : "EndAdd[ ] returns the present context, and reverts to the previous one, prepending the present context to $ContextPath.", 
"EndDialogPacket" : "EndDialogPacket[integer] is a MathLink packet indicating the end of the Dialog subsession referenced by integer.", 
"EndOfFile" : "EndOfFile is a symbol returned by Read when it reaches the end of a file. ", 
"EndOfLine" : "EndOfLine represents the end of a line in a string for purposes of matching in StringExpression.", 
"EndOfString" : "EndOfString represents the end of a string for purposes of matching in StringExpression.", 
"EndPackage" : "EndPackage[] restores $Context and $ContextPath to their values before the preceding BeginPackage, and prepends the current context to the list $ContextPath. ", 
"EngineeringForm" : "EngineeringForm[expr] prints with all real numbers in expr given in engineering notation. \nEngineeringForm[expr,n] prints with numbers given to n‐digit precision. ", 
"EnterExpressionPacket" : "EnterExpressionPacket[expr] is a MathLink packet that requests the evaluation of expr.", 
"EnterTextPacket" : "EnterTextPacket[string] is a MathLink packet that requests the parsing and evaluation of string as an expression.", 
"Entropy" : "Entropy[list] gives the base ⅇ information entropy of the values in list.\nEntropy[k,list] gives the base k information entropy.", 
"EntropyFilter" : "EntropyFilter[image,r] filters image by replacing every value by the information entropy of the values in its range r neighborhood. \nEntropyFilter[data,r] applies entropy filtering to an array of data.", 
"Environment" : "Environment[\"var\"] gives the value of an operating system environment variable. ", 
"Epilog" : "Epilog is an option for graphics functions that gives a list of graphics primitives to be rendered after the main part of the graphics is rendered. ", 
"Equal" : "lhs==rhs returns True if lhs and rhs are identical. ", 
"EqualColumns" : "EqualColumns is an option to GridBox which specifies whether the size of the columns are all set to the size of the largest column. The default value of EqualColumns is False.", 
"EqualRows" : "EqualRows is an option to GridBox which specifies whether the size of the rows are all set to the size of the largest row. The default value of EqualRows is False.", 
"EqualTilde" : "EqualTilde[x,y,…] displays as x≂y≂….", 
"EquatedTo" : "EquatedTo is an option for Roots, which specifies an expression to use in place of the variable in the solution.", 
"Equilibrium" : "Equilibrium[x,y,…] displays as x⇌y⇌….", 
"Equivalent" : "Equivalent[e₁,e₂,…] represents the logical equivalence e₁⇔e₂⇔…, giving True when all of the eᵢ are the same.", 
"Erf" : "Erf[z] gives the error function erf(z). \nErf[z₀,z₁] gives the generalized error function erf(z₁)-erf(z₀). ", 
"Erfc" : "Erfc[z] gives the complementary error function erfc(z). ", 
"Erfi" : "Erfi[z] gives the imaginary error function erf(iz)\/i. ", 
"ErlangDistribution" : "ErlangDistribution[k,λ] represents the Erlang distribution with shape parameter k and rate λ.", 
"Erosion" : "Erosion[image,ker] gives the morphological erosion of image with respect to the structuring element ker.\nErosion[image,r] gives the erosion with respect to a range-r square.", 
"ErrorBox" : "ErrorBox[boxes] is a low-level box construct that represents boxes that cannot be interpreted in input or output. ", 
"ErrorBoxOptions" : "ErrorBoxOptions->{opt₁->val₁,opt₂->val₂,…} applies options and corresponding values.", 
"EstimatedDistribution" : "EstimatedDistribution[data,dist] estimates the parametric distribution dist from data.\nEstimatedDistribution[data,dist,{{p,p₀},{q,q₀},…}] estimates the parameters p, q, … with starting values p₀, q₀, ….", 
"EstimatorGains" : "EstimatorGains[ss,{p₁,p₂,…,pₙ}] gives the estimator gain matrix for the StateSpaceModel object ss, such that the poles of the estimator are pᵢ.", 
"EstimatorRegulator" : "EstimatorRegulator[ss,{l,κ}] constructs the feedback regulator for the StateSpaceModel object ss with estimator and feedback gain matrices l and κ, respectively.\nEstimatorRegulator[{ss,sensors},{l,κ}] uses only sensors as the measured outputs of ss.\nEstimatorRegulator[{ss,sensors,finputs},{l,κ}] specifies finputs as the feedback inputs of ss.\nEstimatorRegulator[{ss,sensors,finputs,einputs},{l,κ}] specifies einputs as the exogenous deterministic inputs.", 
"EuclideanDistance" : "EuclideanDistance[u,v] gives the Euclidean distance between vectors u and v.", 
"EulerE" : "EulerE[n] gives the Euler number Eₙ. \nEulerE[n,x] gives the Euler polynomial Eₙ(x). ", 
"EulerGamma" : "EulerGamma is Euler’s constant γ, with numerical value ≃0.577216. ", 
"EulerianGraphQ" : "EulerianGraphQ[g] yields True if the graph g is Eulerian, and False otherwise.", 
"EulerPhi" : "EulerPhi[n] gives the Euler totient function ϕ(n). ", 
"Evaluatable" : "Evaluatable is an option for Cell that specifies whether a cell should be used as input to be evaluated by the Mathematica kernel. ", 
"Evaluate" : "Evaluate[expr] causes expr to be evaluated even if it appears as the argument of a function whose attributes specify that it should be held unevaluated. ", 
"EvaluatePacket" : "EvaluatePacket[expr] is a MathLink packet requesting evaluation of expr.", 
"EvaluationCompletionAction" : "EvaluationCompletionAction is an option for notebooks that specifies the action taken when an evaluation is completed.", 
"EvaluationElements" : "EvaluationElements is an option for NotebookEvaluate that determines which cells to evaluate.", 
"EvaluationMonitor" : "EvaluationMonitor is an option for various numerical computation and plotting functions that gives an expression to evaluate whenever functions derived from the input are evaluated numerically. ", 
"EvaluationNotebook" : "EvaluationNotebook[] gives the notebook in which this function is being evaluated. ", 
"EvaluationObject" : "EvaluationObject[n,expr,…] represents an expression submitted for evaluation on any available parallel kernel.", 
"Evaluator" : "Evaluator is an option for objects such as Button, Dynamic, and Cell that gives the name of the kernel to use to evaluate their contents. ", 
"EvaluatorNames" : "EvaluatorNames is a global option that specifies the kernels that are currently configured to perform evaluations.", 
"EvenQ" : "EvenQ[expr] gives True if expr is an even integer, and False otherwise. ", 
"EventHandler" : "EventHandler[expr,{event₁:>action₁,event₂:>action₂,…}] displays as expr, evaluating actionᵢ whenever \"eventᵢ\" occurs in connection with expr. ", 
"EventLabels" : "EventLabels is an option to CandlestickChart, KagiChart, and similar functions that specifies events to labels.", 
"ExactNumberQ" : "ExactNumberQ[expr] returns True if expr is an exact real or complex number, and returns False otherwise.", 
"ExactRootIsolation" : "ExactRootIsolation is an option for Root, which specifies whether exact isolating intervals rather then numeric approximations should be used to identify algebraic numbers.", 
"ExampleData" : "ExampleData[\"type\"] gives a list of names of examples of the specified type.\nExampleData[{\"type\",\"name\"}] gives the default form of the named example of the specified type.\nExampleData[{\"type\",\"name\"},\"elem\"] gives the specified element or property of an example.", 
"Except" : "Except[c] is a pattern object which represents any expression except one that matches c. \nExcept[c,p] represents any expression that matches p but not c. ", 
"ExcludedForms" : "ExcludedForms is an option for FullSimplify which can be set to a list of patterns for expressions that should not be touched if they are encountered at intermediate steps in the operation of FullSimplify. ", 
"ExcludePods" : "ExcludePods is an option to WolframAlpha that specifies pod IDs to exclude from the results.", 
"Exclusions" : "Exclusions is an option that specifies where to exclude in regions used by functions like Plot, Plot3D, and NIntegrate.", 
"ExclusionsStyle" : "ExclusionsStyle is an option to plotting functions that specifies how to render subregions excluded according to Exclusions. ", 
"Exists" : "Exists[x,expr] represents the statement that there exists a value of x for which expr is True. \nExists[x,cond,expr] states that there exists an x satisfying the condition cond for which expr is True. \nExists[{x₁,x₂,…},expr] states that there exist values for all the xᵢ for which expr is True. ", 
"Exit" : "Exit[] terminates a Mathematica kernel session. ", 
"Exp" : "Exp[z] gives the exponential of z. ", 
"Expand" : "Expand[expr] expands out products and positive integer powers in expr. \nExpand[expr,patt] leaves unexpanded any parts of expr that are free of the pattern patt.", 
"ExpandAll" : "ExpandAll[expr] expands out all products and integer powers in any part of expr. \nExpandAll[expr,patt] avoids expanding parts of expr that do not contain terms matching the pattern patt. ", 
"ExpandDenominator" : "ExpandDenominator[expr] expands out products and powers that appear as denominators in expr. ", 
"ExpandFileName" : "ExpandFileName[\"name\"] textually expands name to have the form of an absolute file name for your operating system.", 
"ExpandNumerator" : "ExpandNumerator[expr] expands out products and powers that appear in the numerator of expr. ", 
"Expectation" : "Expectation[expr,x≈dist] gives the expectation of expr under the assumption that x follows the probability distribution dist. \nExpectation[expr,x≈data] gives the expectation of expr under the assumption that x follows the probability distribution given by data.\nExpectation[expr,{x₁,x₂,…}≈dist] gives the expectation of expr under the assumption that {x₁,x₂,…} follows the multivariate distribution dist. \nExpectation[expr,{x₁≈dist₁,x₂≈dist₂,…}] gives the expectation of expr under the assumption that x₁, x₂, … are independent and follow the distributions dist₁, dist₂, …. \nExpectation[expr⦈pred,…] gives the conditional expectation of expr given pred.", 
"ExpectedValue" : "ExpectedValue[f,list] gives the expected value of the pure function f with respect to the values in list. \nExpectedValue[f,list,x] gives the expected value of the function f of x with respect to the values of list.\nExpectedValue[f,dist] gives the expected value of the pure function f with respect to the symbolic distribution dist.\nExpectedValue[f,dist,x] gives the expected value of the function f of x with respect to the symbolic distribution dist.", 
"ExpGammaDistribution" : "ExpGammaDistribution[κ,θ,μ] represents an exp-gamma distribution with shape parameter κ, scale parameter θ, and location parameter μ.", 
"ExpIntegralE" : "ExpIntegralE[n,z] gives the exponential integral function Eₙ(z). ", 
"ExpIntegralEi" : "ExpIntegralEi[z] gives the exponential integral function Ei(z). ", 
"Exponent" : "Exponent[expr,form] gives the maximum power with which form appears in the expanded form of expr. \nExponent[expr,form,h] applies h to the set of exponents with which form appears in expr. ", 
"ExponentFunction" : "ExponentFunction is an option for NumberForm and related functions that determines the exponent to use in printing approximate real numbers. ", 
"ExponentialDistribution" : "ExponentialDistribution[λ] represents an exponential distribution with scale inversely proportional to parameter λ.", 
"ExponentialFamily" : "ExponentialFamily is an option for GeneralizedLinearModelFit that specifies the exponential family for the model.", 
"ExponentialGeneratingFunction" : "ExponentialGeneratingFunction[expr,n,x] gives the exponential generating function in x for the sequence whose nᵗʰ term is given by the expression expr.\nExponentialGeneratingFunction[expr,{n₁,n₂,…},{x₁,x₂,…}] gives the multidimensional exponential generating function in x₁, x₂, … whose n₁, n₂, … term is given by expr.", 
"ExponentialMovingAverage" : "ExponentialMovingAverage[list,α] gives the exponential moving average of list with smoothing constant α.", 
"ExponentialPowerDistribution" : "ExponentialPowerDistribution[κ,μ,σ] represents an exponential power distribution with shape parameter κ, location parameter μ, and scale parameter σ.", 
"ExponentPosition" : "ExponentPosition is an option for RadicalBox that specifies the placement of the index outside a radical sign.", 
"ExponentStep" : "ExponentStep is an option for NumberForm and related functions that determines in what steps exponents are taken to increase when scientific notation is used.", 
"Export" : "Export[\"file.ext\",expr] exports data to a file, converting it to the format corresponding to the file extension ext. \nExport[file,expr,\"format\"] exports data in the specified format.\nExport[file,exprs,elems] exports data by treating exprs as elements specified by elems.", 
"ExportAutoReplacements" : "ExportAutoReplacements is an option for cells that specifies which replacement rules Mathematica automatically applies when exporting text.", 
"ExportString" : "ExportString[expr,\"format\"] generates a string corresponding to expr exported in the specified format. \nExportString[rules,{\"format\",\"Rules\"}] gives explicit rules for different elements of the data to be exported. \nExportString[exprs,elems] generates a string by treating exprs as elements specified by elems.", 
"Expression" : "Expression is a symbol that represents an ordinary Mathematica expression in Read and related functions. ", 
"ExpressionCell" : "ExpressionCell[expr] gives an expression cell that can appear in a Mathematica notebook. \nExpressionCell[expr,\"style\"] gives an expression cell with the specified style.", 
"ExpToTrig" : "ExpToTrig[expr] converts exponentials in expr to trigonometric functions. ", 
"ExtendedGCD" : "ExtendedGCD[n₁,n₂,…] gives the extended greatest common divisor of the integers nᵢ. ", 
"Extension" : "Extension is an option for various polynomial and algebraic functions that specifies generators for the algebraic number field to be used. ", 
"ExtentElementFunction" : "ExtentElementFunction is an option to DiscretePlot and DiscretePlot3D that gives a function to use to generate the primitives for rendering each extent element. ", 
"ExtentMarkers" : "ExtentMarkers is an option to DiscretePlot and DiscretePlot3D that specifies markers to draw at extent boundaries. ", 
"ExtentSize" : "ExtentSize is an option to DiscretePlot and DiscretePlot3D that specifies how far to extend out from each plot point. ", 
"ExternalDataCharacterEncoding" : "ExternalDataCharacterEncoding is a global option that specifies the character encoding used in reading and writing plain text data outside of Mathematica.", 
"Extract" : "Extract[expr,list] extracts the part of expr at the position specified by list. \nExtract[expr,{list₁,list₂,…}] extracts a list of parts of expr. \nExtract[expr,list,h] extracts parts of expr, wrapping each of them with head h before evaluation. ", 
"ExtractArchive" : "ExtractArchive[file] expands an archive file, saving its content into the current directory.\nExtractArchive[file,dir] saves the content of an archive file into directory dir.\nExtractArchive[file,dir,pattern] extracts only files whose names match pattern.", 
"ExtremeValueDistribution" : "ExtremeValueDistribution[α,β] represents an extreme value distribution with location parameter α and scale parameter β.", 
"FaceForm" : "FaceForm[g] is a graphics directive which specifies that faces of polygons and other filled graphics objects are to be drawn using the graphics directive or list of directives g. \nFaceForm[g,gback] specifies that the front faces of three-dimensional polygons should be drawn with directives g, and the backs with directives gback. ", 
"FaceGrids" : "FaceGrids is an option for three-dimensional graphics functions that specifies grid lines to draw on the faces of the bounding box. ", 
"FaceGridsStyle" : "FaceGridsStyle is an option for 3D graphics functions that specifies how face grids should be rendered.", 
"Factor" : "Factor[poly] factors a polynomial over the integers. \nFactor[poly,Modulus->p] factors a polynomial modulo a prime p. \nFactor[poly,Extension->{a₁,a₂,…}] factors a polynomial allowing coefficients that are rational combinations of the algebraic numbers aᵢ. ", 
"Factorial" : "n! gives the factorial of n. ", 
"Factorial2" : "n!! gives the double factorial of n. ", 
"FactorialMoment" : "FactorialMoment[list,r] gives the rᵗʰ moment of the elements in the list.\nFactorialMoment[dist,r] gives the rᵗʰ moment of the symbolic distribution dist.\nFactorialMoment[r] represents the rᵗʰ factorial moment. ", 
"FactorialMomentGeneratingFunction" : "FactorialMomentGeneratingFunction[dist,t] gives the factorial moment generating function for the symbolic distribution dist as a function of the variable t. \nFactorialMomentGeneratingFunction[dist,{t₁,t₂,…}] gives the factorial moment generating function for the multivariate symbolic distribution dist as a function of the variables t₁, t₂, …. ", 
"FactorialPower" : "FactorialPower[x,n] gives the factorial power Superscript[x, (n)]. \nFactorialPower[x,n,h] gives the step-h factorial power Superscript[x, (n, h)].", 
"FactorInteger" : "FactorInteger[n] gives a list of the prime factors of the integer n, together with their exponents. \nFactorInteger[n,k] does partial factorization, pulling out at most k distinct factors.", 
"FactorList" : "FactorList[poly] gives a list of the factors of a polynomial, together with their exponents. ", 
"FactorSquareFree" : "FactorSquareFree[poly] pulls out any multiple factors in a polynomial. ", 
"FactorSquareFreeList" : "FactorSquareFreeList[poly] gives a list of square‐free factors of a polynomial, together with their exponents. ", 
"FactorTerms" : "FactorTerms[poly] pulls out any overall numerical factor in poly. \nFactorTerms[poly,x] pulls out any overall factor in poly that does not depend on x. \nFactorTerms[poly,{x₁,x₂,…}] pulls out any overall factor in poly that does not depend on any of the xᵢ. ", 
"FactorTermsList" : "FactorTermsList[poly] gives a list in which the first element is the overall numerical factor in poly, and the second element is the polynomial with the overall factor removed.\nFactorTermsList[poly,{x₁,x₂,…}] gives a list of factors of poly. The first element in the list is the overall numerical factor. The second element is a factor that does not depend on any of the xᵢ. Subsequent elements are factors which depend on progressively more of the xᵢ. ", 
"False" : "False is the symbol for the Boolean value false. ", 
"FeedbackType" : "FeedbackType is an option for some control system functions that specifies the feedback type.", 
"Fibonacci" : "Fibonacci[n] gives the Fibonacci number Fₙ. \nFibonacci[n,x] gives the Fibonacci polynomial Fₙ(x). ", 
"FieldHint" : "FieldHint is an option for InputField that specifies contents to display when the input field is empty.", 
"FieldHintStyle" : "FieldHintStyle is an option for InputField that specifies the style to use for displaying the field hint.", 
"FieldMasked" : "FieldMasked is an option to InputField that determines whether to mask user input.", 
"FieldSize" : "FieldSize is an option for InputField, PopupMenu, and related functions that specifies the size of the field allowed for input or contents. ", 
"FileBaseName" : "FileBaseName[\"file\"] gives the base name for a file without its extension.", 
"FileByteCount" : "FileByteCount[\"file\"] gives the number of bytes in a file. ", 
"FileDate" : "FileDate[\"file\"] gives the date and time at which a file was last modified. \nFileDate[\"file\",\"type\"] gives information on the specified type of date associated with a file.", 
"FileExistsQ" : "FileExistsQ[\"name\"] gives True if the file with the specified name exists, and gives False otherwise.", 
"FileExtension" : "FileExtension[\"file\"] gives the file extension for a file name.", 
"FileFormat" : "FileFormat[\"name\"] attempts to determine what Import format could be used to import the file corresponding to \"name\". ", 
"FileHash" : "FileHash[\"file\"] gives an integer hash code for the contents of the specified file.\nFileHash[\"file\",\"type\"] gives an integer hash of the specified type.", 
"FileNameDepth" : "FileNameDepth[\"file\"] gives the number of path elements in the file name \"file\".", 
"FileNameDialogSettings" : "FileNameDialogSettings->{opt->val} is a global option that specifies settings for the Insert File Path dialog box.", 
"FileNameDrop" : "FileNameDrop[\"name\",n] drops the first n path elements in the file name \"name\".\nFileNameDrop[\"name\",-n] drops the last n path elements in the file name \"name\".\nFileNameDrop[\"name\",{m,n}] drops elements m through n in the file name \"name\".\nFileNameDrop[\"name\"] drops the last path element in the file name \"name\".", 
"FileNameJoin" : "FileNameJoin[{name₁,name₂,…}] joins the nameᵢ together into a file name suitable for your current operating system. ", 
"FileNames" : "FileNames[] lists all files in the current working directory. \nFileNames[form] lists all files in the current working directory whose names match the string pattern form. \nFileNames[{form₁,form₂,…}] lists all files whose names match any of the formᵢ. \nFileNames[forms,{dir₁,dir₂,…}] lists files with names matching forms in any of the directories dirᵢ. \nFileNames[forms,dirs,n] includes files that are in subdirectories up to n levels down. ", 
"FileNameSetter" : "FileNameSetter[name] represents a file name setter which displays as a Browse button and when clicked brings up a system file opening dialog, starting from the location corresponding to name. \nFileNameSetter[Dynamic[name]] uses the dynamically updated current value of name, with the value of name being reset if a different file is chosen.\nFileNameSetter[name,\"Save\"] brings up a file saving dialog.\nFileNameSetter[name,\"spec\",{type₁->{patt₁₁,patt₁₂,…},type₂->{…},…}] looks for files of types typeᵢ with names matching the file patterns Subscript[patt,ij]. ", 
"FileNameSplit" : "FileNameSplit[\"filename\"] splits a file name into a list of parts.", 
"FileNameTake" : "FileNameTake[\"name\"] gives the last path element in the file name \"name\".\nFileNameTake[\"name\",n] gives the first n path elements in the file name \"name\".\nFileNameTake[\"name\",-n] gives the last n path elements in the file name \"name\".\nFileNameTake[\"name\",{m,n}] gives elements m through n in the file name \"name\".", 
"FilePrint" : "FilePrint[\"file\"] prints out the raw textual contents of file.", 
"FileType" : "FileType[\"file\"] gives the type of a file, typically File, Directory, or None. ", 
"FilledCurve" : "FilledCurve[{segment₁,segment₂,…}] represents a filled curve consisting of segment₁ followed by segment₂ etc. \nFilledCurve[{component₁,component₂,…}] represents a list of separate filled component curves component₁, component₂, etc. ", 
"Filling" : "Filling is an option for ListPlot, Plot, Plot3D, and related functions that specifies what filling to add under points, curves, and surfaces. ", 
"FillingStyle" : "FillingStyle is an option for ListPlot, Plot, Plot3D, and related functions that specifies the default style of filling to be used. ", 
"FillingTransform" : "FillingTransform[image] gives a version of image with all extended minima filled.\nFillingTransform[image,marker] fills extended minima in regions where at least one corresponding element of marker is nonzero.\nFillingTransform[image,h] fills only extended minima of depth h or less.", 
"FilterRules" : "FilterRules[rules,patt] filters the list rules by picking out only those rules whose left-hand sides match patt.\nFilterRules[rules,{patt₁,patt₂,…}] picks out rules whose left-hand sides match any of the pattᵢ.", 
"FinancialBond" : "FinancialBond[params,ambientparams] gives the value of a financial bond instrument.\nFinancialBond[params,ambientparams,prop] computes the specified property prop.", 
"FinancialData" : "FinancialData[\"name\"] gives the last known price or value for the financial entity specified by \"name\".\nFinancialData[\"name\",start] gives a list of dates and daily closing values for \"name\" from start until the current date.\nFinancialData[\"name\",{start,end}] gives a list of dates and daily closing values for dates from start to end.\nFinancialData[\"name\",{start,end,period}] gives a list of dates and prices for the specified periods lying between start and end.\nFinancialData[\"name\",\"prop\"] gives the value of the specified property for the financial entity \"name\". \nFinancialData[\"name\",\"prop\",{start,end,…}] gives a list of dates and values of a property for a sequence of dates or periods. ", 
"FinancialDerivative" : "FinancialDerivative[instrument,params,ambientparams] gives the value of the specified financial instrument.\nFinancialDerivative[instrument,params,ambientparams,prop] computes the specified property prop.", 
"FinancialIndicator" : "FinancialIndicator[\"ind\",par₁,par₂,…] represents a financial indicator \"ind\" with parameters par₁, par₂, etc. ", 
"Find" : "Find[stream,\"text\"] finds the first line in an input stream that contains the specified string. \nFind[stream,{\"text \"\n     1,\"text \"\n     2,…}] finds the first line that contains any of the specified strings. ", 
"FindArgMax" : "FindArgMax[f,x] gives the position xₘₐₓ of a local maximum of f.\nFindArgMax[f,{x,x₀}] gives the position xₘₐₓ of a local maximum of f, found by a search starting from the point x=x₀. \nFindArgMax[f,{{x,x₀},{y,y₀},…}] gives the position {xₘₐₓ,yₘₐₓ,…} of a local maximum of a function of several variables. \nFindArgMax[{f,cons},{{x,x₀},{y,y₀},…}] gives the position of a local maximum subject to the constraints cons.\nFindArgMax[{f,cons},{x,y,…}] starts from a point within the region defined by the constraints.", 
"FindArgMin" : "FindArgMin[f,x] gives the position xₘᵢₙ of a local minimum of f.\nFindArgMin[f,{x,x₀}] gives the position xₘᵢₙ of a local minimum of f, found by a search starting from the point x=x₀. \nFindArgMin[f,{{x,x₀},{y,y₀},…}] gives the position {xₘᵢₙ,yₘᵢₙ,…} of a local minimum of a function of several variables. \nFindArgMin[{f,cons},{{x,x₀},{y,y₀},…}] gives the position of a local minimum subject to the constraints cons.\nFindArgMin[{f,cons},{x,y,…}] starts from a point within the region defined by the constraints.", 
"FindClique" : "FindClique[g] finds a clique with maximum number of vertices in the graph g.", 
"FindClusters" : "FindClusters[{e₁,e₂,…}] partitions the eᵢ into clusters of similar elements. \nFindClusters[{e₁->v₁,e₂->v₂,…}] returns the vᵢ corresponding to the eᵢ in each cluster. \nFindClusters[{e₁,e₂,…}->{v₁,v₂,…}] gives the same result. \nFindClusters[{e₁,e₂,…},n] partitions the eᵢ into exactly n clusters. ", 
"FindCurvePath" : "FindCurvePath[{{x₁,y₁},{x₂,y₂},…}] gives an ordering of the {xᵢ,yᵢ} that corresponds to one or more smooth curves.", 
"FindDistributionParameters" : "FindDistributionParameters[data,dist] finds the parameter estimates for the distribution dist from data.\nFindDistributionParameters[data,dist,{{p,p₀},{q,q₀},…}] finds the parameters p, q, … with starting values p₀, q₀, ….", 
"FindDivisions" : "FindDivisions[{xₘᵢₙ,xₘₐₓ},n] finds a list of about n \"nice\" numbers that divide the interval around xₘᵢₙ to xₘₐₓ into equally spaced parts. \nFindDivisions[{xₘᵢₙ,xₘₐₓ,dx},n] makes the parts always have lengths that are integer multiples of dx. \nFindDivisions[{xₘᵢₙ,xₘₐₓ},{n₁,n₂,…}] finds successive subdivisions into about n₁, n₂, … parts. \nFindDivisions[{xₘᵢₙ,xₘₐₓ,{dx₁,dx₂,…}},{n₁,n₂,…}] uses spacings that are forced to be multiples of dx₁, dx₂, …. \nFindDivisions[{xₘᵢₙ,xₘₐₓ,{dx₁,dx₂,…}}] gives all numbers in the interval that are multiples of the dxᵢ. ", 
"FindEdgeCover" : "FindEdgeCover[g] finds an edge cover of the graph g with a minimum number of edges.", 
"FindEulerianCycle" : "FindEulerianCycle[g] finds an Eulerian cycle in the graph g if one exists.\nFindEulerianCycle[g,k] finds at most k Eulerian cycles.", 
"FindFile" : "FindFile[name] finds the file with the specified name that would be loaded by Get[name] and related functions.", 
"FindFit" : "FindFit[data,expr,pars,vars] finds numerical values of the parameters pars that make expr give a best fit to data as a function of vars. The data can have the form {{x₁,y₁,…,f₁},{x₂,y₂,…,f₂},…}, where the number of coordinates x, y, … is equal to the number of variables in the list vars. The data can also be of the form {f₁,f₂,…}, with a single coordinate assumed to take values 1, 2, …. \nFindFit[data,{expr,cons},pars,vars] finds a best fit subject to the parameter constraints cons.", 
"FindGeneratingFunction" : "FindGeneratingFunction[{a₁,a₂,…},x] attempts to find a simple generating function in x whose nᵗʰ series coefficient is aₙ.\nFindGeneratingFunction[{{n₁,a₁},{n₂,a₂},…},x] attempts to find a simple generating function whose nᵢᵗʰ series coefficient is aᵢ. ", 
"FindGeoLocation" : "FindGeoLocation[] attempts to find the current geodetic location of your computer.", 
"FindGeometricTransform" : "FindGeometricTransform[pts₁,pts₂] finds a geometric transformation between two geometries pts₁ and pts₂, returning the alignment error together with the transformation function.", 
"FindGraphIsomorphism" : "FindGraphIsomorphism[g₁,g₂] finds an isomorphism that maps the graph g₁ to g₂ by renaming vertices.", 
"FindHamiltonianCycle" : "FindHamiltonianCycle[g] finds a Hamiltonian cycle in the graph g if one exists.", 
"FindIndependentEdgeSet" : "FindIndependentEdgeSet[g] finds an independent edge set of the graph g with a maximum number of edges.", 
"FindIndependentVertexSet" : "FindIndependentVertexSet[g] finds an independent vertex set of the graph g with a maximum number of vertices.", 
"FindInstance" : "FindInstance[expr,vars] finds an instance of vars that makes the statement expr be True. \nFindInstance[expr,vars,dom] finds an instance over the domain dom. Common choices of dom are Complexes, Reals, Integers, and Booleans. \nFindInstance[expr,vars,dom,n] finds n instances. ", 
"FindIntegerNullVector" : "FindIntegerNullVector[{x₁,x₂,…,xₙ}] finds a list of integers aᵢ such that a₁ x₁+a₂ x₂+⋯+aₙ xₙ=0. \nFindIntegerNullVector[{x₁,x₂,…,xₙ},d] finds a list of integers aᵢ with ‖{a₁,…,aₙ}‖≤d such that a₁ x₁+a₂ x₂+⋯+aₙ xₙ=0. ", 
"FindLibrary" : "FindLibrary[lib] finds a dynamic library that can be loaded by LibraryFunctionLoad.", 
"FindLinearRecurrence" : "FindLinearRecurrence[list] finds if possible the minimal linear recurrence that generates list.\nFindLinearRecurrence[list,d] finds if possible the linear recurrence of maximum order d that generates list.", 
"FindList" : "FindList[\"file\",\"text\"] gives a list of lines in the file that contain the specified string. \nFindList[\"file\",{\"text \"\n     1,\"text \"\n     2,…}] gives a list of all lines that contain any of the specified strings. \nFindList[{\"file \"\n     1,…},…] gives a list of lines containing the specified strings in any of the fileᵢ. \nFindList[files,text,n] includes only the first n lines found. ", 
"FindMaximum" : "FindMaximum[f,x] searches for a local maximum in f, starting from an automatically selected point.\nFindMaximum[f,{x,x₀}] searches for a local maximum in f, starting from the point x=x₀. \nFindMaximum[f,{{x,x₀},{y,y₀},…}] searches for a local maximum in a function of several variables. \nFindMaximum[{f,cons},{{x,x₀},{y,y₀},…}] searches for a local maximum subject to the constraints cons.\nFindMaximum[{f,cons},{x,y,…}] starts from a point within the region defined by the constraints.", 
"FindMaxValue" : "FindMaxValue[f,x] gives the value at a local maximum of f.\nFindMaxValue[f,{x,x₀}] gives the value at a local maximum of f, found by a search starting from the point x=x₀. \nFindMaxValue[f,{{x,x₀},{y,y₀},…}] gives the value at a local maximum of a function of several variables. \nFindMaxValue[{f,cons},{{x,x₀},{y,y₀},…}] gives the value at a local maximum subject to the constraints cons.\nFindMaxValue[{f,cons},{x,y,…}] starts from a point within the region defined by the constraints.", 
"FindMinimum" : "FindMinimum[f,x] searches for a local minimum in f, starting from an automatically selected point.\nFindMinimum[f,{x,x₀}] searches for a local minimum in f, starting from the point x=x₀. \nFindMinimum[f,{{x,x₀},{y,y₀},…}] searches for a local minimum in a function of several variables. \nFindMinimum[{f,cons},{{x,x₀},{y,y₀},…}] searches for a local minimum subject to the constraints cons.\nFindMinimum[{f,cons},{x,y,…}] starts from a point within the region defined by the constraints.", 
"FindMinValue" : "FindMinValue[f,x] gives the value at a local minimum of f.\nFindMinValue[f,{x,x₀}] gives the value at a local minimum of f, found by a search starting from the point x=x₀. \nFindMinValue[f,{{x,x₀},{y,y₀},…}] gives the value at a local minimum of a function of several variables. \nFindMinValue[{f,cons},{{x,x₀},{y,y₀},…}] gives the value at a local minimum subject to the constraints cons.\nFindMinValue[{f,cons},{x,y,…}] starts from a point within the region defined by the constraints.", 
"FindPermutation" : "FindPermutation[expr] gives a permutation that produces expr by permuting Sort[expr].\nFindPermutation[expr₁,expr₂] gives a permutation that converts expr₁ to expr₂ for two expressions that differ only in the order of their arguments.", 
"FindRoot" : "FindRoot[f,{x,x₀}] searches for a numerical root of f, starting from the point x=x₀.\nFindRoot[lhs==rhs,{x,x₀}] searches for a numerical solution to the equation lhs==rhs. \nFindRoot[{f₁,f₂,…},{{x,x₀},{y,y₀},…}] searches for a simultaneous numerical root of all the fᵢ.\nFindRoot[{eqn₁,eqn₂,…},{{x,x₀},{y,y₀},…}] searches for a numerical solution to the simultaneous equations eqnᵢ. ", 
"FindSequenceFunction" : "FindSequenceFunction[{a₁,a₂,a₃,…}] attempts to find a simple function that yields the sequence aₙ when given successive integer arguments.\nFindSequenceFunction[{{n₁,a₁},{n₂,a₂},…}] attempts to find a simple function that yields aᵢ when given argument nᵢ.\nFindSequenceFunction[list,n] gives the function applied to n.", 
"FindSettings" : "FindSettings->{opt₁->val₁,opt₂->val₂,…} is a global option that specifies settings for the Find dialog box.", 
"FindShortestPath" : "FindShortestPath[g,s,t] finds the shortest path from source vertex s to target vertex t in the graph g.\nFindShortestPath[g,s,All] generates a ShortestPathFunction[…] which can be applied repeatedly to different t.\nFindShortestPath[g,All,t] generates a ShortestPathFunction[…] which can be applied repeatedly to different s.\nFindShortestPath[g,All,All] generates a ShortestPathFunction[…] which can be applied to different s and t.", 
"FindShortestTour" : "FindShortestTour[{e₁,e₂,…}] attempts to find an ordering of the eᵢ that minimizes the total distance on a tour that visits all the eᵢ once.", 
"FindThreshold" : "FindThreshold[image] finds a global threshold value that partitions the intensity values in image into two intervals.", 
"FindVertexCover" : "FindVertexCover[g] finds a vertex cover of the graph g with a minimum number of vertices.", 
"FinishDynamic" : "FinishDynamic[] finishes updating and displaying all currently visible Dynamic objects. ", 
"FiniteAbelianGroupCount" : "FiniteAbelianGroupCount[n] gives the number of finite Abelian groups of order n.", 
"FiniteGroupCount" : "FiniteGroupCount[n] gives the number of finite groups of order n.", 
"FiniteGroupData" : "FiniteGroupData[name,\"property\"] gives the value of the specified property for the finite group specified by name.\nFiniteGroupData[\"class\"] gives a list of finite groups in the specified class.", 
"First" : "First[expr] gives the first element in expr. ", 
"FischerGroupFi22" : "FischerGroupFi22[] represents the sporadic simple Fischer group Fi₂₂.", 
"FischerGroupFi23" : "FischerGroupFi23[] represents the sporadic simple Fischer group Fi₂₃.", 
"FischerGroupFi24Prime" : "FischerGroupFi24Prime[] represents the sporadic simple Fischer group Fi₂₄'.", 
"FisherHypergeometricDistribution" : "FisherHypergeometricDistribution[n,Subscript[n,succ],nₜₒₜ,w] represents a Fisher noncentral hypergeometric distribution.", 
"FisherRatioTest" : "FisherRatioTest[data] tests whether the variance of data is one. \nFisherRatioTest[{data₁,data₂}] tests whether the variances of data₁ and data₂ are equal.\nFisherRatioTest[dspec,Subsuperscript[ σ, 0, 2]] tests a dispersion measure against Subsuperscript[ σ, 0, 2].\nFisherRatioTest[dspec,Subsuperscript[ σ, 0, 2],\"property\"] returns the value of \"property\".", 
"FisherZDistribution" : "FisherZDistribution[n,m] represents a Fisher z distribution with n numerator and m denominator degrees of freedom.", 
"Fit" : "Fit[data,funs,vars] finds a least‐squares fit to a list of data as a linear combination of the functions funs of variables vars. ", 
"FittedModel" : "FittedModel[…] represents the symbolic fitted model obtained from functions like LinearModelFit.", 
"FixedPoint" : "FixedPoint[f,expr] starts with expr, then applies f repeatedly until the result no longer changes. ", 
"FixedPointList" : "FixedPointList[f,expr] generates a list giving the results of applying f repeatedly, starting with expr, until the results no longer change. ", 
"Flat" : "Flat is an attribute that can be assigned to a symbol f to indicate that all expressions involving nested functions f should be flattened out. This property is accounted for in pattern matching. ", 
"Flatten" : "Flatten[list] flattens out nested lists. \nFlatten[list,n] flattens to level n. \nFlatten[list,n,h] flattens subexpressions with head h. \nFlatten[list,{{s₁₁,s₁₂,…},{s₂₁,s₂₂,…},…}] flattens list by combining all levels Subscript[s,ij] to make each level i in the result. ", 
"FlattenAt" : "FlattenAt[list,n] flattens out a sublist that appears as the nᵗʰ element of list. If n is negative, the position is counted from the end. \nFlattenAt[expr,{i,j,…}] flattens out the part of expr at position {i,j,…}. \nFlattenAt[expr,{{i₁,j₁,…},{i₂,j₂,…},…}] flattens out parts of expr at several positions. ", 
"FlipView" : "FlipView[{expr₁,expr₂}] represents an object which flips between displaying expr₁ and expr₂ each time it is clicked.\nFlipView[{expr₁,expr₂,…}] cyclically flips through successive exprᵢ.\nFlipView[{expr₁,expr₂,…},i] makes exprᵢ be the object currently displayed.", 
"Floor" : "Floor[x] gives the greatest integer less than or equal to x. \nFloor[x,a] gives the greatest multiple of a less than or equal to x. ", 
"Fold" : "Fold[f,x,list] gives the last element of FoldList[f,x,list]. ", 
"FoldList" : "FoldList[f,x,{a,b,…}] gives {x,f[x,a],f[f[x,a],b],…}. ", 
"FontColor" : "FontColor is an option for Style, Cell, and related constructs that specifies the default color in which to render text. ", 
"FontFamily" : "FontFamily is an option for Style and Cell that specifies the font family in which text should be rendered. ", 
"FontPostScriptName" : "FontPostScriptName is an option to StyleBox which changes the current font. A sample specification is FontPostScriptName -> Times-Roman. The default value is Automatic.", 
"FontProperties" : "FontProperties->{opt₁->val₁,opt₂->val₂} specifies font properties.", 
"FontSize" : "FontSize is an option for Style and Cell that specifies the default size in printer’s points of the font in which to render text. ", 
"FontSlant" : "FontSlant is an option for Style, Cell, and related constructs that specifies how slanted characters in text should be. ", 
"FontSubstitutions" : "FontSubstitutions is an option for Style and Cell that gives a list of substitutions to try for font family names. ", 
"FontTracking" : "FontTracking is an option for Style and Cell that specifies how condensed or expanded you want the font in which text is rendered to be. ", 
"FontVariations" : "FontVariations is an option for Style, Cell, and related constructs that specifies what font variations should be used.", 
"FontWeight" : "FontWeight is an option for Style, Cell, and related constructs that specifies how heavy the characters in a font should be. ", 
"For" : "For[start,test,incr,body] executes start, then repeatedly evaluates body and incr until test fails to give True. ", 
"ForAll" : "ForAll[x,expr] represents the statement that expr is True for all values of x. \nForAll[x,cond,expr] states that expr is True for all x satisfying the condition cond. \nForAll[{x₁,x₂,…},expr] states that expr is True for all values of all the xᵢ. ", 
"Format" : "Format[expr] prints as the formatted form of expr. Assigning values to Format[expr] defines print forms for expressions. \nFormat[expr,form] gives a format for the specified form of output. ", 
"FormatType" : "FormatType is an option for output streams, graphics, and functions such as Text that specifies the default format type to use when outputting expressions. ", 
"FormatTypeAutoConvert" : "FormatTypeAutoConvert is an option for cells that specifies whether the contents of a cell are automatically converted into a different format when the style of that cell is changed.", 
"FormatValues" : "FormatValues[f] gives a list of transformation rules corresponding to all printing formats (values for Format[f[x,…],…], etc.) defined for the symbol f.", 
"FormBox" : "FormBox[boxes,form] is a low-level box construct which displays as boxes but specifies that rules associated with form should be used to interpret boxes on input. ", 
"FormBoxOptions" : "FormBoxOptions->{opt₁->val₁,opt₂->val₂} is an option for cells that specifies settings for FormBox objects within the cell.", 
"FortranForm" : "FortranForm[expr] prints as a Fortran language version of expr. ", 
"Forward" : "Forward is a symbol that represents the forward direction for purposes of motion and animation.", 
"ForwardBackward" : "ForwardBackward is a symbol that represents alternate forward and backward motion or animation.", 
"Fourier" : "Fourier[list] finds the discrete Fourier transform of a list of complex numbers. ", 
"FourierCoefficient" : "FourierCoefficient[expr,t,n] gives the nᵗʰ coefficient in the Fourier series expansion of expr.\nFourierCoefficient[expr,{t₁,t₂,…},{n₁,n₂,…}] gives a multidimensional Fourier coefficient.", 
"FourierCosCoefficient" : "FourierCosCoefficient[expr,t,n] gives the nᵗʰ coefficient in the Fourier cosine series expansion of expr.\nFourierCosCoefficient[expr,{t₁,t₂,…},{n₁,n₂,…}] gives a multidimensional Fourier cosine coefficient.", 
"FourierCosSeries" : "FourierCosSeries[expr,t,n] gives the nᵗʰ-order Fourier cosine series expansion of expr in t.\nFourierCosSeries[expr,{t₁,t₂,…},{n₁,n₂,…}] gives the multidimensional Fourier cosine series of expr.", 
"FourierCosTransform" : "FourierCosTransform[expr,t,ω] gives the symbolic Fourier cosine transform of expr. \nFourierCosTransform[expr,{t₁,t₂,…},{ω₁,ω₂,…}] gives the multidimensional Fourier cosine transform of expr. ", 
"FourierDCT" : "FourierDCT[list] finds the Fourier discrete cosine transform of a list of real numbers.\nFourierDCT[list,m] finds the Fourier discrete cosine transform of type m.", 
"FourierDST" : "FourierDST[list] finds the Fourier discrete sine transform of a list of real numbers.\nFourierDST[list,m] finds the Fourier discrete sine transform of type m.", 
"FourierParameters" : "FourierParameters is an option to Fourier and related functions that specifies the conventions to use in computing Fourier transforms.", 
"FourierSequenceTransform" : "FourierSequenceTransform[expr,n,ω] gives the Fourier sequence transform of expr.\nFourierSequenceTransform[expr,{n₁,n₂,…},{ω₁,ω₂,…}] gives the multidimensional Fourier sequence transform. ", 
"FourierSeries" : "FourierSeries[expr,t,n] gives the nᵗʰ-order Fourier series expansion of expr in t. \nFourierSeries[expr,{t₁,t₂,…},{n₁,n₂,…}] gives the multidimensional Fourier series.", 
"FourierSinCoefficient" : "FourierSinCoefficient[expr,t,n] gives the nᵗʰ coefficient in the Fourier sine series expansion of expr.\nFourierSinCoefficient[expr,{t₁,t₂,…},{n₁,n₂,…}] gives a multidimensional Fourier sine coefficient.", 
"FourierSinSeries" : "FourierSinSeries[expr,t,n] gives the nᵗʰ-order Fourier sine series expansion of expr in t.\nFourierSinSeries[expr,{t₁,t₂,…},{n₁,n₂,…}] gives the multidimensional Fourier sine series of expr.", 
"FourierSinTransform" : "FourierSinTransform[expr,t,ω] gives the symbolic Fourier sine transform of expr. \nFourierSinTransform[expr,{t₁,t₂,…},{ω₁,ω₂,…}] gives the multidimensional Fourier sine transform of expr. ", 
"FourierTransform" : "FourierTransform[expr,t,ω] gives the symbolic Fourier transform of expr. \nFourierTransform[expr,{t₁,t₂,…},{ω₁,ω₂,…}] gives the multidimensional Fourier transform of expr. ", 
"FourierTrigSeries" : "FourierTrigSeries[expr,t,n] gives the nᵗʰ-order Fourier trigonometric series expansion of expr in t.\nFourierTrigSeries[expr,{t₁,t₂,…},{n₁,n₂,…}] gives the multidimensional Fourier trigonometric series of expr.", 
"FractionalPart" : "FractionalPart[x] gives the fractional part of x. ", 
"FractionBox" : "FractionBox[x,y] is a low-level formatting construct that represents (x)\/(y) in notebook expressions. ", 
"FractionBoxOptions" : "FractionBoxOptions->{opt₁->val₁,opt₂->val₂,…} is an option for cells that specifies settings for FractionBox objects within the cell.", 
"FractionLine" : "FractionLine is an option for fractions that specifies the thickness of the line separating the numerator and denominator.", 
"Frame" : "Frame is an option for Graphics, Grid, and other constructs that specifies whether to include a frame. ", 
"FrameBox" : "FrameBox[box] is a low-level box construct which represents box with a frame drawn around it. ", 
"FrameBoxOptions" : "FrameBoxOptions->{opt₁->val₁,opt₂->val₂,…} is an option for cells that specifies default settings.", 
"Framed" : "Framed[expr] displays a framed version of expr. ", 
"FrameLabel" : "FrameLabel is an option for Graphics, Manipulate, and related functions that specifies labels to be placed on the edges of a frame. ", 
"FrameMargins" : "FrameMargins is an option for objects that can be displayed with frames which specifies the absolute margins in printer's points to leave inside the frame. ", 
"FrameStyle" : "FrameStyle is an option for Graphics, Grid, and other constructs that specifies the style in which to draw frames.", 
"FrameTicks" : "FrameTicks is an option for 2D graphics functions that specifies tick marks for the edges of a frame. ", 
"FrameTicksStyle" : "FrameTicksStyle is an option for 2D graphics functions that specifies how frame ticks should be rendered.", 
"FRatioDistribution" : "FRatioDistribution[n,m] represents an F-ratio distribution with n numerator and m denominator degrees of freedom.", 
"FrechetDistribution" : "FrechetDistribution[α,β] represents the Frechet distribution with shape parameter α and scale parameter β.\nFrechetDistribution[α,β,μ] represents the Frechet distribution with shape parameter α, scale parameter β, and location parameter μ.", 
"FreeQ" : "FreeQ[expr,form] yields True if no subexpression in expr matches form, and yields False otherwise. \nFreeQ[expr,form,levelspec] tests only those parts of expr on levels specified by levelspec. ", 
"FresnelC" : "FresnelC[z] gives the Fresnel integral C(z). ", 
"FresnelS" : "FresnelS[z] gives the Fresnel integral S(z). ", 
"FrobeniusNumber" : "FrobeniusNumber[{a₁,…,aₙ}] gives the Frobenius number of a₁,…,aₙ.", 
"FrobeniusSolve" : "FrobeniusSolve[{a₁,…,aₙ},b] gives a list of all solutions of the Frobenius equation a₁x₁+…+aₙxₙ=b.\nFrobeniusSolve[{a₁,…,aₙ},b,m] gives at most m solutions.", 
"FromCharacterCode" : "FromCharacterCode[n] gives a string consisting of the character with integer code n. \nFromCharacterCode[{n₁,n₂,…}] gives a string consisting of the sequence of characters with codes nᵢ. \nFromCharacterCode[{{n₁₁,n₁₂,…},{n₂₁,…},…}] gives a list of strings. \nFromCharacterCode[…,\"encoding\"] uses the specified character encoding. ", 
"FromCoefficientRules" : "FromCoefficientRules[list,{x₁,x₂,…}] constructs a polynomial from a list of rules for exponent vectors and coefficients. ", 
"FromContinuedFraction" : "FromContinuedFraction[list] reconstructs a number from the list of its continued fraction terms. ", 
"FromDate" : "FromDate[date] converts a date of the form {y,m,d,h,m,s} to an absolute number of seconds since the beginning of January 1, 1900. ", 
"FromDigits" : "FromDigits[list] constructs an integer from the list of its decimal digits. \nFromDigits[list,b] takes the digits to be given in base b. \nFromDigits[\"string\"] constructs an integer from a string of digits.\nFromDigits[\"string\",\"Roman\"] constructs an integer from Roman numerals.", 
"FromDMS" : "FromDMS[{d,m,s}] converts from degrees, minutes, and seconds to decimal degrees. \nFromDMS[\"dms\"] converts from a DMS string to decimal degrees.\nFromDMS[\"latlong\"] converts from a latitude-longitude string to latitude and longitude in decimal degrees.", 
"FromServiceResponse" : " FromServiceResponse [ response ] converts a response message into a  Mathematica  expression. ", 
"Front" : "Front is a symbol that represents the front of a graphic for purposes of placement and alignment.", 
"FrontEndDynamicExpression" : "FrontEndDynamicExpression is a global front end option that specifies an expression to be dynamically updated whenever the front end is running.", 
"FrontEndEventActions" : "FrontEndEventActions is an option for the notebook front end that gives a list of actions to perform when specified user-interface events occur. ", 
"FrontEndExecute" : "FrontEndExecute[expr] sends expr to be executed by the Mathematica front end. ", 
"FrontEndStackSize" : "FrontEndStackSize is a global option that specifies the size of the stack used to store data in the front end (Macintosh only).", 
"FrontEndToken" : "FrontEndToken[\"cmd\"] is an object which represents a front end command token, typically corresponding to a front end menu item, to be executed by FrontEndExecute. \nFrontEndToken[nb,\"cmd\"] represents a command which targets the specified notebook. \nFrontEndToken[nb,\"cmd\",param] represents a command with a parameter.", 
"FrontEndTokenExecute" : "FrontEndTokenExecute[\"cmd\"] executes the specified front end command token, typically corresponding to a front end menu item. ", 
"Full" : "Full is a setting used for certain options, typically indicating that a full range of values should be included. ", 
"FullAxes" : "FullAxes[graphics] returns the axes options of a graphics object.", 
"FullDefinition" : "FullDefinition[symbol] prints as the definitions given for symbol, and all symbols on which these depend. ", 
"FullForm" : "FullForm[expr] prints as the full form of expr, with no special syntax. ", 
"FullGraphics" : "FullGraphics[g] takes a graphics object, and generates a new one in which objects specified by graphics options are given as explicit lists of graphics primitives. ", 
"FullSimplify" : "FullSimplify[expr] tries a wide range of transformations on expr involving elementary and special functions, and returns the simplest form it finds. \nFullSimplify[expr,assum] does simplification using assumptions. ", 
"Function" : "Function[body] or body& is a pure function. The formal parameters are # (or #1), #2, etc. \nFunction[x,body] is a pure function with a single formal parameter x. \nFunction[{x₁,x₂,…},body] is a pure function with a list of formal parameters. ", 
"FunctionExpand" : "FunctionExpand[expr] tries to expand out special and certain other functions in expr, when possible reducing compound arguments to simpler ones. \nFunctionExpand[expr,assum] expands using assumptions. ", 
"FunctionInterpolation" : "FunctionInterpolation[expr,{x,xₘᵢₙ,xₘₐₓ}] evaluates expr with x running from xₘᵢₙ to xₘₐₓ and constructs an InterpolatingFunction object which represents an approximate function corresponding to the result. \nFunctionInterpolation[expr,{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ},…] constructs an InterpolatingFunction object with several arguments. ", 
"FunctionSpace" : "FunctionSpace is an option for FindSequenceFunction and related functions that specifies the space of functions to consider for representations. ", 
"GaborWavelet" : "GaborWavelet[] represents a Gabor wavelet of frequency 6.\nGaborWavelet[w] represents a Gabor wavelet of frequency w.", 
"GainMargins" : "GainMargins[sys] gives the gain margins of the linear time-invariant system sys.", 
"GainPhaseMargins" : "GainPhaseMargins[sys] gives the gain and phase margins of the linear time-invariant system sys.", 
"Gamma" : "Gamma[z] is the Euler gamma function Γ(z). \nGamma[a,z] is the incomplete gamma function Γ(a,z). \nGamma[a,z₀,z₁] is the generalized incomplete gamma function Γ(a,z₀)-Γ(a,z₁). ", 
"GammaDistribution" : "GammaDistribution[α,β] represents a gamma distribution with shape parameter α and scale parameter β.\nGammaDistribution[α,β,γ,μ] represents a generalized gamma distribution with shape parameters α and γ, scale parameter β, and location parameter μ.", 
"GammaRegularized" : "GammaRegularized[a,z] is the regularized incomplete gamma function Q(a,z). ", 
"GapPenalty" : "GapPenalty is an option for SequenceAlignment and related functions that gives the additional cost associated with each gap corresponding to a run of insertions or deletions.", 
"Gather" : "Gather[list] gathers the elements of list into sublists of identical elements.\nGather[list,test] applies test to pairs of elements to determine if they should be considered identical.", 
"GatherBy" : "GatherBy[list,f] gathers into sublists each set of elements in list that gives the same value when f is applied.\nGatherBy[list,{f₁,f₂,…}] gathers list into nested sublists using fᵢ at level i. ", 
"GaussianFilter" : "GaussianFilter[image,r] filters image by convolving with a Gaussian kernel of pixel radius r.\nGaussianFilter[image,r,{n₁,n₂}] convolves image with a kernel formed from the nᵢᵗʰ derivatives of the discrete Gaussian.\nGaussianFilter[image,{r,σ},…]  uses a Gaussian kernel with radius r  and standard deviation σ.\nGaussianFilter[image,{{r₁,r₂},…}] uses radii rᵢ etc. in vertical and horizontal directions.\nGaussianFilter[data,…] applies Gaussian filtering to an array of data. ", 
"GaussianIntegers" : "GaussianIntegers is an option for FactorInteger, PrimeQ, Factor, and related functions that specifies whether factorization should be done over Gaussian integers. ", 
"GaussianMatrix" : "GaussianMatrix[r] gives a matrix that corresponds to a Gaussian kernel of radius r. \nGaussianMatrix[{r,σ}] gives a matrix corresponding to a Gaussian kernel with radius r and standard deviation σ.\nGaussianMatrix[r,{n₁,n₂}] gives a matrix formed from the n₁ᵗʰ derivative of the Gaussian with respect to rows and the n₂ᵗʰ derivative with respect to columns.\nGaussianMatrix[r,{{n₁₁,n₁₂},{n₂₁,n₂₂},…}] gives a matrix formed from the sums of the Subscript[n,i1] and Subscript[n,i2] derivatives.\nGaussianMatrix[{{r₁,r₂,…},σ},…] gives an array corresponding to a Gaussian kernel with radius rᵢ in the iᵗʰ index direction.", 
"GCD" : "GCD[n₁,n₂,…] gives the greatest common divisor of the nᵢ. ", 
"GegenbauerC" : "GegenbauerC[n,m,x] gives the Gegenbauer polynomial C Subsuperscript[, n, (m)](x). \nGegenbauerC[n,x] gives the renormalized form UnderscriptBox[lim, {{{m}, , 0}}, LimitsPositioning -> True]C Subsuperscript[, n, (m)](x)\/m. ", 
"General" : "General is a symbol to which general system messages are attached. ", 
"GeneralizedLinearModelFit" : "GeneralizedLinearModelFit[{y₁,y₂,…},{f₁,f₂,…},x] constructs a generalized linear model of the form g⁻¹ (β₀+β₁f₁+β₂f₂+…) that fits the yᵢ for successive x values 1, 2, ….\nGeneralizedLinearModelFit[{{x₁₁,x₁₂,…,y₁},{x₂₁,x₂₂,…,y₂},…},{f₁,f₂,…},{x₁,x₂,…}] constructs a generalized linear model of the form g⁻¹ (β₀+β₁f₁+β₂f₂+…) where the fᵢ depend on the variables xₖ.\nGeneralizedLinearModelFit[{m,v}] constructs a generalized linear model from the design matrix m and response vector v.", 
"GenerateConditions" : "GenerateConditions is an option for Integrate, Sum, and similar functions that specifies whether explicit conditions on parameters should be generated in the result.", 
"GeneratedCell" : "GeneratedCell is an option for Cell that indicates whether the cell was generated from the kernel. ", 
"GeneratedParameters" : "GeneratedParameters is an option that specifies how parameters generated to represent the results of various symbolic operations should be named. ", 
"GeneratingFunction" : "GeneratingFunction[expr,n,x] gives the generating function in x for the sequence whose nᵗʰ series coefficient is given by the expression expr.\nGeneratingFunction[expr,{n₁,n₂,…},{x₁,x₂,…}] gives the multidimensional generating function in x₁, x₂, … whose n₁, n₂, … coefficient is given by expr.", 
"Generic" : "Generic is a setting for the Mode option of Solve and related functions.", 
"GenericCylindricalDecomposition" : "GenericCylindricalDecomposition[ineqs,{x₁,x₂,…}] finds the full-dimensional part of the decomposition of the region represented by the inequalities ineqs into cylindrical parts whose directions correspond to the successive xᵢ, together with any hypersurfaces containing the rest of the region.", 
"GenomeData" : "GenomeData[\"gene\"] gives the DNA sequence for the specified gene on the reference human genome.\nGenomeData[\"gene\",\"property\"] gives the value of the specified property for the human gene gene.\nGenomeData[{\"chr\",{n₁,n₂}}] gives the sequence from positions n₁ to n₂ on chromosome chr in the reference human genome.", 
"GenomeLookup" : "GenomeLookup[\"seq\"] returns the positions of exact matches for the DNA sequence seq on the reference human genome.\nGenomeLookup[\"seq\",n] returns at most n matches.", 
"GeodesicDilation" : "GeodesicDilation[marker,mask] gives the fixed point of the geodesic dilation of the image marker constrained by the image mask.", 
"GeodesicErosion" : "GeodesicErosion[marker,mask] gives the fixed point of the geodesic erosion of the image marker constrained by the image mask.", 
"GeoDestination" : "GeoDestination[pos,{d,α}] gives the geodetic position reached by going distance d in azimuthal direction α from pos.", 
"GeodesyData" : "GeodesyData[\"name\",\"property\"] gives the value of the specified property for a named geodetic datum or reference ellipsoid.\nGeodesyData[{a,b},\"property\"] gives the value of the property for the ellipsoid with semimajor axis a and semiminor axis b.\nGeodesyData[obj,{\"property\",coords}] gives the value of the property at the specified coordinates.", 
"GeoDirection" : "GeoDirection[{lat₁,long₁},{lat₂,long₂}] gives the azimuthal direction from one latitude-longitude position on the Earth to another.\nGeoDirection[pos₁,pos₂] gives the azimuthal direction between positions specified by position objects.", 
"GeoDistance" : "GeoDistance[{lat₁,long₁},{lat₂,long₂}] gives the geodesic distance in meters between latitude-longitude positions on the Earth.\nGeoDistance[pos₁,pos₂] gives the distance between positions specified by position objects.", 
"GeoGridPosition" : "GeoGridPosition[{x,y,z},projection] represents a point {x,y,z} in a planimetric cartographic grid using the specified projection.", 
"GeometricDistribution" : "GeometricDistribution[p] represents a geometric distribution with probability parameter p. ", 
"GeometricMean" : "GeometricMean[list] gives the geometric mean of the values in list.", 
"GeometricMeanFilter" : "GeometricMeanFilter[image,r] filters image by replacing every value by the geometric mean of the values in its range r neighborhood. \nGeometricMeanFilter[data,r] applies geometric mean filtering to an array of data.", 
"GeometricTransformation" : "GeometricTransformation[g,tfun] represents the result of applying the transformation function tfun to the geometric objects corresponding to the primitives g.\nGeometricTransformation[g,m] transforms geometric objects in g by effectively replacing every point r by m.r. \nGeometricTransformation[g,{m,v}] effectively replaces every point r by m.r+v.\nGeometricTransformation[g,{t₁,t₂,…}] represents multiple copies of g transformed by a collection of transformations.", 
"GeoPosition" : "GeoPosition[{ϕ,λ}] represents a geodetic position with latitude ϕ and longitude λ.\nGeoPosition[{ϕ,λ,h}] represents a geodetic position with height h relative to the reference ellipsoid.\nGeoPosition[{ϕ,λ,h},datum] represents a geodetic position referring to the specified datum.", 
"GeoPositionENU" : "GeoPositionENU[{east,north,up},p]  represents a point with local Cartesian coordinates {east,north,up} in a reference system specified by the position p.", 
"GeoPositionXYZ" : "GeoPositionXYZ[{x,y,z}] represents a position in a Cartesian geocentric coordinate system.\nGeoPositionXYZ[{x,y,z},datum] represents a point referred to the specified datum.", 
"GeoProjectionData" : "GeoProjectionData[\"projection\",\"property\"] gives the value of the specified property for the specified cartographic projection.\nGeoProjectionData[\"projection\"] gives the complete options for the default form of the specified projection.", 
"Get" : "<<name reads in a file, evaluating each expression in it, and returning the last one. ", 
"GetContext" : "GetContext[\"context`\"] loads the file named by ContextToFileName[\"context`\"], which gives the conventional filename for a package that defines \"context`\".", 
"GetVirtualCellGroup" : "GetVirtualCellGroup is an internal symbol.", 
"Glaisher" : "Glaisher is Glaisher's constant with numerical value ≃1.28243. ", 
"Glow" : "Glow[col] is a graphics directive which specifies that surfaces of 3D graphics objects that follow are to be taken to glow with color col. \nGlow[] specifies that there is no glow. ", 
"GoldenRatio" : "GoldenRatio is the golden ratio ϕ=½ (√5+1), with numerical value ≃1.61803.", 
"GompertzMakehamDistribution" : "GompertzMakehamDistribution[λ,ξ] represents a Gompertz distribution with scale parameter λ and frailty parameter ξ.\nGompertzMakehamDistribution[λ,ξ,θ,α] represents a Gompertz–Makeham distribution with parameters λ, ξ, θ, and α.", 
"Goto" : "Goto[tag] scans for Label[tag], and transfers control to that point. ", 
"Grad" : " Grad [ f ] gives the gradient,  ∇ f , of the scalar function  f  in the default coordinate system. \n Grad [ f , coordsys ] gives the gradient of  f  in the coordinate system  coordsys .", 
"Gradient" : "Gradient is an option for FindMinimum and related functions that specifies the gradient vector to assume for the function being extremized.", 
"GradientFilter" : "GradientFilter[image,r] gives an image corresponding to the magnitude of the gradient of image, computed using discrete derivatives of a Gaussian of pixel radius r.\nGradientFilter[image,{r,σ}] uses a Gaussian with standard deviation σ.\nGradientFilter[image,{{r₁,r₂},…}] uses a Gaussian with radii rᵢ etc. in vertical and horizontal directions.\nGradientFilter[data,…] applies gradient filtering to an array of data.", 
"Graph" : "Graph[{e₁,e₂,…}] yields a graph with edges Subscript[e,j].\nGraph[{v₁,v₂,…},{e₁,e₂,…}] yields the graph with vertices vᵢ and edges Subscript[e,j]. \nGraph[{…,wᵢ[vᵢ,…],…},{…,Subscript[w,j][Subscript[e,j],…],…}] yields a graph with vertex and edge properties defined by the symbolic wrappers wₖ.", 
"GraphCenter" : "GraphCenter[g] gives the set of vertices with minimum eccentricity in the graph g.", 
"GraphComplement" : "GraphComplement[g] gives the graph complement of the graph g.", 
"GraphData" : "GraphData[name] gives a graph with the specified name.\nGraphData[name,\"property\"] gives the value for the specified property for a named graph.\nGraphData[\"class\"] gives a list of named graphs in the specified class.\nGraphData[n] gives a list of named graphs with n vertices.", 
"GraphDiameter" : "GraphDiameter[g] gives the maximum eccentricity of the vertices in the graph g.", 
"GraphDifference" : "GraphDifference[g₁,g₂] gives the graph difference of the graphs g₁ and g₂.", 
"GraphDisjointUnion" : "GraphDisjointUnion[g₁,g₂] gives the graph disjoint union of the graphs g₁ and g₂.\nGraphDisjointUnion[g₁,g₂,…] gives the disjoint union of g₁, g₂, ….", 
"GraphDistance" : "GraphDistance[g,s,t] gives the distance from source vertex s to target vertex t in the graph g.\nGraphDistance[g,s] gives the distance from s to all vertices of the graph g.", 
"GraphDistanceMatrix" : "GraphDistanceMatrix[g] gives the matrix of distances between vertices for the graph g.\nGraphDistanceMatrix[g,d] gives the matrix of distances between vertices of maximal distance d in the graph g.", 
"GraphHighlight" : "GraphHighlight is an option to Graph and related objects that specifies graph elements to highlight. ", 
"GraphHighlightStyle" : "GraphHighlightStyle is an option to Graph and related objects that specifies styles to use for highlighted graph elements. ", 
"Graphics" : "Graphics[primitives,options] represents a two-dimensional graphical image. ", 
"Graphics3D" : "Graphics3D[primitives,options] represents a three-dimensional graphical image. ", 
"GraphicsArray" : "GraphicsArray[{g₁,g₂,…}] represents a row of graphics objects.\nGraphicsArray[{{g₁₁,g₁₂,…},…}] represents a two-dimensional array of graphical objects.", 
"GraphicsColumn" : "GraphicsColumn[{g₁,g₂,…}] generates a graphic in which the gᵢ are laid out in a column, with g₁ above g₂, etc. \nGraphicsColumn[list,alignment] aligns each element horizontally in the specified way. \nGraphicsColumn[list,alignment,spacing] leaves the specified spacing between successive elements.", 
"GraphicsComplex" : "GraphicsComplex[{pt₁,pt₂,…},data] represents a graphics complex in which coordinates given as integers i in graphics primitives in data are taken to be ptᵢ. ", 
"GraphicsGrid" : "GraphicsGrid[{{g₁₁,g₁₂,…},…}] generates a graphic in which the Subscript[g,ij] are laid out in a two-dimensional grid.", 
"GraphicsGroup" : "GraphicsGroup[{g₁,g₂,…}] represents a collection of graphics objects grouped together for purposes of interactive selection in a notebook. ", 
"GraphicsRow" : "GraphicsRow[{g₁,g₂,…}] generates a graphic in which the gᵢ are laid out in a row.\nGraphicsRow[list,spacing] leaves the specified spacing between successive elements.", 
"GraphicsSpacing" : "GraphicsSpacing is an option for GraphicsArray that specifies the spacing between elements in the array. ", 
"GraphIntersection" : "GraphIntersection[g₁,g₂] gives the graph intersection of the graphs g₁ and g₂.\nGraphIntersection[g₁,g₂,…] gives the graph intersection of g₁, g₂, …. ", 
"GraphLayout" : "GraphLayout is an option to Graph and related functions that specifies what layout to use for graph components and collections of components. ", 
"GraphPeriphery" : "GraphPeriphery[g] gives the set of vertices with maximum eccentricity in the graph g.", 
"GraphPlot" : "GraphPlot[{Subscript[v,i1]->Subscript[v,j1],Subscript[v,i2]->Subscript[v,j2],…}] generates a plot of the graph in which vertex vᵢₖ is connected to vertex Subscript[v,jk].\nGraphPlot[{{Subscript[v,i1]->Subscript[v,j1],lbl₁},…}] associates labels lblₖ with edges in the graph.\nGraphPlot[m] generates a plot of the graph represented by the adjacency matrix m.", 
"GraphPlot3D" : "GraphPlot3D[{Subscript[v,i1]->Subscript[v,j1],Subscript[v,i2]->Subscript[v,j2],…}] generates a 3D plot of the graph in which vertex vᵢₖ is connected to vertex Subscript[v,jk].\nGraphPlot3D[{{Subscript[v,i1]->Subscript[v,j1],lbl₁},…}] associates labels lblₖ with edges in the graph.\nGraphPlot3D[m] generates a plot of the graph represented by the adjacency matrix m.", 
"GraphPower" : "GraphPower[g,n] gives the graph-nᵗʰ power of the graph g.", 
"GraphQ" : "GraphQ[g] yields True if g is a valid Graph object and False otherwise.", 
"GraphRadius" : "GraphRadius[g] gives the minimum eccentricity of the vertices in the graph g.", 
"GraphStyle" : "GraphStyle is an option to Graph and related objects that specifies styles to use for the different graph elements. ", 
"GraphUnion" : "GraphUnion[g₁,g₂] gives the graph union of the graphs g₁ and g₂.\nGraphUnion[g₁,g₂,…] gives the graph union of g₁, g₂, ….", 
"Gray" : "Gray represents the color gray in graphics or style specifications. ", 
"GrayLevel" : "GrayLevel[level] is a graphics directive that specifies the gray‐level intensity with which objects that follow should be displayed. \nGrayLevel[g,a] specifies opacity a. ", 
"Greater" : "x>y yields True if x is determined to be greater than y. \nx₁>x₂>x₃ yields True if the xᵢ form a strictly decreasing sequence. ", 
"GreaterEqual" : "x>=y or x≥y yields True if x is determined to be greater than or equal to y. \nx₁≥x₂≥x₃ yields True if the xᵢ form a non‐increasing sequence. ", 
"GreaterEqualLess" : "GreaterEqualLess[x,y,…] displays as x⋛y⋛….", 
"GreaterFullEqual" : "GreaterFullEqual[x,y,…] displays as x≧y≧….", 
"GreaterGreater" : "GreaterGreater[x,y,…] displays as x≫y≫….", 
"GreaterLess" : "GreaterLess[x,y,…] displays as x≷y≷….", 
"GreaterSlantEqual" : "GreaterSlantEqual[x,y,…] displays as x⩾y⩾….", 
"GreaterTilde" : "GreaterTilde[x,y,…] displays as x≳y≳….", 
"Green" : "Green represents the color green in graphics or style specifications. ", 
"Grid" : "Grid[{{expr₁₁,expr₁₂,…},{expr₂₁,expr₂₂,…},…}] is an object that formats with the Subscript[expr,ij] arranged in a two-dimensional grid. ", 
"GridBaseline" : "GridBaseline is an option for GridBox that specifies what place in the grid should be considered its baseline for purposes of alignment with surrounding objects. ", 
"GridBox" : "GridBox[{{box₁₁,box₁₂,…},{box₂₁,box₂₂,…},…}] is a low-level box construct that represents a two-dimensional grid of boxes or strings in notebook expressions.", 
"GridCreationSettings" : "GridCreationSettings->{opt₁->val₁,opt₂->val₂,…} is a global option that specifies settings for the Create Table\/Matrix dialog.", 
"GridDefaultElement" : "GridDefaultElement is an option for the low-level function GridBox that specifies what to insert when a new element is created interactively in a GridBox. ", 
"GridFrame" : "GridFrame is an option for grids that specifies whether a surrounding frame is drawn.", 
"GridFrameMargins" : "GridFrameMargins is an option for grids that specifies the spacing between the content of the grid and the frame surrounding it.", 
"GridGraph" : "GridGraph[{m,n}] gives the grid graph with m×n vertices Subscript[G,m,n].\nGridGraph[{n₁,n₂,…,nₖ}] gives the k-dimensional grid graph with n₁×n₂×⋯×nₖ vertices Subscript[G,n₁,n₂,…,nₖ].", 
"GridLines" : "GridLines is an option for two-dimensional graphics functions that specifies grid lines. ", 
"GridLinesStyle" : "GridLinesStyle is an option for 2D graphics functions that specifies how grid lines should be rendered.", 
"GroebnerBasis" : "GroebnerBasis[{poly₁,poly₂,…},{x₁,x₂,…}] gives a list of polynomials that form a Gröbner basis for the set of polynomials polyᵢ. \nGroebnerBasis[{poly₁,poly₂,…},{x₁,x₂,…},{y₁,y₂,…}] finds a Gröbner basis in which the yᵢ have been eliminated. ", 
"GroupActionBase" : "GroupActionBase is an option to specify a base for a group.", 
"GroupCentralizer" : "GroupCentralizer[group,g] returns the centralizer of the element g in group.", 
"GroupElementPosition" : "GroupElementPosition[group,g] returns the position of the element g in the list of elements of group.\nGroupElementPosition[group,{g₁,…,gₙ}] returns the list of positions of the elements g₁,…,gₙ in group.", 
"GroupElementQ" : "GroupElementQ[group,g] returns True if the object g is an element of group and False otherwise.", 
"GroupElements" : "GroupElements[group] returns the list of all elements of group.\nGroupElements[group,{r₁,…,rₖ}] returns the elements numbered r₁,…,rₖ in group in the standard order.", 
"GroupGenerators" : "GroupGenerators[group] returns a list of generators of group. ", 
"GroupMultiplicationTable" : "GroupMultiplicationTable[group] gives the multiplication table of group as an array.", 
"GroupOrbits" : "GroupOrbits[group,{p₁,…}] returns the orbits of the points pᵢ under the action of the elements of group.\nGroupOrbits[group,{p₁,…},f] finds the orbits under the group action given by a function f.", 
"GroupOrder" : "GroupOrder[group] returns the number of elements of group.", 
"GroupPageBreakWithin" : "GroupPageBreakWithin is an option for Cell that specifies whether a page break should be allowed within the group of cells if the notebook that contains the group is printed. ", 
"GroupSetwiseStabilizer" : "GroupSetwiseStabilizer[group,{p₁,…,pₙ}] returns the subgroup of group for which the images of the points pᵢ are still in the list {p₁,…,pₙ}.", 
"GroupStabilizer" : "GroupStabilizer[group,{p₁,…,pₙ}] returns the subgroup of elements of group that move none of the points p₁,…,pₙ.", 
"GroupStabilizerChain" : "GroupStabilizerChain[group] returns a list of successive stabilizers in group of the points in a base of group.", 
"Gudermannian" : "Gudermannian[z] gives the Gudermannian function gd(z).", 
"GumbelDistribution" : "GumbelDistribution[α,β] represents a Gumbel distribution with location parameter α and scale parameter β.", 
"HaarWavelet" : "HaarWavelet[] represents a Haar wavelet. ", 
"HalfNormalDistribution" : "HalfNormalDistribution[θ] represents a half-normal distribution with scale inversely proportional to parameter θ.", 
"HamiltonianGraphQ" : "HamiltonianGraphQ[g] yields True if the graph g is Hamiltonian, and False otherwise.", 
"HammingDistance" : "HammingDistance[u,v] gives the Hamming distance between strings or vectors u and v.", 
"HankelH1" : "HankelH1[n,z] gives the Hankel function of the first kind H Subsuperscript[, n, (1)](z). ", 
"HankelH2" : "HankelH2[n,z] gives the Hankel function of the second kind H Subsuperscript[, n, (2)](z). ", 
"HankelMatrix" : "HankelMatrix[n] gives the n×n Hankel matrix with first row and first column being successive integers.\nHankelMatrix[{c₁,c₂,…,cₙ}] gives the Hankel matrix whose first column consists of elements c₁, c₂, ….\nHankelMatrix[{c₁,c₂,…,cₘ},{r₁,r₂,…, rₙ}] gives the Hankel matrix with elements cᵢ down the first column, and rᵢ across the last row.", 
"HaradaNortonGroupHN" : "HaradaNortonGroupHN[] represents the sporadic simple Harada–Norton group HN.", 
"HararyGraph" : "HararyGraph[k,n] generates the minimal k-connected graph on n vertices Subscript[H,k,n].", 
"HarmonicMean" : "HarmonicMean[list] gives the harmonic mean of the values in list.", 
"HarmonicMeanFilter" : "HarmonicMeanFilter[image,r] filters image by replacing every value by the harmonic mean of the values in its range r neighborhood. \nHarmonicMeanFilter[data,r] applies harmonic mean filtering to an array of data.", 
"HarmonicNumber" : "HarmonicNumber[n] gives the nᵗʰ harmonic number Hₙ. \nHarmonicNumber[n,r] gives the harmonic number H Subsuperscript[, n, (r)] of order r. ", 
"Hash" : "Hash[expr] gives an integer hash code for the expression expr.\nHash[expr,\"type\"] gives an integer hash code of the specified type for expr.", 
"HashTable" : "HashTable is a part of the object which is returned by Dispatch.", 
"Haversine" : "Haversine[z] gives the haversine function hav(z).", 
"HazardFunction" : "HazardFunction[dist,x] gives the hazard function for the symbolic distribution dist evaluated at x.\nHazardFunction[dist,{x₁,x₂,…}] gives the multivariate hazard function for the symbolic distribution dist evaluated at {x₁,x₂,…}.\nHazardFunction[dist] gives the hazard function as a pure function.", 
"Head" : "Head[expr] gives the head of expr. ", 
"HeadCompose" : "HeadCompose[a, b, c, d] gives a[b][c][d].", 
"Heads" : "Heads is an option for functions which use level specifications that specifies whether heads of expressions should be included. ", 
"HeavisideLambda" : "HeavisideLambda[x] represents the triangle distribution Λ(x) which is nonzero for |x|<1.\nHeavisideLambda[x₁,x₂,…] represents the multidimensional triangle distribution Λ(x₁,x₂,…) which is nonzero for |xᵢ|<1.", 
"HeavisidePi" : "HeavisidePi[x] represents the box distribution Π(x), equal to 1 for |x|<½ and 0 for |x|>½.\nHeavisidePi[x₁,x₂,…] represents the multidimensional box distribution Π(x₁,x₂,…) which is 1 if all |xᵢ|<½.", 
"HeavisideTheta" : "HeavisideTheta[x] represents the Heaviside theta function θ(x), equal to 0 for x<0 and 1 for x>0. \nHeavisideTheta[x₁,x₂,…] represents the multidimensional Heaviside theta function which is 1 only if none of the xᵢ are not positive. ", 
"HeldGroupHe" : "HeldGroupHe[] represents the sporadic simple Held group He.", 
"HelpBrowserSettings" : "HelpBrowserSettings->{opt₁->val₁,opt₂->val₂,…} is a global option that specifies settings for the legacy Help Browser.", 
"HermiteDecomposition" : "HermiteDecomposition[m] gives the Hermite normal form decomposition of an integer matrix m.", 
"HermiteH" : "HermiteH[n,x] gives the Hermite polynomial Hₙ(x). ", 
"HermitianMatrixQ" : "HermitianMatrixQ[m] tests whether m is a Hermitian matrix.", 
"HessenbergDecomposition" : "HessenbergDecomposition[m] gives the Hessenberg decomposition of a matrix m. ", 
"HexadecimalCharacter" : "HexadecimalCharacter represents a hexadecimal digit character 0–9, a–f, A–F in StringExpression.", 
"HiddenSurface" : "HiddenSurface is an option for SurfaceGraphics which specifies whether hidden surfaces are to be eliminated. ", 
"HighlightGraph" : "HighlightGraph[g,{a₁,a₂,…}] highlights the aᵢ that can be vertices, edges, or subgraphs of g.\nHighlightGraph[g,{…,Subscript[w,j][Subscript[a,j]],…}] highlights using the symbolic wrappers Subscript[w,j].", 
"HigmanSimsGroupHS" : "HigmanSimsGroupHS[] represents the sporadic simple Higman–Sims group HS.", 
"HilbertMatrix" : "HilbertMatrix[n] gives the n×n Hilbert matrix with elements of the form 1\/(i+j-1).\nHilbertMatrix[{m,n}] gives the m×n Hilbert matrix.", 
"Histogram" : "Histogram[{x₁,x₂,…}] plots a histogram of the values xᵢ.\nHistogram[{x₁,x₂,…},bspec] plots a histogram with bin width specification bspec.\nHistogram[{x₁,x₂,…},bspec,hspec] plots a histogram with bin heights computed according to the specification hspec.\nHistogram[{data₁,data₂,…},…] plots histograms for multiple datasets dataᵢ.", 
"Histogram3D" : "Histogram3D[{{x₁,y₁},{x₂,y₂},…}] plots a 3D histogram of the values {xᵢ,yᵢ}.\nHistogram3D[{{x₁,y₁},{x₂,y₂},…},bspec] plots a 3D histogram with bins specified by bspec.\nHistogram3D[{{x₁,y₁},{x₂,y₂},…},bspec,hspec] plots a 3D histogram with bin heights computed according to the specification hspec.\nHistogram3D[{data₁,data₂,…}] plots 3D histograms for multiple datasets dataᵢ.", 
"HistogramDistribution" : "HistogramDistribution[{x₁,x₂,…}] represents the probability distribution corresponding to a histogram of the data values xᵢ.\nHistogramDistribution[{{x₁,y₁,…},{x₂,y₂,…},…}] represents a multivariate histogram distribution based on data values {xᵢ,yᵢ,…}.\nHistogramDistribution[…,bspec] represents a histogram distribution with bins specified by bspec.", 
"HistogramList" : "HistogramList[{x₁,x₂,…}] gives a list of bins and histogram heights of the values xᵢ.\nHistogramList[{{x₁,y₁,…},{x₂,y₂,…},…}] gives a list of bins and histogram heights of the values {xᵢ,yᵢ,…}.\nHistogramList[…,bspec] gives a list of bins and histogram heights with bins specified by bspec.\nHistogramList[…,bspec,hspec] gives a list of bins and histogram heights with bin heights computed according to the specification hspec.", 
"HitMissTransform" : "HitMissTransform[image,ker] gives the hit-and-miss transform of image with respect to the composite structuring element ker.\nHitMissTransform[image,{ker₁,ker₂,…}] gives the union of the hit-and-miss transforms for all the structuring elements kerᵢ.\nHitMissTransform[image,{ker₁,ker₂,…},t] treats values above t as foreground.", 
"HITSCentrality" : "HITSCentrality[g] gives a list of authority and hub centralities for the vertices in the graph g.", 
"Hold" : "Hold[expr] maintains expr in an unevaluated form. ", 
"HoldAll" : "HoldAll is an attribute which specifies that all arguments to a function are to be maintained in an unevaluated form. ", 
"HoldAllComplete" : "HoldAllComplete is an attribute which specifies that all arguments to a function are not to be modified or looked at in any way in the process of evaluation. ", 
"HoldComplete" : "HoldComplete[expr] shields expr completely from the standard Mathematica evaluation process, preventing even upvalues associated with expr from being used. ", 
"HoldFirst" : "HoldFirst is an attribute which specifies that the first argument to a function is to be maintained in an unevaluated form. ", 
"HoldForm" : "HoldForm[expr] prints as the expression expr, with expr maintained in an unevaluated form. ", 
"HoldPattern" : "HoldPattern[expr] is equivalent to expr for pattern matching, but maintains expr in an unevaluated form. ", 
"HoldRest" : "HoldRest is an attribute which specifies that all but the first argument to a function are to be maintained in an unevaluated form. ", 
"HorizontalForm" : "HorizontalForm is an internal symbol used for formatting and printing.", 
"HornerForm" : "HornerForm[poly] puts the polynomial poly in Horner form.\nHornerForm[poly,vars] puts poly in Horner form with respect to the variable or variable list vars.\nHornerForm[poly₁\/poly₂] puts the rational function poly₁\/poly₂ in Horner form by nesting poly₁ and poly₂.\nHornerForm[poly₁\/poly₂,vars₁,vars₂] puts poly₁\/poly₂ in Horner form using the variables or variable lists vars₁ and vars₂ for poly₁ and poly₂, respectively.", 
"HotellingTSquareDistribution" : "HotellingTSquareDistribution[p,m] represents Hotelling's T² distribution with dimensionality parameter p and m degrees of freedom.", 
"HoytDistribution" : "HoytDistribution[q,ω] represents a Hoyt distribution with shape parameter q and spread parameter ω.", 
"HTMLSave" : "HTMLSave[\"file.html\"] saves an HTML version of the current input notebook in the front end. \nHTMLSave[\"file.html\",\"source.nb\"] saves an HTML version of the notebook from the file source.nb.\nHTMLSave[\"file.html\",notebook] saves an HTML version of the notebook corresponding to the specified notebook object. ", 
"Hue" : "Hue[h] is a graphics directive which specifies that objects which follow are to be displayed, if possible, in a color corresponding to hue h. \nHue[h,s,b] specifies colors in terms of hue, saturation, and brightness. \nHue[h,s,b,a] specifies opacity a. ", 
"HumpDownHump" : "HumpDownHump[x,y,…] displays as x≎y≎….", 
"HumpEqual" : "HumpEqual[x,y,…] displays as x≏y≏….", 
"HurwitzLerchPhi" : "HurwitzLerchPhi[z,s,a] gives the Hurwitz–Lerch transcendent Φ(z,s,a).", 
"HurwitzZeta" : "HurwitzZeta[s,a] gives the Hurwitz zeta function ζ(s,a).", 
"HyperbolicDistribution" : "HyperbolicDistribution[α,β,δ,μ] represents a hyperbolic distribution with location parameter μ, scale parameter δ, shape parameter α, and skewness parameter β.\nHyperbolicDistribution[λ,α,β,δ,μ] represents a generalized hyperbolic distribution with shape parameter λ.", 
"HypercubeGraph" : "HypercubeGraph[n] gives the n-dimensional hypercube graph Qₙ.", 
"Hyperfactorial" : "Hyperfactorial[n] gives the hyperfactorial function H(n).", 
"Hypergeometric0F1" : "Hypergeometric0F1[a,z] is the confluent hypergeometric function ₀F₁(;a;z). ", 
"Hypergeometric0F1Regularized" : "Hypergeometric0F1Regularized[a,z] is the regularized confluent hypergeometric function ₀F₁(a;z)\/Γ(a). ", 
"Hypergeometric1F1" : "Hypergeometric1F1[a,b,z] is the Kummer confluent hypergeometric function ₁F₁(a;b;z). ", 
"Hypergeometric1F1Regularized" : "Hypergeometric1F1Regularized[a,b,z] is the regularized confluent hypergeometric function ₁F₁(a;b;z)\/Γ(b). ", 
"Hypergeometric2F1" : "Hypergeometric2F1[a,b,c,z] is the hypergeometric function ₂F₁(a,b;c;z). ", 
"Hypergeometric2F1Regularized" : "Hypergeometric2F1Regularized[a,b,c,z] is the regularized hypergeometric function ₂F₁(a,b;c;z)\/Γ(c). ", 
"HypergeometricDistribution" : "HypergeometricDistribution[n,Subscript[n,succ],nₜₒₜ] represents a hypergeometric distribution.", 
"HypergeometricPFQ" : "HypergeometricPFQ[{a₁,…,aₚ},{b₁,…,Subscript[b,q]},z] is the generalized hypergeometric function ₚSubscript[F,q](a;b;z). ", 
"HypergeometricPFQRegularized" : "HypergeometricPFQRegularized[{a₁,…,aₚ},{b₁,…,Subscript[b,q]},z] is the regularized generalized hypergeometric function ₚSubscript[F,q](a;b;z)\/(Γ(b₁)…Γ(Subscript[b,q])). ", 
"HypergeometricU" : "HypergeometricU[a,b,z] is the confluent hypergeometric function U(a,b,z). ", 
"Hyperlink" : "Hyperlink[uri] represents a hyperlink that jumps to the specified URI when clicked. \nHyperlink[label,uri] represents a hyperlink to be displayed as label. ", 
"Hyphenation" : "Hyphenation is an option for Cell that specifies whether to allow hyphenation for words of text. ", 
"HypothesisTestData" : "HypothesisTestData[…] represents hypothesis test data such as generated by DistributionFitTest, AndersonDarlingTest, etc. ", 
"I" : "I represents the imaginary unit √(-1). ", 
"Identity" : "Identity[expr] gives expr (the identity operation). ", 
"IdentityMatrix" : "IdentityMatrix[n] gives the n⨯n identity matrix. ", 
"If" : "If[condition,t,f] gives t if condition evaluates to True, and f if it evaluates to False. \nIf[condition,t,f,u] gives u if condition evaluates to neither True nor False. ", 
"IgnoreCase" : "IgnoreCase is an option for string manipulation and searching functions that specifies whether lowercase and uppercase letters should be treated as equivalent. ", 
"Im" : "Im[z] gives the imaginary part of the complex number z. ", 
"Image" : "Image[data] represents a raster image with pixel values given by the array data.\nImage[graphics] creates a raster image from a graphics object. \nImage[obj,options] gives an image that uses the specified options.", 
"ImageAdd" : "ImageAdd[image,x] adds an amount x to each channel value in image.\nImageAdd[image₁,image₂] gives an image in which each pixel is the sum of the corresponding pixels in image₁ and image₂.", 
"ImageAdjust" : "ImageAdjust[image] adjusts the levels in image, rescaling them to cover the range 0 to 1.\nImageAdjust[image,c] adjusts the contrast of image by an amount c.\nImageAdjust[image,{c,b}] adjusts the contrast by an amount c and the brightness by an amount b.\nImageAdjust[image,{c,b,γ}] also performs a gamma correction by raising values to the power γ.\nImageAdjust[image,corr,{inₘᵢₙ,inₘₐₓ}] first rescales so that the range of input values inₘᵢₙ to inₘₐₓ is mapped to 0 to 1.\nImageAdjust[image,corr,{inₘᵢₙ,inₘₐₓ},{outₘᵢₙ,outₘₐₓ}] rescales so that the range of input values inₘᵢₙ to inₘₐₓ is mapped to outₘᵢₙ to outₘₐₓ.", 
"ImageAlign" : "ImageAlign[image₁,image₂] returns a version of image₂ that is aligned with image₁.", 
"ImageApply" : "ImageApply[f,image] applies the function f to the list of channel values for each pixel in image. ", 
"ImageAspectRatio" : "ImageAspectRatio[image] gives the ratio of height to width for image.", 
"ImageAssemble" : "ImageAssemble[{{image₁₁,image₁₂,…},{image₂₁,…},…}] assembles a single image from an array of images.", 
"ImageCapture" : "ImageCapture[] opens a graphical user interface for capturing images from connected cameras.", 
"ImageChannels" : "ImageChannels[image] gives the number of channels present in the data for the Image object image.", 
"ImageClip" : "ImageClip[image] clips all channel values in image to lie in the default range.\nImageClip[image,{min,max}] clips channel values to lie in the range from min to max.\nImageClip[image,{min,max},{vₘᵢₙ,vₘₐₓ}] gives vₘᵢₙ for values below min and vₘₐₓ for values above max.", 
"ImageColorSpace" : "ImageColorSpace[image] gives the name of the color space of image.", 
"ImageCompose" : "ImageCompose[image,overlay] gives the result of overlaying overlay onto image. \nImageCompose[image,{overlay,α}] gives the result of alpha blending overlay into image using blending fraction α.\nImageCompose[image,overlay,pos] places the center of overlay at position pos in image.\nImageCompose[image,overlay,pos,opos] places the point opos in overlay at position pos in image.\nImageCompose[image,overlay,pos,opos,{fᵢ,fₒ,mode}] uses the compositing fractions fₖ and the specified compositing mode.", 
"ImageConvolve" : "ImageConvolve[image,ker] gives the convolution of image with kernel ker.", 
"ImageCooccurrence" : "ImageCooccurrence[image,n] gives the n×n cooccurrence matrix for image.\nImageCooccurrence[image,n,ker] computes a cooccurrence matrix for arbitrary spatial relationships specified by a kernel ker.", 
"ImageCorrelate" : "ImageCorrelate[image,ker] gives the correlation of image with kernel ker.\nImageCorrelate[image,ker,f] computes a generalized correlation in which the function f is used in place of Dot.", 
"ImageCorrespondingPoints" : "ImageCorrespondingPoints[image₁,image₂] finds a set of matching interest points in image₁ and image₂ and returns their pixel coordinates.", 
"ImageCrop" : "ImageCrop[image] crops image by removing borders of uniform color. \nImageCrop[image,{w,h}] crops image to pixel width w and pixel height h.\nImageCrop[image,size] crops image based on the size specification size.\nImageCrop[image,size,spec] crops image by removing pixels from sides specified by spec.", 
"ImageData" : "ImageData[image] gives the array of pixel values in image.\nImageData[image,\"type\"] gives the array of pixel values converted to the specified type.", 
"ImageDeconvolve" : "ImageDeconvolve[image,ker] gives a deconvolution of image using kernel ker.", 
"ImageDifference" : "ImageDifference[image₁,image₂] gives an image in which each pixel is the absolute difference of the corresponding pixels in image₁ and image₂. ", 
"ImageDimensions" : "ImageDimensions[image] gives the pixel dimensions of the raster associated with an Image object image.", 
"ImageEffect" : "ImageEffect[image,\"effect\"] applies the specified image effect to image.\nImageEffect[image,{\"effect\",params}] uses parameters params.", 
"ImageFilter" : "ImageFilter[f,image,r] applies the function f to the range r neighborhood of each pixel in each channel of image.", 
"ImageForestingComponents" : "ImageForestingComponents[image] finds a segmentation of image, returning an integer matrix in which positive integers label different components.\nImageForestingComponents[image,marker] tries to find a segmentation into components that include pixels indicated by marker.\nImageForestingComponents[image,marker,r] finds components that are connected at a pixel scale given by r.", 
"ImageForwardTransformation" : "ImageForwardTransformation[image,function] gives an image in which each pixel at position function[{x,y}] corresponds to the position {x,y} in image.\nImageForwardTransformation[image,function,size] gives an image of the specified size.", 
"ImageHistogram" : "ImageHistogram[image] plots a histogram of the pixel levels for each channel in image.\nImageHistogram[image,n] uses n levels for each channel.\nImageHistogram[image,n,{min,max}] puts all values into n bins between min and max.", 
"ImageKeypoints" : "ImageKeypoints[image] finds key features in image and returns their coordinates.\nImageKeypoints[image,prop] gives the specified property prop for each keypoint.", 
"ImageLevels" : "ImageLevels[image] gives a list of pixel values and counts for each channel in image. \nImageLevels[image,n] bins pixel values into n equally spaced levels.\nImageLevels[image,n,{min,max}] puts all values into n bins between min and max.", 
"ImageLines" : "ImageLines[image] finds line segments in image and returns the coordinates of their endpoints.\nImageLines[image,t] uses the threshold t for selecting image lines.\nImageLines[image,t,d] uses the parameter d to control the distinctness of the detected lines.", 
"ImageMargins" : "ImageMargins is an option that specifies the absolute margins to leave around the image displayed for an object. ", 
"ImageMultiply" : "ImageMultiply[image,x] multiplies each channel value in image by a factor x.\nImageMultiply[image₁,image₂] gives an image in which each pixel is the product of the corresponding pixels in image₁ and image₂.", 
"ImagePad" : "ImagePad[image,m] pads image on all sides with m background pixels.\nImagePad[image,m,padding] pads image on all sides using the value or method specified by padding.\nImagePad[image,{{left,right},{bottom,top}},…] pads image with the specified numbers of pixels on each side.", 
"ImagePadding" : "ImagePadding is an option for graphics functions that specifies what absolute extra padding should be left for extended objects such as thick lines and annotations such as tick and axis labels.", 
"ImagePartition" : "ImagePartition[image,s] partitions an image into an array of s⨯s-pixel subimages.\nImagePartition[image,{w,h}] partitions an image into an array of subimages of pixel width w and pixel height h.\nImagePartition[image,{w,h},{dw,dh}] uses pixel offsets dw and dh.", 
"ImagePerspectiveTransformation" : "ImagePerspectiveTransformation[image,m] applies a linear fractional transform specified by a matrix m to the positions of each pixel in image.\nImagePerspectiveTransformation[image,m,size] gives an image of the specified size.", 
"ImageQ" : "ImageQ[image] yields True if image has the form of a valid Image object, and False otherwise.", 
"ImageReflect" : "ImageReflect[image] reverses image by top-bottom mirror reflection. \nImageReflect[image,side] reverses image by reflecting it so that the specified side goes to the opposite side.\nImageReflect[image,side₁->side₂] reflects image so that side₁ is interchanged with side₂.", 
"ImageRegion" : "ImageRegion is an option for cells that specifies the size and position of the bounding box within which a graphic is rendered.", 
"ImageResize" : "ImageResize[image,w] gives a resized version of image that is w pixels wide.\nImageResize[image,{s}] gives a resized version of image with a maximum pixel width or height given by s.\nImageResize[image,{w,h}] gives a resized version of image that has exactly the specified pixel width and height.\nImageResize[image,{{wₘₐₓ},{hₘₐₓ}}] gives a resized version of image that has the specified maximum width and height.", 
"ImageResolution" : "ImageResolution is an option for Export, Rasterize, and related functions that specifies at what resolution bitmap images should be rendered. ", 
"ImageRotate" : "ImageRotate[image] rotates image counterclockwise by 90°.\nImageRotate[image,side] rotates image to make the top of the image be on the specified side.\nImageRotate[image,side₁->side₂] rotates image to make side₁ be on side₂.\nImageRotate[image,θ] rotates image counterclockwise by θ radians.\nImageRotate[image,side,size] gives an image of the specified size.", 
"ImageRotated" : "ImageRotated is an option for Export that specifies whether images should be rotated into landscape mode. ", 
"ImageScaled" : "ImageScaled[{x,y}] gives the position of a graphical object in terms of coordinates scaled to run from 0 to 1 across the whole image region in each direction. \nImageScaled[{dx,dy},{x₀,y₀}] gives a position obtained by starting at ordinary coordinates {x₀,y₀}, then moving by an image‐scaled offset {dx,dy}. ", 
"ImageSize" : "ImageSize is an option that specifies the overall size of an image to display for an object. ", 
"ImageSizeAction" : "ImageSizeAction is an option for Pane and related constructs that specifies what to do if the specified ImageSize setting does not match the size of the contents.", 
"ImageSizeMultipliers" : "ImageSizeMultipliers is an option that specifies how much smaller to render graphics that appear within other constructs.", 
"ImageSubtract" : "ImageSubtract[image,x] subtracts a constant amount x from each channel value in image.\nImageSubtract[image₁,image₂] gives an image in which each pixel is obtained by subtracting the values of the corresponding pixels in image₁ and image₂.", 
"ImageTake" : "ImageTake[image,n] gives an image consisting of the first n rows of image.\nImageTake[image,-n] gives an image consisting of the last n rows of image.\nImageTake[image,{row₁,row₂}] gives rows row₁ through row₂.\nImageTake[image,{row₁,row₂},{col₁,col₂}] gives the image that spans row₁ to row₂ and col₁ to col₂.", 
"ImageTransformation" : "ImageTransformation[image,function] gives an image in which each pixel at position {x,y} corresponds to the position function[{x,y}] in image.\nImageTransformation[image,function,size] gives an image of the specified size.", 
"ImageTrim" : "ImageTrim[image ,{{x₁,y₁},{x₂,y₂},…}] gives the subimage of image spanned by the specified points.\nImageTrim[image,{{x₁,y₁},{x₂,y₂},…},r] adds a margin of size r back to the resulting image.", 
"ImageType" : "ImageType[image] gives the underlying type of values used for each pixel element in the Image object image.", 
"ImageValue" : "ImageValue[image,{x,y}] gives the pixel value of image at position {x,y}.\nImageValue[image,{x,y},\"type\"] gives the pixel value converted to the specified type.", 
"Implies" : "Implies[p,q] represents the logical implication p⇒q. ", 
"Import" : "Import[\"file\"] imports data from a file, returning a complete Mathematica version of it. \nImport[\"file\",elements] imports the specified elements from a file.\nImport[\"http:\/\/url\",…] and Import[\"ftp:\/\/url\",…] imports from any accessible URL. ", 
"ImportAutoReplacements" : "ImportAutoReplacements is an option for cells that specifies which replacement rules Mathematica automatically applies when importing text.", 
"ImportString" : "ImportString[\"data\",\"format\"] imports data in the specified format from a string. \nImportString[\"data\",elements] imports the specified elements.\nImportString[\"data\"] attempts to determine the format of the string from its contents.", 
"In" : "In[n] is a global object that is assigned to have a delayed value of the nᵗʰ input line. ", 
"IncidenceGraph" : "IncidenceGraph[m] gives the graph with incidence matrix m.", 
"IncidenceMatrix" : "IncidenceMatrix[g] gives the vertex-edge incidence matrix of the graph g.", 
"IncludeConstantBasis" : "IncludeConstantBasis is an option for LinearModelFit and other fitting functions that specifies whether a constant term should be included if not explicitly given in the list of basis functions.", 
"IncludeFileExtension" : "IncludeFileExtension is an option for notebooks that specifies whether the suffix \".nb\" is automatically appended to a notebook’s name when it is first saved.", 
"IncludePods" : "IncludePods is an option for WolframAlpha that determines specific pod IDs to include in the results.", 
"IncludeSingularTerm" : "IncludeSingularTerm is an option for LerchPhi and Zeta. With IncludeSingularTerm -> True, terms involving Superscript[((k + a)²), -s\/2] with k + a == 0 are included. With IncludeSingularTerm -> False, they are not.", 
"Increment" : "x++ increases the value of x by 1, returning the old value of x. ", 
"IndependentEdgeSetQ" : "IndependentEdgeSetQ[g,elist] yields True if the edge list elist is an independent edge set of the graph g, and False otherwise.", 
"IndependentVertexSetQ" : "IndependentVertexSetQ[g,vlist] yields True if the vertex list vlist is an independent vertex set in the graph g and False otherwise.", 
"Indeterminate" : "Indeterminate is a symbol that represents a numerical quantity whose magnitude cannot be determined. ", 
"IndexGraph" : "IndexGraph[g] replaces the vertices of the graph g by its vertex indexes. \nIndexGraph[g,r] replaces the vertices with integers r,  r+1, ….", 
"Inequality" : "Inequality represents a sequence of relational statements.", 
"InexactNumberQ" : "InexactNumberQ[expr] returns True if expr is an inexact real or complex number, and returns False otherwise.", 
"InexactNumbers" : "InexactNumbers represents an option value for CoefficientDomain which specifies that the computation should be done using approximate coefficient arithmetic.", 
"Infinity" : "Infinity or ∞ is a symbol that represents a positive infinite quantity. ", 
"Infix" : "Infix[f[e₁,e₂,…]] prints with f[e₁,e₂,…] given in default infix form: e₁~f~e₂~f~e₃…. \nInfix[expr,h] prints with arguments separated by h: e₁ h e₂ h e₃…. ", 
"Information" : "Information[symbol] prints information about a symbol. ", 
"Inherited" : "Inherited is an option to Methods and Fields (in J\/Link) and NETTypeInfo (in .NET\/Link). The default, Inherited->True, means include information about members inherited from superclasses.", 
"Initialization" : "Initialization is an option for Dynamic, DynamicModule, Manipulate, and related constructs that specifies an expression to be evaluated when the construct is first used or displayed. ", 
"InitializationCell" : "InitializationCell is an option for Cell that specifies whether the cell should be tagged to be evaluated by the Mathematica kernel when the notebook that contains it is opened. ", 
"InitializationCellEvaluation" : "InitializationCellEvaluation is an option for notebooks that specifies whether initialization cells in a notebook are automatically evaluated when the notebook is opened.", 
"InitializationCellWarning" : "InitializationCellWarning is an option for notebooks that specifies whether a warning should be given when a notebook containing initialization cells is opened.", 
"Inner" : "Inner[f,list₁,list₂,g] is a generalization of Dot in which f plays the role of multiplication and g of addition. ", 
"Inpaint" : "Inpaint[image,region] retouches parts of image that correspond to nonzero elements in region.", 
"Input" : "Input[] interactively reads in one Mathematica expression. \nInput[prompt] requests input, displaying prompt as a \"prompt\".\nInput[prompt,init] in a notebook front end uses init as the initial contents of the input field.", 
"InputAliases" : "InputAliases is an option for cells and notebooks which specifies additional Esc name Esc aliases to be allowed on input. ", 
"InputAssumptions" : "InputAssumptions is an option for WolframAlpha that specifies assumptions for current query input.", 
"InputAutoReplacements" : "InputAutoReplacements is an option for cells and notebooks which specifies strings of characters that should be replaced immediately on input. ", 
"InputField" : "InputField[] represents a blank editable input field. \nInputField[x] represents an editable input field that currently contains the expression x. \nInputField[Dynamic[x]] takes the contents of the input field to be the dynamically updated current value of x, with the value of x being reset if new contents are entered. \nInputField[x,String] represents an input field whose contents are taken to be a string. \nInputField[x,Number] represents an input field whose contents are taken to be a number. \nInputField[x,type] represents an input field whose contents are taken to be of the specified type. ", 
"InputForm" : "InputForm[expr] prints as a version of expr suitable for input to Mathematica. ", 
"InputNamePacket" : "InputNamePacket[string] is a MathLink packet that contains in string the name to be assigned to the next input.", 
"InputNotebook" : "InputNotebook[] gives the current notebook into which keyboard input in the front end will be directed. ", 
"InputPacket" : "InputPacket[] is a MathLink packet that indicates a prompt for input as generated by Input.", 
"InputStream" : "InputStream[\"name\",n] is an object that represents an input stream for functions such as Read and Find. ", 
"InputString" : "InputString[] interactively reads in a character string. \nInputString[prompt] requests input, displaying prompt as a \"prompt\". \nInputString[prompt,init] in a notebook front end uses init as the initial contents of the input field.", 
"InputStringPacket" : "InputStringPacket[] is a MathLink packet that requests input in string form.", 
"InputToBoxFormPacket" : "InputToBoxFormPacket is an internal symbol used for formatting.", 
"Insert" : "Insert[list,elem,n] inserts elem at position n in list. If n is negative, the position is counted from the end. \nInsert[expr,elem,{i,j,…}] inserts elem at position {i,j,…} in expr. \nInsert[expr,elem,{{i₁,j₁,…},{i₂,j₂,…},…}] inserts elem at several positions. ", 
"InsertResults" : "InsertResults is an option for NotebookEvaluate that determines whether to place the results of evaluation in the notebook being evaluated", 
"Inset" : "Inset[obj] represents an object obj inset in a graphic. \nInset[obj,pos] specifies that the inset should be placed at position pos in the graphic. \nInset[obj,pos,opos] aligns the inset so that position opos in the object lies at position pos in the enclosing graphic. \nInset[obj,pos,opos,size] specifies the size of the inset in the coordinate system of the enclosing graphic. \nInset[obj,pos,opos,size,dirs] specifies that the axes of the inset should be oriented in directions dirs. ", 
"Install" : "Install[\"name\"] starts a MathLink-compatible external program and installs Mathematica definitions to call functions in it. ", 
"InstallJava" : "InstallJava[] launches the Java runtime and prepares it to be used from Mathematica. Only one Java runtime is ever launched; subsequent calls to InstallJava after the first have no effect.", 
"InstallService" : "InstallService[\"url\"] installs the web service operations in the WSDL description at the URL given.\nInstallService[\"url\", \"context`\"] installs web service operations, creating functions in the specified context.", 
"InstallServiceOperation" : " InstallServiceOperation [ name , endpoint , arguments , options ] creates a function for the web service operation using the end point, arguments, and options. ", 
"InString" : "InString[n] is a global object that is assigned to be the text of the nᵗʰ input line. ", 
"Integer" : "Integer is the head used for integers. ", 
"IntegerDigits" : "IntegerDigits[n] gives a list of the decimal digits in the integer n. \nIntegerDigits[n,b] gives a list of the base b digits in the integer n. \nIntegerDigits[n,b,len] pads the list on the left with zeros to give a list of length len. ", 
"IntegerExponent" : "IntegerExponent[n,b] gives the highest power of b that divides n. ", 
"IntegerLength" : "IntegerLength[n] gives the number of digits in the base 10 representation of the integer n.\nIntegerLength[n,b] gives the number of digits in the base b representation of n.", 
"IntegerPart" : "IntegerPart[x] gives the integer part of x. ", 
"IntegerPartitions" : "IntegerPartitions[n] gives a list of all possible ways to partition the integer n into smaller integers. \nIntegerPartitions[n,k] gives partitions into at most k integers. \nIntegerPartitions[n,{k}] gives partitions into exactly k integers. \nIntegerPartitions[n,{kₘᵢₙ,kₘₐₓ}] gives partitions into between kₘᵢₙ and kₘₐₓ integers. \nIntegerPartitions[n,kspec,{s₁,s₂,…}] gives partitions involving only the sᵢ. \nIntegerPartitions[n,kspec,sspec,m] limits the result to the first m partitions. ", 
"IntegerQ" : "IntegerQ[expr] gives True if expr is an integer, and False otherwise. ", 
"Integers" : "Integers represents the domain of integers, as in x∈Integers. ", 
"IntegerString" : "IntegerString[n] gives a string consisting of the decimal digits in the integer n. \nIntegerString[n,b] gives a string consisting of the base b digits in the integer n. \nIntegerString[n,b,len] pads the string on the left with zero digits to give a string of length len. \nIntegerString[n,\"Roman\"] gives the Roman numeral form of n.", 
"Integrate" : "Integrate[f,x] gives the indefinite integral ∫f dx. \nIntegrate[f,{x,xₘᵢₙ,xₘₐₓ}] gives the definite integral Subsuperscript[ ∫, xₘᵢₙ, xₘₐₓ] f dx. \nIntegrate[f,{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ},…] gives the multiple integral Subsuperscript[ ∫, xₘᵢₙ, xₘₐₓ]dxSubsuperscript[ ∫, yₘᵢₙ, yₘₐₓ]dy … f. ", 
"InteractiveTradingChart" : "InteractiveTradingChart[{{date₁,{open₁,high₁,low₁,close₁,volume₁}},…}] makes a chart showing prices and volume for each date. \nInteractiveTradingChart[{\"name\",daterange}] makes a financial chart for the financial entity \"name\" over the daterange. \nInteractiveTradingChart[{…},{ind₁,ind₂,…}] makes a financial chart with indicators ind₁, ind₂, …. ", 
"Interleaving" : "Interleaving is an option for Image and related functions that specifies whether data corresponding to different channels in an object such as an image should be interleaved.", 
"Internal`BlockFlatten" : "BlockFlatten[tensor, {{p11, p12, ...}, {p21,\np22, ...}, {pk1, pk2, ...}}] is a generalization of Flatten which collapses\neach of several sets of levels to a single level, without loss of elements. \nThe levels {p11, p12, ...} are collapsed to a single level, the levels {p21,\np22, ...} are collapsed to another single level, and so on. All the pij must\nbe distinct nonzero integers representing levels from 1 to\nTensorRank[tensor].  A negative pij simply specifies a level counting from\nthe bottom level of the tensor, i.e. R = TensorRank[tensor].  Thus, -1 is\nequivalent to R, -2 is equivalent to (R - 1), and -k is equivalent to (R + 1\n+ k).  The pij need not span all levels of the tensor; levels not listed will\nnot be merged with other levels, so will emerge unscathed.", 
"InternallyBalancedDecomposition" : "InternallyBalancedDecomposition[ss] yields the internally balanced decomposition of the StateSpaceModel object ss. The result is a list {s,ib} where s is the similarity transformation matrix and ib is the internally balanced form of ss.", 
"Internal`PartitionRagged" : "PartitionRagged[list, {n1,...,nk}] partitions list into ragged array with rows of \nlength n1, ..., nk. PartitionRagged[ array, {{n11,...,},...,{nm1,...}}] partitions\ndepth m array along each dimension.", 
"InterpolatingFunction" : "InterpolatingFunction[domain,table] represents an approximate function whose values are found by interpolation. ", 
"InterpolatingPolynomial" : "InterpolatingPolynomial[{f₁,f₂,…},x] constructs an interpolating polynomial in x which reproduces the function values fᵢ at successive integer values 1, 2, … of x. \nInterpolatingPolynomial[{{x₁,f₁},{x₂,f₂},…},x] constructs an interpolating polynomial for the function values fᵢ corresponding to x values xᵢ.\nInterpolatingPolynomial[{{{x₁,y₁,…},f₁},{{x₂,y₂,…},f₂},…},{x,y,…}] constructs a multidimensional interpolating polynomial in the variables x, y, ….\nInterpolatingPolynomial[{{{x₁,…},f₁,df₁,…},…},{x,…}] constructs an interpolating polynomial that reproduces derivatives as well as function values.", 
"Interpolation" : "Interpolation[{f₁,f₂,…}] constructs an interpolation of the function values fᵢ, assumed to correspond to x values 1, 2, … . \nInterpolation[{{x₁,f₁},{x₂,f₂},…}] constructs an interpolation of the function values fᵢ corresponding to x values xᵢ.\nInterpolation[{{{x₁,y₁,…},f₁},{{x₂,y₂,…},f₂},…}] constructs an interpolation of multidimensional data.\nInterpolation[{{{x₁,…},f₁,df₁,…},…}] constructs an interpolation that reproduces derivatives as well as function values.\nInterpolation[data,x] find an interpolation of data at the point x.", 
"InterpolationOrder" : "InterpolationOrder is an option for Interpolation, as well as ListLinePlot, ListPlot3D, ListContourPlot, and related functions, that specifies what order of interpolation to use.", 
"InterpolationPoints" : "InterpolationPoints is an option to SmoothKernelDistribution and FunctionInterpolation that specifies the initial number of interpolation points to use. ", 
"Interpretation" : "Interpretation[e,expr] represents an object that displays as e, but is interpreted as the unevaluated form of expr if supplied as input. \nInterpretation[{x=x₀,y=y₀,…},e,expr] allows local variables x, y, … in e and expr.", 
"InterpretationBox" : "InterpretationBox[boxes,expr] is a low-level box construct that displays as boxes but is interpreted on input as expr. ", 
"InterpretationBoxOptions" : "InterpretationBoxOptions->{opt₁->val₁,opt₂->val₂,…} is an option for selections that specifies settings for InterpretationBox constructs.", 
"InterpretTemplate" : "InterpretTemplate is an experimental function used for interpreting Mathematica input.", 
"InterquartileRange" : "InterquartileRange[list] gives the difference between the upper and lower quartiles for the elements in list.\nInterquartileRange[dist] gives the difference between the upper and lower quartiles for the symbolic distribution dist.", 
"Interrupt" : "Interrupt[] generates an interrupt. ", 
"Intersection" : "Intersection[list₁,list₂,…] gives a sorted list of the elements common to all the listᵢ. ", 
"Interval" : "Interval[{min,max}] represents the range of values between min and max. \nInterval[{min₁,max₁},{min₂,max₂},…] represents the union of the ranges min₁ to max₁, min₂ to max₂, …. ", 
"IntervalIntersection" : "IntervalIntersection[interval₁,interval₂,…] gives the interval representing all points common to each of the intervalᵢ. ", 
"IntervalMemberQ" : "IntervalMemberQ[interval,x] gives True if the number x lies within the specified interval, and False otherwise. \nIntervalMemberQ[interval₁,interval₂] gives True if interval₂ is completely contained within interval₁. ", 
"IntervalUnion" : "IntervalUnion[interval₁,interval₂,…] gives the interval representing the set of all points in any of the intervalᵢ. ", 
"Inverse" : "Inverse[m] gives the inverse of a square matrix m. ", 
"InverseBetaRegularized" : "InverseBetaRegularized[s,a,b] gives the inverse of the regularized incomplete beta function. ", 
"InverseCDF" : "InverseCDF[dist,q] gives the inverse of the cumulative distribution function for the symbolic distribution dist as a function of the variable q.", 
"InverseChiSquareDistribution" : "InverseChiSquareDistribution[ν] represents an inverse χ² distribution with ν degrees of freedom.\nInverseChiSquareDistribution[ν,ξ] represents a scaled inverse χ² distribution with ν degrees of freedom and scale ξ.", 
"InverseContinuousWaveletTransform" : "InverseContinuousWaveletTransform[cwd] gives the inverse continuous wavelet transform of a ContinuousWaveletData object cwd. \nInverseContinuousWaveletTransform[cwd,wave] gives the inverse transform using the wavelet wave.\nInverseContinuousWaveletTransform[cwd,wave,octvoc] gives the inverse transform from the wavelet coefficients specified by octvoc.", 
"InverseDistanceTransform" : "InverseDistanceTransform[image] gives the inverse distance transform of image, returning the result as a binary image.", 
"InverseEllipticNomeQ" : "InverseEllipticNomeQ[q] gives the parameter m corresponding to the nome q in an elliptic function. ", 
"InverseErf" : "InverseErf[s] gives the inverse error function obtained as the solution for z in s=erf(z). ", 
"InverseErfc" : "InverseErfc[s] gives the inverse complementary error function obtained as the solution for z in s=erfc(z). ", 
"InverseFourier" : "InverseFourier[list] finds the discrete inverse Fourier transform of a list of complex numbers. ", 
"InverseFourierCosTransform" : "InverseFourierCosTransform[expr,ω,t] gives the symbolic inverse Fourier cosine transform of expr. \nInverseFourierCosTransform[expr,{ω₁,ω₂,…},{t₁,t₂,…}] gives the multidimensional inverse Fourier cosine transform of expr. ", 
"InverseFourierSequenceTransform" : "InverseFourierSequenceTransform[expr,ω,n] gives the inverse discrete-time Fourier transform of expr.\nInverseFourierSequenceTransform[expr,{ω₁,ω₂,…},{n₁,n₂,…}] gives the multidimensional inverse Fourier sequence transform.", 
"InverseFourierSinTransform" : "InverseFourierSinTransform[expr,ω,t] gives the symbolic inverse Fourier sine transform of expr. \nInverseFourierSinTransform[expr,{ω₁,ω₂,…},{t₁,t₂,…}] gives the multidimensional inverse Fourier sine transform of expr. ", 
"InverseFourierTransform" : "InverseFourierTransform[expr,ω,t] gives the symbolic inverse Fourier transform of expr. \nInverseFourierTransform[expr,{ω₁,ω₂,…},{t₁,t₂,…}] gives the multidimensional inverse Fourier transform of expr. ", 
"InverseFunction" : "InverseFunction[f] represents the inverse of the function f, defined so that InverseFunction[f][y] gives the value of x for which f[x] is equal to y. \nInverseFunction[f,n,tot] represents the inverse with respect to the nᵗʰ argument when there are tot arguments in all. ", 
"InverseFunctions" : "InverseFunctions is an option for Solve and related functions that specifies whether inverse functions should be used. ", 
"InverseGammaDistribution" : "InverseGammaDistribution[α,β] represents an inverse gamma distribution with shape parameter α and scale parameter β.\nInverseGammaDistribution[α,β,γ,μ] represents a generalized inverse gamma distribution with shape parameters α and γ, scale parameter β, and location parameter μ.", 
"InverseGammaRegularized" : "InverseGammaRegularized[a,s] gives the inverse of the regularized incomplete gamma function. ", 
"InverseGaussianDistribution" : "InverseGaussianDistribution[μ,λ] represents an inverse Gaussian distribution with mean μ and scale parameter λ.\nInverseGaussianDistribution[μ,λ,θ] represents a generalized inverse Gaussian distribution with parameters μ, λ, and θ.", 
"InverseGudermannian" : "InverseGudermannian[z] gives the inverse Gudermannian function gd⁻¹(z).", 
"InverseHaversine" : "InverseHaversine[z] gives the inverse haversine function hav⁻¹(z).", 
"InverseJacobiCD" : "InverseJacobiCD[v,m] gives the inverse Jacobi elliptic function cd⁻¹(v|m).", 
"InverseJacobiCN" : "InverseJacobiCN[v,m] gives the inverse Jacobi elliptic function cn⁻¹(v|m).", 
"InverseJacobiCS" : "InverseJacobiCS[v,m] gives the inverse Jacobi elliptic function cs⁻¹(v|m).", 
"InverseJacobiDC" : "InverseJacobiDC[v,m] gives the inverse Jacobi elliptic function dc⁻¹(v|m).", 
"InverseJacobiDN" : "InverseJacobiDN[v,m] gives the inverse Jacobi elliptic function dn⁻¹(v|m).", 
"InverseJacobiDS" : "InverseJacobiDS[v,m] gives the inverse Jacobi elliptic function ds⁻¹(v|m).", 
"InverseJacobiNC" : "InverseJacobiNC[v,m] gives the inverse Jacobi elliptic function nc⁻¹(v|m).", 
"InverseJacobiND" : "InverseJacobiND[v,m] gives the inverse Jacobi elliptic function nd⁻¹(v|m).", 
"InverseJacobiNS" : "InverseJacobiNS[v,m] gives the inverse Jacobi elliptic function ns⁻¹(v|m).", 
"InverseJacobiSC" : "InverseJacobiSC[v,m] gives the inverse Jacobi elliptic function sc⁻¹(v|m).", 
"InverseJacobiSD" : "InverseJacobiSD[v,m] gives the inverse Jacobi elliptic function sd⁻¹(v|m).", 
"InverseJacobiSN" : "InverseJacobiSN[v,m] gives the inverse Jacobi elliptic function sn⁻¹(v|m).", 
"InverseLaplaceTransform" : "InverseLaplaceTransform[expr,s,t] gives the inverse Laplace transform of expr. \nInverseLaplaceTransform[expr,{s₁,s₂,…},{t₁,t₂,…}] gives the multidimensional inverse Laplace transform of expr. ", 
"InversePermutation" : "InversePermutation[perm] returns the inverse of permutation perm.", 
"InverseRadon" : "InverseRadon[image] gives the inverse discrete Radon transform of image.\nInverseRadon[image,{w,h}] specifies the width w and the height h of the resulting image.", 
"InverseSeries" : "InverseSeries[s] takes the series s, and gives a series for the inverse of the function represented by s. \nInverseSeries[s,x] uses the variable x in the inverse series.", 
"InverseSurvivalFunction" : "InverseSurvivalFunction[dist,q] gives the inverse of the survival function for the symbolic distribution dist as a function of the variable q.", 
"InverseWaveletTransform" : "InverseWaveletTransform[dwd] gives the inverse wavelet transform of a DiscreteWaveletData object dwd.\nInverseWaveletTransform[dwd,wave] gives the inverse transform using the wavelet wave.\nInverseWaveletTransform[dwd,wave,wind] gives the inverse transform from the wavelet coefficients specified by wind.", 
"InverseWeierstrassP" : "InverseWeierstrassP[p,{g₂,g₃}] gives a value of u for which the Weierstrass function ℘(u;g₂,g₃) is equal to p. ", 
"InverseZTransform" : "InverseZTransform[expr,z,n] gives the inverse Z transform of expr. \nInverseZTransform[expr,{z₁,z₂,…},{n₁,n₂,…}] gives the multiple inverse Z transform of expr.", 
"Invisible" : "Invisible[expr] displays as space that is the same size as the formatted version of expr.", 
"InvokeServiceOperation" : " InvokeServiceOperation [ 2   2\n   ,   url, request , options ] invokes a web service operation using the request message  request . The message is sent to the end point specified in  2   2\n   ,   url. \n InvokeServiceOperation [ symbol , parameters , options ] builds a request message using  parameters  and invokes a web service operation using the request message and information linked with  symbol . \n InvokeServiceOperation [ symbol , request , options ] invokes a web service operation using the request message  request  and information linked with  symbol . ", 
"IrreduciblePolynomialQ" : "IrreduciblePolynomialQ[poly] tests whether poly is an irreducible polynomial over the rationals.\nIrreduciblePolynomialQ[poly,Modulus->p] tests whether poly is irreducible modulo a prime p.\nIrreduciblePolynomialQ[poly,Extension->{a₁,a₂,…}] tests whether poly is irreducible over the field extension generated by the algebraic numbers aᵢ.\nIrreduciblePolynomialQ[poly,Extension->All] tests whether poly is absolutely irreducible over the complex numbers.", 
"IsolatingInterval" : "IsolatingInterval[a] gives a rational isolating interval for the algebraic number a.\nIsolatingInterval[a,dx] gives an isolating interval of width at most dx.", 
"IsomorphicGraphQ" : "IsomorphicGraphQ[g₁,g₂] yields True if the graphs g₁ and g₂ are isomorphic, and False otherwise.", 
"IsotopeData" : "IsotopeData[{Z,A},\"property\"] gives the value of the specified property for the isotope with atomic number Z and mass number A.\nIsotopeData[\"name\",\"property\"] gives the value of the property for the named isotope.", 
"Italic" : "Italic represents an italic font slant.", 
"Item" : "Item[expr,options] represents an item within constructs such as Grid, Overlay, and Manipulate that displays with expr as the content, and with the specified options applied to the region containing expr. ", 
"ItemSize" : "ItemSize is an option for Grid, Column, and related constructs that specifies the sizes to allow for items.", 
"ItemStyle" : "ItemStyle is an option for Grid, Column, and related constructs that specifies styles to use for items.", 
"JaccardDissimilarity" : "JaccardDissimilarity[u,v] gives the Jaccard dissimilarity between Boolean vectors u and v.", 
"JacobiAmplitude" : "JacobiAmplitude[u,m] gives the amplitude am(u|m) for Jacobi elliptic functions. ", 
"Jacobian" : "Jacobian is an option for FindRoot. Jacobian -> Automatic attempts symbolic computation of the Jacobian of the system of functions whose root is being sought. A typical setting is Jacobian -> {{2 x, Sign[y]}, {y, x}}.", 
"JacobiCD" : "JacobiCD[u,m] gives the Jacobi elliptic function cd(u|m).", 
"JacobiCN" : "JacobiCN[u,m] gives the Jacobi elliptic function cn(u|m).", 
"JacobiCS" : "JacobiCS[u,m] gives the Jacobi elliptic function cs(u|m).", 
"JacobiDC" : "JacobiDC[u,m] gives the Jacobi elliptic function dc(u|m).", 
"JacobiDN" : "JacobiDN[u,m] gives the Jacobi elliptic function dn(u|m).", 
"JacobiDS" : "JacobiDS[u,m] gives the Jacobi elliptic function ds(u|m).", 
"JacobiNC" : "JacobiNC[u,m] gives the Jacobi elliptic function nc(u|m).", 
"JacobiND" : "JacobiND[u,m] gives the Jacobi elliptic function nd(u|m).", 
"JacobiNS" : "JacobiNS[u,m] gives the Jacobi elliptic function ns(u|m).", 
"JacobiP" : "JacobiP[n,a,b,x] gives the Jacobi polynomial P Subsuperscript[, n, (a,b)](x). ", 
"JacobiSC" : "JacobiSC[u,m] gives the Jacobi elliptic function sc(u|m).", 
"JacobiSD" : "JacobiSD[u,m] gives the Jacobi elliptic function sd(u|m).", 
"JacobiSN" : "JacobiSN[u,m] gives the Jacobi elliptic function sn(u|m).", 
"JacobiSymbol" : "JacobiSymbol[n,m] gives the Jacobi symbol ((n)\/(m)). ", 
"JacobiZeta" : "JacobiZeta[ϕ,m] gives the Jacobi zeta function Z(ϕ|m). ", 
"JankoGroupJ1" : "JankoGroupJ1[] represents the sporadic simple Janko group J₁.", 
"JankoGroupJ2" : "JankoGroupJ2[] represents the sporadic simple Janko group J₂.", 
"JankoGroupJ3" : "JankoGroupJ3[] represents the sporadic simple Janko group J₃.", 
"JankoGroupJ4" : "JankoGroupJ4[] represents the sporadic simple Janko group J₄.", 
"JarqueBeraALMTest" : "JarqueBeraALMTest[data] tests whether data is normally distributed using the Jarque–Bera ALM test.\nJarqueBeraALMTest[data,\"property\"] returns the value of \"property\".", 
"JavaBlock" : "JavaBlock[expr] causes all new Java objects returned to Mathematica during the evaluation of expr to be released when expr finishes. It is an error to refer to such an object after JavaBlock ends. See the usage message for ReleaseJavaObject for more information. JavaBlock only affects new objects, not additional references to ones that have previously been seen. If a JavaBlock returns a single JavaObject as a result, that object will not be released. JavaBlock is a way to mark a set of objects as temporary so they can be automatically cleaned up when the block of code ends.", 
"JavaClassPath" : "JavaClassPath[] returns the class search path in use by the Java runtime. This includes classes specified via the CLASSPATH environment variable (if any), directories and files added by the user with AddToClassPath, and those directories automatically searched by J\/Link. The result is a list of strings specifying directories and .jar or .zip files, in the same order that they will be searched for classes by the Java runtime.", 
"JavaLink" : "JavaLink[] returns the MathLink LinkObject that is used to communicate with the J\/Link Java runtime. It will return Null if Java is not running.", 
"JavaNew" : "JavaNew[javaclass, args] constructs a Java object of the specified JavaClass, passing the args to its constructor. You can also specify the class name instead of a JavaClass: JavaNew[\"classname\", args]. With this second form, the class will be loaded first if necessary.", 
"JavaObjectQ" : "JavaObjectQ[expr] gives True if expr is a reference to a Java object or Null, and gives False otherwise.", 
"JohnsonDistribution" : "JohnsonDistribution[\"SB\",γ,δ,μ,σ] represents a bounded Johnson distribution with shape parameters γ, δ, location parameter μ, and scale parameter σ.\nJohnsonDistribution[\"SL\",γ,δ,μ,σ] represents a semi-bounded Johnson distribution.\nJohnsonDistribution[\"SU\",γ,δ,μ,σ] represents an unbounded Johnson distribution.\nJohnsonDistribution[\"SN\",γ,δ,μ,σ] represents a normal Johnson distribution.", 
"Join" : "Join[list₁,list₂,…] concatenates lists or other expressions that share the same head.\nJoin[list₁,list₂,…,n] joins the objects at level n in each of the listᵢ.", 
"Joined" : "Joined is an option for ListPlot and related functions that specifies whether points in each dataset should be joined into a line, or should be plotted as separate points. ", 
"JoinedCurve" : "JoinedCurve[{segment₁,segment₂,…}] represents a curve consisting of segment₁ followed by segment₂ etc. \nJoinedCurve[{component₁,component₂,…}] represents a list of separate component curves component₁, component₂, etc. ", 
"JoinForm" : "JoinForm[type] is a graphics directive that specifies what type of joins should be used to connect segments of lines, tubes, edges, and related primitives.", 
"JordanDecomposition" : "JordanDecomposition[m] yields the Jordan decomposition of a square matrix m. The result is a list {s,j} where s is a similarity matrix and j is the Jordan canonical form of m.", 
"JordanModelDecomposition" : "JordanModelDecomposition[ss] yields the Jordan decomposition of a StateSpaceModel object ss. The result is a list {s,jc} where s is a similarity matrix and jc is the Jordan canonical form of ss.", 
"K" : "K is a default generic name for a summation index in a symbolic sum.", 
"KagiChart" : "KagiChart[{{date₁,p₁},{date₂,p₂},…}] makes a Kagi chart with prices pᵢ at date dateᵢ.\nKagiChart[{\"name\",daterange}] makes a Kagi chart of closing prices for the financial entity \"name\" over the date range daterange.\nKagiChart[{…},rt] makes a Kagi chart with reversal threshold rt.", 
"KalmanEstimator" : "KalmanEstimator[ss,{w,v}] constructs the Kalman estimator for the StateSpaceModel object ss with process and measurement noise covariance matrices w and v. \nKalmanEstimator[ss,{w,v,h}] includes the cross-covariance matrix h.\nKalmanEstimator[{ss,sensors},{…}] specifies sensors as the noisy measurements of ss.\nKalmanEstimator[{ss,sensors,dinputs},{…}] specifies dinputs as the deterministic inputs of ss.", 
"KarhunenLoeveDecomposition" : "KarhunenLoeveDecomposition[{a₁,a₂,…}] gives the Karhunen–Loeve transform {b₁,b₂,…} of the numerical arrays {a₁,a₂,…} and the transformation matrix m, returning the result in the form {{b₁,b₂,…},m}.\nKarhunenLoeveDecomposition[{a₁,a₂,…},m] uses the inverse of the matrix m for transforming the {a₁,a₂,…}.", 
"KaryTree" : "KaryTree[n] gives a binary tree with n vertices.\nKaryTree[n,k] gives a k-ary tree with n vertices.", 
"KatzCentrality" : "KatzCentrality[g,α] gives a list of Katz centralities for the vertices in the graph g and weight α.\nKatzCentrality[g,α,β] gives a list of Katz centralities using weight α and initial centralities β.", 
"KCoreComponents" : "KCoreComponents[g,k] gives the k-core components of the underlying simple graph of g.\nKCoreComponents[g,k,\"InDegree\"] gives the k-core components with vertex in-degrees at least k.\nKCoreComponents[g,k,\"OutDegree\"] gives the k-core components with vertex out-degrees at least k.", 
"KDistribution" : "KDistribution[ν,w] represents a K distribution with shape parameters ν and w.", 
"KelvinBei" : "KelvinBei[z] gives the Kelvin function bei(z).\nKelvinBei[n,z] gives the Kelvin function beiₙ(z). ", 
"KelvinBer" : "KelvinBer[z] gives the Kelvin function ber(z).\nKelvinBer[n,z] gives the Kelvin function berₙ(z). ", 
"KelvinKei" : "KelvinKei[z] gives the Kelvin function kei(z).\nKelvinKei[n,z] gives the Kelvin function keiₙ(z). ", 
"KelvinKer" : "KelvinKer[z] gives the Kelvin function ker(z).\nKelvinKer[n,z] gives the Kelvin function kerₙ(z). ", 
"KernelMixtureDistribution" : "KernelMixtureDistribution[{x₁,x₂,…}] represents a kernel mixture distribution based on the data values xᵢ.\nKernelMixtureDistribution[{{x₁,y₁,…},{x₂,y₂,…},…}] represents a multivariate kernel mixture distribution based on data values {xᵢ,yᵢ,…}.\nKernelMixtureDistribution[…,bw] represents a kernel mixture distribution with bandwidth bw.\nKernelMixtureDistribution[…,bw,ker] represents a kernel mixture distribution with bandwidth bw and smoothing kernel ker.", 
"KernelObject" : "KernelObject[n,name,…] represents a kernel available for parallel computing.", 
"Kernels" : "Kernels[] gives the list of running kernels available for parallel computing.", 
"Khinchin" : "Khinchin is Khinchin's constant, with numerical value ≃2.68545. ", 
"KirchhoffGraph" : "KirchhoffGraph[kmat] gives the graph with Kirchhoff matrix kmat.\nKirchhoffGraph[{v₁,v₂,…},kmat] gives the graph with vertices vᵢ and Kirchhoff matrix kmat.", 
"KirchhoffMatrix" : "KirchhoffMatrix[g] gives the Kirchhoff matrix of the graph g.", 
"KleinInvariantJ" : "KleinInvariantJ[τ] gives the Klein invariant modular elliptic function J(τ). ", 
"KnightTourGraph" : "KnightTourGraph[m,n] gives a Knight's tour graph on an m⨯n chessboard.", 
"KnotData" : "KnotData[knot,\"property\"] gives the specified property for a knot.\nKnotData[knot] gives an image of the knot.\nKnotData[\"class\"] gives a list of knots in the specified class.", 
"KolmogorovSmirnovTest" : "KolmogorovSmirnovTest[data] tests whether data is normally distributed using the Kolmogorov–Smirnov test.\nKolmogorovSmirnovTest[data,dist] tests whether data is distributed according to dist using the Kolmogorov–Smirnov test.\nKolmogorovSmirnovTest[data,dist,\"property\"] returns the value of \"property\".", 
"KroneckerDelta" : "KroneckerDelta[n₁,n₂,…] gives the Kronecker delta Subscript[δ,n₁ n₂ …], equal to 1 if all the nᵢ are equal, and 0 otherwise. ", 
"KroneckerProduct" : "KroneckerProduct[m₁,m₂,…] constructs the Kronecker product of the arrays mᵢ.", 
"KroneckerSymbol" : "KroneckerSymbol[n,m] gives the Kronecker symbol ((n)\/(m)). ", 
"KuiperTest" : "KuiperTest[data] tests whether data is normally distributed using the Kuiper test.\nKuiperTest[data,dist] tests whether data is distributed according to dist using the Kuiper test.\nKuiperTest[data,dist,\"property\"] returns the value of \"property\".", 
"KumaraswamyDistribution" : "KumaraswamyDistribution[α,β] represents a Kumaraswamy distribution with shape parameters α and β.", 
"Kurtosis" : "Kurtosis[list] gives the coefficient of kurtosis for the elements in list.\nKurtosis[dist] gives the coefficient of kurtosis for the symbolic distribution dist.", 
"KuwaharaFilter" : "KuwaharaFilter[image,r] computes for each pixel p in image the variance of the values in the four (r+1)×(r+1) squares that have p as a corner, and replaces p with the mean of the values of the square with least variance.", 
"Label" : "Label[tag] represents a point in a compound expression to which control can be transferred using Goto. ", 
"Labeled" : "Labeled[expr,lbl] displays expr labeled with lbl. \nLabeled[expr,lbl,pos] places lbl at a position specified by pos. \nLabeled[expr,{lbl₁,lbl₂,…},{pos₁,…}] places the lblᵢ at positions posᵢ. \nLabeled[expr,{lbl₁,lbl₂,lbl₃,lbl₄},All] places the lblᵢ at the bottom, left, top, and right, respectively. ", 
"LabelingFunction" : "LabelingFunction is an option for charting functions that specifies a function to apply to determine labeling of chart elements.", 
"LabelStyle" : "LabelStyle is an option for formatting and related constructs that specifies the style to use in displaying their label-like elements. ", 
"LaguerreL" : "LaguerreL[n,x] gives the Laguerre polynomial Lₙ(x). \nLaguerreL[n,a,x] gives the generalized Laguerre polynomial L Subsuperscript[, n, a](x). ", 
"LandauDistribution" : "LandauDistribution[μ,σ] represents a Landau distribution with location parameter μ and scale parameter σ.", 
"Language" : "Language is a global option that specifies the language in which menus, dialog boxes, error messages, and help files are displayed.", 
"LanguageCategory" : "LanguageCategory is an option for Cell that determines in what category of language the contents of the cell should be assumed to be for purposes of spell checking and hyphenation. ", 
"LaplaceDistribution" : "LaplaceDistribution[μ,β] represents a Laplace double-exponential distribution with mean μ and scale parameter β.", 
"LaplaceTransform" : "LaplaceTransform[expr,t,s] gives the Laplace transform of expr. \nLaplaceTransform[expr,{t₁,t₂,…},{s₁,s₂,…}] gives the multidimensional Laplace transform of expr. ", 
"Laplacian" : " Laplacian [ f ] gives the Laplacian, Superscript[ ∇,  2] f , of the scalar function or vector field  f  in the default coordinate system. \n Laplacian [ f , coordsys ] gives the Laplacian of  f  in the coordinate system  coordsys .", 
"LaplacianFilter" : "LaplacianFilter[image,r] convolves image with a range r Laplacian kernel.\nLaplacianFilter[image,{r₁,r₂}] uses ranges rᵢ in the vertical and horizontal directions.\nLaplacianFilter[data,…] applies Laplacian filtering to an array of data.", 
"LaplacianGaussianFilter" : "LaplacianGaussianFilter[image,r] convolves image with a Laplacian-of-Gaussian kernel of pixel radius r.\nLaplacianGaussianFilter[image,{r,σ}]  convolves image with a Laplacian-of-Gaussian kernel of radius r and standard deviation σ.\nLaplacianGaussianFilter[data,…] applies Laplacian-of-Gaussian filtering to an array of data.", 
"Large" : "Large is a style or option setting that specifies that objects should be large.", 
"Larger" : "Larger is a style or option setting that specifies that objects should be larger.", 
"Last" : "Last[expr] gives the last element in expr. ", 
"Latitude" : "Latitude[pos] gives the latitude in degrees of a geographic position specified by pos.\nLatitude[pos,datum] gives the latitude referring to the specified geodetic datum.", 
"LatitudeLongitude" : "LatitudeLongitude[pos] gives a list of the latitude and longitude in degrees of a geographic position specified by pos.\nLatitudeLongitude[pos,datum] gives the latitude and longitude referring to the specified geodetic datum.", 
"LatticeData" : "LatticeData[lattice,\"property\"] gives the specified property for a lattice.\nLatticeData[n] gives a list of named lattices of dimension n.", 
"LatticeReduce" : "LatticeReduce[{v₁,v₂,…}] gives a reduced basis for the set of vectors vᵢ. ", 
"Launch" : "Launch is a setting for the LinkMode option of LinkOpen.  LinkMode->Launch causes a link to be created by launching another program.", 
"LaunchKernels" : "LaunchKernels[] launches all currently configured parallel subkernels.\nLaunchKernels[n] launches n local subkernels on the current computer.\nLaunchKernels[des] launches a subkernel with the given description.\nLaunchKernels[{des₁,des₂,…}] launches several subkernels with the given descriptions.", 
"LayeredGraphPlot" : "LayeredGraphPlot[{Subscript[v,i1]->Subscript[v,j1],Subscript[v,i2]->Subscript[v,j2],…}] generates a layered plot of the graph in which vertex vᵢₖ is connected to vertex Subscript[v,jk].\nLayeredGraphPlot[{{Subscript[v,i1]->Subscript[v,j1],lbl₁},…}] associates labels lblₖ with edges in the graph.\nLayeredGraphPlot[g,pos] places the dominant vertices in the plot at position pos.\nLayeredGraphPlot[m] generates a layered plot of the graph represented by the adjacency matrix m.", 
"LayerSizeFunction" : "LayerSizeFunction is an option for TreePlot that gives a function to specify the relative height to allow for each layer.", 
"LCM" : "LCM[n₁,n₂,…] gives the least common multiple of the nᵢ. ", 
"LeafCount" : "LeafCount[expr] gives the total number of indivisible subexpressions in expr. ", 
"LeastSquares" : "LeastSquares[m,b] finds an x that solves the linear least-squares problem for the matrix equation m.x==b.", 
"Left" : "Left is a symbol that represents the left-hand side for purposes of alignment and positioning. ", 
"LeftArrow" : "LeftArrow[x,y,…] displays as x←y←….", 
"LeftArrowBar" : "LeftArrowBar[x,y,…] displays as x⇤y⇤….", 
"LeftArrowRightArrow" : "LeftArrowRightArrow[x,y,…] displays as x⇆y⇆….", 
"LeftDownTeeVector" : "LeftDownTeeVector[x,y,…] displays as x⥡y⥡….", 
"LeftDownVector" : "LeftDownVector[x,y,…] displays as x⇃y⇃….", 
"LeftDownVectorBar" : "LeftDownVectorBar[x,y,…] displays as x⥙y⥙….", 
"LeftRightArrow" : "LeftRightArrow[x,y,…] displays as x↔y↔….", 
"LeftRightVector" : "LeftRightVector[x,y,…] displays as x⥎y⥎….", 
"LeftTee" : "LeftTee[x,y] displays as x⊣y.", 
"LeftTeeArrow" : "LeftTeeArrow[x,y,…] displays as x↤y↤….", 
"LeftTeeVector" : "LeftTeeVector[x,y,…] displays as x⥚y⥚….", 
"LeftTriangle" : "LeftTriangle[x,y,…] displays as x⊲y⊲….", 
"LeftTriangleBar" : "LeftTriangleBar[x,y,…] displays as x⧏y⧏….", 
"LeftTriangleEqual" : "LeftTriangleEqual[x,y,…] displays as x⊴y⊴….", 
"LeftUpDownVector" : "LeftUpDownVector[x,y,…] displays as x⥑y⥑….", 
"LeftUpTeeVector" : "LeftUpTeeVector[x,y,…] displays as x⥠y⥠….", 
"LeftUpVector" : "LeftUpVector[x,y,…] displays as x↿y↿….", 
"LeftUpVectorBar" : "LeftUpVectorBar[x,y,…] displays as x⥘y⥘….", 
"LeftVector" : "LeftVector[x,y,…] displays as x↼y↼….", 
"LeftVectorBar" : "LeftVectorBar[x,y,…] displays as x⥒y⥒….", 
"LegendAppearance" : "LegendAppearance is an option for charting functions that specifies the appearance of any legends that are generated.", 
"Legended" : "Legended[expr,lbl] indicates that a legend entry for expr should be created, with label lbl.", 
"LegendreP" : "LegendreP[n,x] gives the Legendre polynomial Pₙ(x). \nLegendreP[n,m,x] gives the associated Legendre polynomial P Subsuperscript[, n, m](x). ", 
"LegendreQ" : "LegendreQ[n,z] gives the Legendre function of the second kind Qₙ(z). \nLegendreQ[n,m,z] gives the associated Legendre function of the second kind Q Subsuperscript[, n, m](z). ", 
"Length" : "Length[expr] gives the number of elements in expr. ", 
"LengthWhile" : "LengthWhile[list,crit] gives the number of continuous elements eᵢ starting at the beginning of list for which crit[eᵢ] is True.", 
"LerchPhi" : "LerchPhi[z,s,a] gives the Lerch transcendent Φ(z,s,a). ", 
"Less" : "x<y yields True if x is determined to be less than y. \nx₁<x₂<x₃ yields True if the xᵢ form a strictly increasing sequence. ", 
"LessEqual" : "x<=y or x≤y yields True if x is determined to be less than or equal to y. \nx₁≤x₂≤x₃ yields True if the xᵢ form a nondecreasing sequence. ", 
"LessEqualGreater" : "LessEqualGreater[x,y,…] displays as x⋚y⋚….", 
"LessFullEqual" : "LessFullEqual[x,y,…] displays as x≦y≦….", 
"LessGreater" : "LessGreater[x,y,…] displays as x≶y≶….", 
"LessLess" : "LessLess[x,y,…] displays as x≪y≪….", 
"LessSlantEqual" : "LessSlantEqual[x,y,…] displays as x⩽y⩽….", 
"LessTilde" : "LessTilde[x,y,…] displays as x≲y≲….", 
"LetterCharacter" : "LetterCharacter represents a letter character in StringExpression.", 
"LetterQ" : "LetterQ[string] yields True if all the characters in the string are letters, and yields False otherwise. ", 
"Level" : "Level[expr,levelspec] gives a list of all subexpressions of expr on levels specified by levelspec. \nLevel[expr,levelspec,f] applies f to the sequence of subexpressions. ", 
"LeveneTest" : "LeveneTest[data] tests whether the variance of data is 1. \nLeveneTest[{data₁,data₂}] tests whether the variances of data₁ and data₂ are equal.\nLeveneTest[dspec,Subsuperscript[ σ, 0, 2]] tests a dispersion measure against Subsuperscript[ σ, 0, 2].\nLeveneTest[dspec,Subsuperscript[ σ, 0, 2],\"property\"] returns the value of \"property\".", 
"LeviCivitaTensor" : "LeviCivitaTensor[d] gives the d-dimensional Levi-Civita totally antisymmetric tensor.", 
"LevyDistribution" : "LevyDistribution[μ,σ] represents a Lévy distribution with location parameter μ and dispersion parameter σ.", 
"Lexicographic" : "Lexicographic represents the lexicographic ordering of monomials.", 
"LibraryFunction" : "LibraryFunction[ args] represents a function that has been loaded from a Wolfram Library.", 
"LibraryFunctionError" : "LibraryFunctionError[name,code] represents an error returned from a LibraryFunction.", 
"LibraryFunctionInformation" : "LibraryFunctionInformation[fun] returns information about a LibraryFunction.", 
"LibraryFunctionLoad" : "LibraryFunctionLoad[lib,fun,argtype,rettype] loads Wolfram Library lib and makes the library function fun available in Mathematica.", 
"LibraryFunctionUnload" : "LibraryFunctionUnload[fun] unloads a LibraryFunction so that it cannot be used.", 
"LibraryLoad" : "LibraryLoad[lib] loads the dynamic library lib into the Mathematica runtime.", 
"LibraryUnload" : "LibraryUnload[lib] unloads all functions that have been loaded from a Wolfram Library, then it unloads the library.", 
"LicenseID" : "LicenseID is an option to Encode which specifies the required value of $LicenseID on the computer that reads the encoded file. If no value is specified, any value of $LicenseID is allowed on the file-reading computer. A setting for LicenseID must be a string.", 
"LiftingFilterData" : "LiftingFilterData[…] represents lifting-filter data used to compute forward and inverse lifting wavelet transforms.", 
"LiftingWaveletTransform" : "LiftingWaveletTransform[data] gives the lifting wavelet transform (LWT) of an array of data.\nLiftingWaveletTransform[data,wave] gives the lifting wavelet transform using the wavelet wave.\nLiftingWaveletTransform[data,wave,r] gives the lifting wavelet transform using r levels of refinement.\nLiftingWaveletTransform[image,…] gives the lifting wavelet transform of an image.\nLiftingWaveletTransform[sound,…] gives the lifting wavelet transform of sampled sound.", 
"LightBlue" : "LightBlue represents a light blue color in graphics or style specifications.", 
"LightBrown" : "LightBrown represents a light brown color in graphics or style specifications.", 
"LightCyan" : "LightCyan represents a light cyan color in graphics or style specifications.", 
"Lighter" : "Lighter[color] represents a lighter version of the specified color. \nLighter[color,f] represents a version of the specified color lightened by a fraction f. \nLighter[image,…] gives a lighter version of an image.", 
"LightGray" : "LightGray represents a light gray color in graphics or style specifications.", 
"LightGreen" : "LightGreen represents a light green color in graphics or style specifications.", 
"Lighting" : "Lighting is an option for Graphics3D and related functions that specifies what simulated lighting to use in coloring 3D surfaces. ", 
"LightingAngle" : "LightingAngle is an option for ReliefPlot and related functions that specifies the angle from which simulated illumination is taken to come.", 
"LightMagenta" : "LightMagenta represents a light magenta color in graphics or style specifications.", 
"LightOrange" : "LightOrange represents a light orange color in graphics or style specifications.", 
"LightPink" : "LightPink represents a light pink color in graphics or style specifications.", 
"LightPurple" : "LightPurple represents a light purple color in graphics or style specifications.", 
"LightRed" : "LightRed represents a light red color in graphics or style specifications.", 
"LightSources" : "LightSources is an option for Graphics3D and related functions that specifies the properties of point light sources for simulated illumination. ", 
"LightYellow" : "LightYellow represents a light yellow color in graphics or style specifications.", 
"Likelihood" : "Likelihood[dist,{x₁,x₂,…}] gives the likelihood function for observations x₁, x₂, … from the distribution dist.", 
"Limit" : "Limit[expr,x->x₀] finds the limiting value of expr when x approaches x₀. ", 
"LimitsPositioning" : "LimitsPositioning is an option for UnderoverscriptBox and related boxes that specifies whether to change the positioning of underscripts and overscripts in the way conventional for limits. ", 
"LimitsPositioningTokens" : "LimitsPositioningTokens is an option for selections that specifies a set of characters for which the option LimitsPositioning is set to True by default.", 
"LindleyDistribution" : "LindleyDistribution[δ] represents a Lindley distribution with shape parameter δ.", 
"Line" : "Line[{pt₁,pt₂,…}] is a graphics primitive that represents a line joining a sequence of points. \nLine[{{pt₁₁,pt₁₂,…},{pt₂₁,…},…}] represents a collection of lines. ", 
"LinearFractionalTransform" : "LinearFractionalTransform[m] gives a TransformationFunction that represents a linear fractional transformation defined by the homogeneous matrix m. \nLinearFractionalTransform[{a,b,c,d}] represents a linear fractional transformation that maps r to (a.r+b)\/(c.r+d). ", 
"LinearModelFit" : "LinearModelFit[{y₁,y₂,…},{f₁,f₂,…},x] constructs a linear model of the form β₀+β₁f₁+β₂f₂+… that fits the yᵢ for successive x values 1, 2, ….\nLinearModelFit[{{x₁₁,x₁₂,…,y₁},{x₂₁,x₂₂,…,y₂},…},{f₁,f₂,…},{x₁,x₂,…}] constructs a linear model of the form β₀+β₁f₁+β₂f₂+… where the fᵢ depend on the variables xₖ. \nLinearModelFit[{m,v}] constructs a linear model from the design matrix m and response vector v.", 
"LinearOffsetFunction" : "LinearOffsetFunction is an option for linear and generalized linear model fitting functions that specifies a component for the model that is to be assumed known.", 
"LinearProgramming" : "LinearProgramming[c,m,b] finds a vector x that minimizes the quantity c.x subject to the constraints m.x≥b and x≥0. \nLinearProgramming[c,m,{{b₁,s₁},{b₂,s₂},…}] finds a vector x that minimizes c.x subject to x≥0 and linear constraints specified by the matrix m and the pairs {bᵢ,sᵢ}. For each row mᵢ of m, the corresponding constraint is mᵢ.x≥bᵢ if sᵢ==1, or mᵢ.x==bᵢ if sᵢ==0, or mᵢ.x≤bᵢ if sᵢ==-1. \nLinearProgramming[c,m,b,l] minimizes c.x subject to the constraints specified by m and b and x≥l. \nLinearProgramming[c,m,b,{l₁,l₂,…}] minimizes c.x subject to the constraints specified by m and b and xᵢ≥lᵢ. \nLinearProgramming[c,m,b,{{l₁,u₁},{l₂,u₂},…}] minimizes c.x subject to the constraints specified by m and b and lᵢ≤xᵢ≤uᵢ. \nLinearProgramming[c,m,b,lu,dom] takes the elements of x to be in the domain dom, either Reals or Integers.\nLinearProgramming[c,m,b,lu,{dom₁,dom₂,…}] takes xᵢ to be in the domain domᵢ.", 
"LinearRecurrence" : "LinearRecurrence[ker,init,n] gives the sequence of length n obtained by iterating the linear recurrence with kernel ker starting with initial values init.\nLinearRecurrence[ker,init,{nₘᵢₙ,nₘₐₓ}] yields terms nₘᵢₙ through nₘₐₓ in the linear recurrence sequence. ", 
"LinearSolve" : "LinearSolve[m,b] finds an x which solves the matrix equation m.x==b. \nLinearSolve[m] generates a LinearSolveFunction[…] which can be applied repeatedly to different b. ", 
"LinearSolveFunction" : "LinearSolveFunction[dimensions,data] represents a function for providing solutions to a matrix equation. ", 
"LinebreakAdjustments" : "LinebreakAdjustments is an option for selections that sets parameters used for calculating where automatic line breaks should be inserted.", 
"LineBreakChart" : "LineBreakChart[{{date₁,p₁},{date₂,p₂},…}] makes a line break chart with prices pᵢ at date dateᵢ.\nLineBreakChart[{\"name\",daterange}] makes a line break chart of closing prices for the financial entity \"name\" over the date range daterange.\nLineBreakChart[{…},n] makes a line break chart where n bars in a row cause a reversal.", 
"LineBreakWithin" : "LineBreakWithin is an option for selections that specifies whether line breaks occur automatically when the end of a line is reached.", 
"LineForm" : "LineForm[g] is a three-dimensional graphics directive that specifies that lines are to be drawn with the graphics directive g or the list of graphics directives g.", 
"LineGraph" : "LineGraph[g] gives the line graph of the graph g.", 
"LineIndent" : "LineIndent is an option for Style and Cell that specifies how many ems of indentation to add at the beginnings of lines for each level of nesting in an expression. ", 
"LineIndentMaxFraction" : "LineIndentMaxFraction is an option for Cell, StyleBox, and Style that specifies the maximum fraction of the total page width to indent at the beginnings of lines. ", 
"LineIntegralConvolutionPlot" : "LineIntegralConvolutionPlot[{{vₓ,Subscript[v,y]},image},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] generates a line integral convolution plot of image convolved with the vector field {vₓ,Subscript[v,y]} as a function of x and y.\nLineIntegralConvolutionPlot[{vₓ,Subscript[v,y]},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] generates a line integral convolution plot of white noise with the vector field {vₓ,Subscript[v,y]}.", 
"LineIntegralConvolutionScale" : "LineIntegralConvolutionScale is an option to LineIntegralConvolutionPlot and related functions that determines the scale of the line integral convolution to be used.", 
"LineSpacing" : "LineSpacing is an option for Style and Cell that specifies the spacing between successive lines of text. ", 
"LinkClose" : "LinkClose[link] closes an open MathLink connection. ", 
"LinkConnect" : "LinkConnect[\"name\"] connects to a MathLink link created by another program. ", 
"LinkCreate" : "LinkCreate[\"name\"] creates a MathLink link with the specified name for another program to connect to. \nLinkCreate[] creates a MathLink link and picks an unused name for the link.", 
"LinkError" : "LinkError[link] returns error information for link in the form { errorNumber, errorExplanation }.", 
"LinkFlush" : "LinkFlush[link] transmits immediately any locally buffered outgoing expressions.", 
"LinkFunction" : "LinkFunction is an option for GeneralizedLinearModelFit that specifies the link function for the generalized linear model.", 
"LinkHost" : "LinkHost is an option for LinkOpen that specifies on what computer a program should be launched or on what computer a listening link will be found.", 
"LinkInterrupt" : "LinkInterrupt[link] sends an interrupt to the program at the other end of the specified MathLink connection. ", 
"LinkLaunch" : "LinkLaunch[\"prog\"] starts the external program prog and opens a MathLink connection to it. ", 
"LinkMode" : "LinkMode is an option for LinkOpen that specifies how the link is to be established and connected.  The possible settings for LinkMode are Launch, Listen, Connect, and Loopback.", 
"LinkObject" : "LinkObject[\"name\",n₁,n₂] is an object that represents an active MathLink connection for functions such as LinkRead and LinkWrite. ", 
"LinkOpen" : "LinkOpen[\"prog\"] starts the external program prog and opens a MathLink connection to it.", 
"LinkPatterns" : "LinkPatterns[link] gives a list of the patterns for which definitions were set up when the external program associated with the specified MathLink connection was installed. ", 
"LinkProtocol" : "LinkProtocol is an option to LinkLaunch, Install, and related functions that specifies the underlying data transport protocol to use for a new MathLink link. ", 
"LinkRead" : "LinkRead[link] reads one expression from the specified MathLink connection. \nLinkRead[link,h] wraps h around the expression read before evaluating it. ", 
"LinkReadHeld" : "LinkReadHeld[link] reads an expression via MathLink from link and returns it wrapped in Hold.", 
"LinkReadyQ" : "LinkReadyQ[link] tests whether there is an expression ready to read from the specified MathLink connection. \nLinkReadyQ[link,t] waits for up to t seconds to see if an expression becomes ready to read.\nLinkReadyQ[{link₁,link₂,…},t] tests all the linkᵢ in parallel, returning as soon as any of them are ready to read from.", 
"Links" : "Links[] gives a list of all MathLink connections that are currently open. \nLinks[patt] lists only links whose names match the specified string pattern.", 
"LinkWrite" : "LinkWrite[link,expr] writes expr to the specified MathLink connection. ", 
"LinkWriteHeld" : "LinkWriteHeld[link, Hold[expr], (flush:True)] writes expr (without the Hold) via MathLink to link (synchronizing unless flush is False).", 
"LiouvilleLambda" : "LiouvilleLambda[n] gives the Liouville function λ(n).", 
"List" : "{e₁,e₂,…} is a list of elements. ", 
"Listable" : "Listable is an attribute that can be assigned to a symbol f to indicate that the function f should automatically be threaded over lists that appear as its arguments. ", 
"ListAnimate" : "ListAnimate[{expr₁,expr₂,…}] generates an animation whose frames are the successive exprᵢ. \nListAnimate[list,fps] displays fps frames per second. ", 
"ListContourPlot" : "ListContourPlot[array] generates a contour plot from an array of height values. \nListContourPlot[{{x₁,y₁,f₁},{x₂,y₂,f₂},…}] generates a contour plot from values defined at specified points. ", 
"ListContourPlot3D" : "ListContourPlot3D[array] generates a contour plot from a three-dimensional array of values. \nListContourPlot3D[{{x₁,y₁,z₁,f₁},{x₂,y₂,z₂,f₂},…}] generates a contour plot from values defined at specified points in three‐dimensional space. ", 
"ListConvolve" : "ListConvolve[ker,list] forms the convolution of the kernel ker with list. \nListConvolve[ker,list,k] forms the cyclic convolution in which the kᵗʰ element of ker is aligned with each element in list. \nListConvolve[ker,list,{Subscript[k,L],Subscript[k,R]}] forms the cyclic convolution whose first element contains list[[1]]ker[[Subscript[k,L]]] and whose last element contains list[[-1]]ker[[Subscript[k,R]]]. \nListConvolve[ker,list,klist,p] forms the convolution in which list is padded at each end with repetitions of the element p. \nListConvolve[ker,list,klist,{p₁,p₂,…}] forms the convolution in which list is padded at each end with cyclic repetitions of the pᵢ. \nListConvolve[ker,list,klist,padding,g,h] forms a generalized convolution in which g is used in place of Times and h in place of Plus. \nListConvolve[ker,list,klist,padding,g,h,lev] forms a convolution using elements at level lev in ker and list. ", 
"ListCorrelate" : "ListCorrelate[ker,list] forms the correlation of the kernel ker with list. \nListCorrelate[ker,list,k] forms the cyclic correlation in which the kᵗʰ element of ker is aligned with each element in list. \nListCorrelate[ker,list,{Subscript[k,L],Subscript[k,R]}] forms the cyclic correlation whose first element contains list[[1]]ker[[Subscript[k,L]]] and whose last element contains list[[-1]]ker[[Subscript[k,R]]]. \nListCorrelate[ker,list,klist,p] forms the correlation in which list is padded at each end with repetitions of the element p. \nListCorrelate[ker,list,klist,{p₁,p₂,…}] forms the correlation in which list is padded at each end with cyclic repetitions of the pᵢ. \nListCorrelate[ker,list,klist,padding,g,h] forms a generalized correlation in which g is used in place of Times and h in place of Plus. \nListCorrelate[ker,list,klist,padding,g,h,lev] forms a correlation using elements at level lev in ker and list. ", 
"ListCurvePathPlot" : "ListCurvePathPlot[{{x₁,y₁},{x₂,y₂},…}] plots a curve that corresponds to a smooth path through the specified points. ", 
"ListDeconvolve" : "ListDeconvolve[ker,list] gives a deconvolution of list using kernel ker.", 
"ListDensityPlot" : "ListDensityPlot[array] generates a smooth density plot from an array of values. \nListDensityPlot[{{x₁,y₁,f₁},{x₂,y₂,f₂},…}] generates a density plot with values defined at specified points. ", 
"Listen" : "Listen is a setting for the LinkMode option of LinkOpen.  LinkMode->Listen causes a link to be created that listens on a named port for an incoming connection request.", 
"ListInterpolation" : "ListInterpolation[array] constructs an InterpolatingFunction object that represents an approximate function that interpolates the array of values given. \nListInterpolation[array,{{xₘᵢₙ,xₘₐₓ},{yₘᵢₙ,yₘₐₓ},…}] specifies the domain of the grid from which the values in array are assumed to come. ", 
"ListLineIntegralConvolutionPlot" : "ListLineIntegralConvolutionPlot[{array,image}] generates a line integral convolution plot of image convolved with the vector field defined by an array of vector field values.\nListLineIntegralConvolutionPlot[array] generates a line integral convolution plot of white noise convolved with the vector field defined by array.\nListLineIntegralConvolutionPlot[{{{{x₁,y₁},{vx₁,vy₁}},…},image}] generates a line integral convolution plot of image convolved with the vector field defined by vectors {vxᵢ,vyᵢ} at specified points {xᵢ,yᵢ}.\nListLineIntegralConvolutionPlot[{{{x₁,y₁},{vx₁,vy₁}},…}] generates a line integral convolution plot of white noise convolved with the vector field defined by {vxᵢ,vyᵢ}.", 
"ListLinePlot" : "ListLinePlot[{y₁,y₂,…}] plots a line through a list of values, assumed to correspond to x coordinates 1, 2, …. \nListLinePlot[{{x₁,y₁},{x₂,y₂},…}] plots a line through specific x and y positions. \nListLinePlot[{list₁,list₂,…}] plots several lines. ", 
"ListLogLinearPlot" : "ListLogLinearPlot[{{x₁,y₁},{x₂,y₂},…}] makes a log-linear plot of the specified list of x and y values.\nListLogLinearPlot[{list₁,list₂,…}] plots several lists of values.", 
"ListLogLogPlot" : "ListLogLogPlot[{{x₁,y₁},{x₂,y₂},…}] makes a log-log plot of the specified list of x and y values.\nListLogLogPlot[{list₁,list₂,…}] plots several lists of values.", 
"ListLogPlot" : "ListLogPlot[{y₁,y₂,…}] makes a log plot of the yᵢ, assumed to correspond to x coordinates 1, 2, ….\nListLogPlot[{{x₁,y₁},{x₂,y₂},…}] makes a log plot of the specified list of x and y values.\nListLogPlot[{list₁,list₂,…}] plots several lists of values.", 
"ListPlay" : "ListPlay[{a₁,a₂,…}] creates an object that plays as a sound whose amplitude is given by the sequence of levels aᵢ. ", 
"ListPlot" : "ListPlot[{y₁,y₂,…}] plots points corresponding to a list of values, assumed to correspond to x coordinates 1, 2, …. \nListPlot[{{x₁,y₁},{x₂,y₂},…}] plots a list of points with specified x and y coordinates. \nListPlot[{list₁,list₂,…}] plots several lists of points. ", 
"ListPlot3D" : "ListPlot3D[array] generates a three-dimensional plot of a surface representing an array of height values. \nListPlot3D[{{x₁,y₁,z₁},{x₂,y₂,z₂},…}] generates a plot of the surface with heights zᵢ at positions {xᵢ,yᵢ}. \nListPlot3D[{data₁,data₂,…}] plots the surfaces corresponding to each of the dataᵢ.", 
"ListPointPlot3D" : "ListPointPlot3D[{{x₁,y₁,z₁},{x₂,y₂,z₂},…}] generates a 3D scatter plot of points with coordinates {xᵢ,yᵢ,zᵢ}. \nListPointPlot3D[array] generates a 3D scatter plot of points with a 2D array of height values.\nListPointPlot3D[{data₁,data₂,…}] plots several collections of points, by default in different colors. ", 
"ListPolarPlot" : "ListPolarPlot[{r₁,r₂,…}] plots points equally spaced in angle at radii rᵢ.\nListPolarPlot[{{θ₁,r₁},{θ₂,r₂},…}] plots points at polar coordinates θᵢ, rᵢ.\nListPolarPlot[{list₁,list₂,…}] plots several lists of values.", 
"ListQ" : "ListQ[expr] gives True if expr is a list, and False otherwise.", 
"ListStreamDensityPlot" : "ListStreamDensityPlot[array] generates a stream density plot from a 2D array of vector and scalar field values {{Subscript[vx,ij],Subscript[vy,ij]},Subscript[s,ij]}. \nListStreamDensityPlot[{{{x₁,y₁},{{vx₁,vy₁},s₁}},…}] generates a stream density plot from vector and scalar field values {{vxᵢ,vyᵢ},sᵢ} given at specified points {xᵢ,yᵢ}.\nListStreamDensityPlot[{data₁,data₂,…}] plots data for several vector and scalar fields. ", 
"ListStreamPlot" : "ListStreamPlot[array] generates a stream plot from an array of vector field values.\nListStreamPlot[{{{x₁,y₁},{vx₁,vy₁}},…}] generates a stream plot from vector field values {vxᵢ,vyᵢ} given at specified points {xᵢ,yᵢ}.\nListStreamPlot[{data₁,data₂,…}] plots data for several vector fields. ", 
"ListSurfacePlot3D" : "ListSurfacePlot3D[{{x₁,y₁,z₁},{x₂,y₂,z₂},…}] plots a three-dimensional surface constructed to fit the specified points. ", 
"ListVectorDensityPlot" : "ListVectorDensityPlot[array] generates a vector plot from a 2D array of vector and scalar field values {{Subscript[vx,ij],Subscript[vy,ij]},Subscript[s,ij]}. \nListVectorDensityPlot[{{{x₁,y₁},{{vx₁,vy₁},s₁}},…}] generates a vector plot from vector and scalar field values {{vxᵢ,vyᵢ},sᵢ} given at specified points {xᵢ,yᵢ}.\nListVectorDensityPlot[{data₁,data₂,…}] plots data for several vector and scalar fields. ", 
"ListVectorPlot" : "ListVectorPlot[array] generates a vector plot from an array of vector field values.\nListVectorPlot[{{{x₁,y₁},{vx₁,vy₁}},…}] generates a vector plot from vector field values {vxᵢ,vyᵢ} given at specified points {xᵢ,yᵢ}.\nListVectorPlot[{data₁,data₂,…}] plots data for several vector fields. ", 
"ListVectorPlot3D" : "ListVectorPlot3D[array] generates a 3D vector plot from a 3D array of vector field values.\nListVectorPlot3D[{{{x₁,y₁,z₁},{vx₁,vy₁,vz₁}},…}] generates a 3D vector plot from vector field values {vxᵢ,vyᵢ,vzᵢ} given at specified points {xᵢ,yᵢ,zᵢ}.\nListVectorPlot3D[{data₁,data₂,…}] plots data for several vector fields. ", 
"LoadJavaClass" : "LoadJavaClass[\"classname\"] loads the specified class into Java and sets up definitions so that it can be used from Mathematica. You must specify the fully-qualified class name, for example \"java.awt.Frame\". It is safe to call LoadJavaClass multiple times on the same class; it simply returns right away without doing anything.", 
"LocalizeVariables" : "LocalizeVariables is an option to Manipulate that determines whether the values of variables associated with controls should be localized.", 
"LocationEquivalenceTest" : "LocationEquivalenceTest[{data₁,data₂,…}] tests whether the means or medians of the dataᵢ are equal. \nLocationEquivalenceTest[{data₁,…},\"property\"] returns the value of \"property\".", 
"LocationTest" : "LocationTest[data] tests whether the mean or median of the data is zero. \nLocationTest[{data₁,data₂}] tests whether the means or medians of data₁ and data₂ are equal.\nLocationTest[dspec,μ₀] tests a location measure against μ₀.\nLocationTest[dspec,μ₀,\"property\"] returns the value of \"property\".", 
"Locator" : "Locator[{x,y}] represents a locator object at position {x,y} in a graphic. \nLocator[Dynamic[pos]] takes the position to be the dynamically updated current value of pos, with this value being reset if the locator object is moved. \nLocator[{x,y},obj] displays obj as the locator object. \nLocator[{x,y},None] displays nothing visible as the locator object. ", 
"LocatorAutoCreate" : "LocatorAutoCreate is an option for LocatorPane, Manipulate, and related functions that specifies whether new locators should be created when clicking away from existing locators.", 
"LocatorPane" : "LocatorPane[{x,y},back] represents a pane with a locator at position {x,y} and background back.\nLocatorPane[Dynamic[pt],back] takes the locator position to be the dynamically updated current value of pt, with the value of pt being reset if the locator is moved.\nLocatorPane[{pt₁,pt₂,…},back] sets up multiple locators at positions pt₁, pt₂, …. \nLocatorPane[Dynamic[{pt₁,pt₂,…}],back] takes the locator positions to be dynamically updated current values of the ptᵢ.\nLocatorPane[pts,back,{{xₘᵢₙ,yₘᵢₙ},{xₘₐₓ,yₘₐₓ}}] specifies the range of coordinates for the locator.\nLocatorPane[pts,back,{{xₘᵢₙ,yₘᵢₙ},{xₘₐₓ,yₘₐₓ},{dx,dy}}] uses jumps dx, dy. ", 
"LocatorRegion" : "LocatorRegion is an option for Locator that specifies where the locator object should by default be allowed to go when it is dragged.", 
"Locked" : "Locked is an attribute that, once assigned, prevents modification of any attributes of a symbol. ", 
"Log" : "Log[z] gives the natural logarithm of z (logarithm to base e). \nLog[b,z] gives the logarithm to base b. ", 
"Log10" : "Log10[x] gives the base-10 logarithm of x.", 
"Log2" : "Log2[x] gives the base-2 logarithm of x.", 
"LogBarnesG" : "LogBarnesG[z] gives the logarithm of the Barnes G-function logG(z).", 
"LogGamma" : "LogGamma[z] gives the logarithm of the gamma function log Γ(z). ", 
"LogGammaDistribution" : "LogGammaDistribution[α,β,μ] represents a log-gamma distribution with shape parameters α and β and location parameter μ.", 
"LogicalExpand" : "LogicalExpand[expr] expands out logical combinations of equations, inequalities, and other functions. ", 
"LogIntegral" : "LogIntegral[z] is the logarithmic integral function li(z). ", 
"LogisticDistribution" : "LogisticDistribution[μ,β] represents a logistic distribution with mean μ and scale parameter β.", 
"LogitModelFit" : "LogitModelFit[{y₁,y₂,…},{f₁,f₂,…},x] constructs a binomial logistic regression model of the form 1\/(1+Superscript[ⅇ, -(β₀+β₁f₁ +β₂f₂ +…)]) that fits the yᵢ for successive x values 1, 2, ….\nLogitModelFit[{{x₁₁,x₁₂,…,y₁},{x₂₁,x₂₂,…,y₂},…},{f₁,…},{x₁,x₂,…}] constructs a binomial logistic regression model of the form 1\/(1+Superscript[ⅇ, -(β₀+β₁f₁ +β₂f₂ +…)]) where the fᵢ depend on the variables xₖ.\nLogitModelFit[{m,v}] constructs a binomial logistic regression model from the design matrix m and response vector v.", 
"LogLikelihood" : "LogLikelihood[dist,{x₁,x₂,…}] gives the log‐likelihood function for observations x₁, x₂, … from the distribution dist.", 
"LogLinearPlot" : "LogLinearPlot[f,{x,xₘᵢₙ,xₘₐₓ}] generates a log-linear plot of f as a function of x from xₘᵢₙ to xₘₐₓ. \nLogLinearPlot[{f₁,f₂,…},{x,xₘᵢₙ,xₘₐₓ}] generates log-linear plots of several functions fᵢ.", 
"LogLogisticDistribution" : "LogLogisticDistribution[γ,σ] represents a log-logistic distribution with shape parameter γ and scale parameter σ.", 
"LogLogPlot" : "LogLogPlot[f,{x,xₘᵢₙ,xₘₐₓ}] generates a log-log plot of f as function of x from xₘᵢₙ to xₘₐₓ. \nLogLogPlot[{f₁,f₂,…},{x,xₘᵢₙ,xₘₐₓ}] generates log-log plots of several functions fᵢ.", 
"LogNormalDistribution" : "LogNormalDistribution[μ,σ] represents a lognormal distribution derived from a normal distribution with mean μ and standard deviation σ.", 
"LogPlot" : "LogPlot[f,{x,xₘᵢₙ,xₘₐₓ}] generates a log plot of f as a function of x from xₘᵢₙ to xₘₐₓ. \nLogPlot[{f₁,f₂,…},{x,xₘᵢₙ,xₘₐₓ}] generates log plots of several functions fᵢ.", 
"LogSeriesDistribution" : "LogSeriesDistribution[θ] represents a logarithmic series distribution with parameter θ.", 
"Longest" : "Longest[p] is a pattern object that matches the longest sequence consistent with the pattern p. ", 
"LongestCommonSequence" : "LongestCommonSequence[s₁,s₂] finds the longest sequence of contiguous or disjoint elements common to the strings or lists s₁ and s₂.", 
"LongestCommonSubsequence" : "LongestCommonSubsequence[s₁,s₂] finds the longest contiguous subsequence of elements common to the strings or lists s₁ and s₂.", 
"LongestMatch" : "LongestMatch[p] is a string pattern object matching the longest sequence of characters consistent with the string pattern p.", 
"LongForm" : "LongForm is an option for Information. With LongForm -> True, the full information of a symbol is printed. With LongForm -> False the usage of a symbol is printed.", 
"Longitude" : "Longitude[pos] gives the longitude in degrees of a geographic position specified by pos.\nLongitude[pos,datum] gives the longitude referring to the specified geodetic datum.", 
"LongLeftArrow" : "LongLeftArrow[x,y,…] displays as x⟵y⟵….", 
"LongLeftRightArrow" : "LongLeftRightArrow[x,y,…] displays as x⟷y⟷….", 
"LongRightArrow" : "LongRightArrow[x,y,…] displays as x⟶y⟶….", 
"Loopback" : "Loopback is a setting for the LinkMode option of LinkOpen.  LinkMode->Loopback causes a link to be created that is not connected to another program.  Expressions written to the link are read back from the same link.", 
"LoopFreeGraphQ" : "LoopFreeGraphQ[g] yields True if the graph g has no self-loops, and False otherwise. ", 
"LowerCaseQ" : "LowerCaseQ[string] yields True if all the characters in the string are lowercase letters, and yields False otherwise. ", 
"LowerLeftArrow" : "LowerLeftArrow[x,y,…] displays as x↙y↙….", 
"LowerRightArrow" : "LowerRightArrow[x,y,…] displays as x↘y↘….", 
"LowerTriangularize" : "LowerTriangularize[m] gives a matrix in which all but the lower triangular elements of m are replaced with zeros. \nLowerTriangularize[m,k] replaces with zeros only the elements above the kᵗʰ subdiagonal of m.", 
"LQEstimatorGains" : "LQEstimatorGains[ss,{w,v}] gives the optimal estimator gain matrix for the StateSpaceModel object ss with process and measurement noise covariance matrices w and v.\nLQEstimatorGains[ss,{w,v,h}] includes the cross-covariance matrix h.\nLQEstimatorGains[{ss,sensors},{…}] specifies sensors as the noisy measurements of ss.\nLQEstimatorGains[{ss,sensors,dinputs},{…}] specifies dinputs as the deterministic inputs of ss.", 
"LQGRegulator" : "LQGRegulator[{ss,sensors,finputs},{w,v,h},{q,r,p}] constructs the optimal feedback regulator for the StateSpaceModel ss using noisy measurements sensors and feedback inputs finputs. The process, measurement, and cross-covariance matrices are w, v, and h; and the state, input, and state-input weighting matrices are q, r, and p.\nLQGRegulator[{ss,sensors,finputs,einputs},{…},{…}] specifies einputs as the exogenous deterministic inputs.", 
"LQOutputRegulatorGains" : "LQOutputRegulatorGains[ss,{q,r}] gives the optimal state feedback gain matrix for the StateSpaceModel object ss and the quadratic cost function with output and control weighting matrices q and r.\nLQOutputRegulatorGains[ss,{q,r,p}] includes the output-control cross-coupling matrix p in the cost function.\nLQOutputRegulatorGains[{ss,sensors},{…}] specifies sensors as the measured outputs of ss.\nLQOutputRegulatorGains[{ss,sensors,finputs},{…}] specifies finputs as the feedback inputs of ss.", 
"LQRegulatorGains" : "LQRegulatorGains[ss,{q,r}] gives the optimal state feedback gain matrix for the StateSpaceModel object ss and the quadratic cost function with state and control weighting matrices q and r.\nLQRegulatorGains[ss,{q,r,p}] includes the state-control cross-coupling matrix p in the cost function.\nLQRegulatorGains[{ss,finputs},{…}] specifies finputs as the feedback inputs of ss.", 
"LucasL" : "LucasL[n] gives the Lucas number Lₙ.\nLucasL[n,x] gives the Lucas polynomial Lₙ(x).", 
"LUDecomposition" : "LUDecomposition[m] generates a representation of the LU decomposition of a square matrix m. ", 
"LyapunovSolve" : "LyapunovSolve[a,c] finds a solution x of the matrix Lyapunov equation a.x+x.a=c.\nLyapunovSolve[a,b,c] solves a.x+x.b=c.\nLyapunovSolve[{a,d},c] solves a.x.d+d.x.a=c.\nLyapunovSolve[{a,d},{b,e},c] solves a.x.e+d.x.b=c.", 
"LyonsGroupLy" : "LyonsGroupLy[] represents the sporadic simple Lyons group Ly.", 
"MachineID" : "MachineID is an option to Encode which specifies the required value of $MachineID on the computer that reads the encoded file. If no value is specified, any value of $MachineID is allowed on the file-reading computer. A setting for MachineID must be a string.", 
"MachineName" : "MachineName is an option to Encode which specifies the required value of $MachineName on the computer that reads the encoded file. If no value is specified, any value of $MachineName is allowed on the file-reading computer. A setting for MachineName must be a string.", 
"MachineNumberQ" : "MachineNumberQ[expr] returns True if expr is a machine‐precision real or complex number, and returns False otherwise. ", 
"MachinePrecision" : "MachinePrecision is a symbol used to indicate machine‐number precision. ", 
"Magenta" : "Magenta represents the color magenta in graphics or style specifications. ", 
"Magnification" : "Magnification is an option for Style and Cell that specifies what magnification to use for display. ", 
"Magnify" : "Magnify[expr,r] represents an object to be displayed with magnification r. \nMagnify[expr] displays with expr magnified by a fixed factor.", 
"MainSolve" : "MainSolve[eqns] is the underlying function for transforming systems of equations. Solve and Eliminate call it. The equations must be of the form lhs == rhs. They can be combined using && and ||. MainSolve returns False if no solutions to the equations exist, and True if all values of variables are solutions. MainSolve rearranges the equations using certain directives. MainSolve[eqns, vars, elim, rest] attempts to rearrange the equations eqns so as to solve for the variables vars, and eliminate the variables elim. The list rest can be included to specify the elimination order for any remaining variables.", 
"Majority" : "Majority[e₁,e₂,…] gives True if the majority of the eᵢ are True, and False if the majority are False.", 
"MakeBoxes" : "MakeBoxes[expr,form] is the low‐level function used in Mathematica sessions to convert expressions into boxes. \nMakeBoxes[expr] is the function to convert expr to StandardForm boxes.", 
"MakeExpression" : "MakeExpression[boxes,form] is the low‐level function used in Mathematica sessions to construct expressions from boxes. ", 
"MakeRules" : "MakeRules is an option to Solve and related functions. With MakeRules -> True, the result is presented as an AlgebraicRulesData object. With MakeRules -> False, the result is presented as a list of rules.", 
"MangoldtLambda" : "MangoldtLambda[n] gives the von Mangoldt function Λ(n).", 
"ManhattanDistance" : "ManhattanDistance[u,v] gives the Manhattan or \"city block\" distance between vectors u and v.", 
"Manipulate" : "Manipulate[expr,{u,uₘᵢₙ,uₘₐₓ}] generates a version of expr with controls added to allow interactive manipulation of the value of u. \nManipulate[expr,{u,uₘᵢₙ,uₘₐₓ,du}] allows the value of u to vary between uₘᵢₙ and uₘₐₓ in steps du. \nManipulate[expr,{{u,uᵢₙᵢₜ},uₘᵢₙ,uₘₐₓ,…}] takes the initial value of u to be uᵢₙᵢₜ. \nManipulate[expr,{{u,uᵢₙᵢₜ,Subscript[u,lbl]},…}] labels the controls for u with Subscript[u,lbl]. \nManipulate[expr,{u,{u₁,u₂,…}}] allows u to take on discrete values u₁,u₂,…. \nManipulate[expr,{u,…},{v,…},…] provides controls to manipulate each of the u,v,…. \nManipulate[expr,cᵤ->{u,…},cᵥ->{v,…},…] links the controls to the specified controllers on an external device.", 
"Manipulator" : "Manipulator[x] represents a manipulator with setting x in the range 0 to 1. \nManipulator[Dynamic[x]] takes the setting to be the dynamically updated current value of x, with the value of x being reset if the manipulator is moved. \nManipulator[x,{xₘᵢₙ,xₘₐₓ}] represents a manipulator with range xₘᵢₙ to xₘₐₓ. \nManipulator[x,{xₘᵢₙ,xₘₐₓ,dx}] represents a manipulator that jumps in steps dx. ", 
"MannWhitneyTest" : "MannWhitneyTest[{data₁,data₂}] tests whether the medians of data₁ and data₂ are equal.\nMannWhitneyTest[dspec,μ₀] tests the median difference against μ₀.\nMannWhitneyTest[dspec,μ₀,\"property\"] returns the value of \"property\".", 
"MantissaExponent" : "MantissaExponent[x] gives a list containing the mantissa and exponent of a number x. \nMantissaExponent[x,b] gives the base‐b mantissa and exponent of x. ", 
"Manual" : "Manual represents an option or other value that is to be selected manually, usually by some form of interactive manipulation.", 
"Map" : "Map[f,expr] or f\/@expr applies f to each element on the first level in expr. \nMap[f,expr,levelspec] applies f to parts of expr specified by levelspec. ", 
"MapAll" : "MapAll[f,expr] or f\/\/@expr applies f to every subexpression in expr. ", 
"MapAt" : "MapAt[f,expr,n] applies f to the element at position n in expr. If n is negative, the position is counted from the end. \nMapAt[f,expr,{i,j,…}] applies f to the part of expr at position {i,j,…}. \nMapAt[f,expr,{{i₁,j₁,…},{i₂,j₂,…},…}] applies f to parts of expr at several positions. ", 
"MapIndexed" : "MapIndexed[f,expr] applies f to the elements of expr, giving the part specification of each element as a second argument to f. \nMapIndexed[f,expr,levelspec] applies f to all parts of expr on levels specified by levelspec. ", 
"MapThread" : "MapThread[f,{{a₁,a₂,…},{b₁,b₂,…},…}] gives {f[a₁,b₁,…],f[a₂,b₂,…],…}. \nMapThread[f,{expr₁,expr₂,…},n] applies f to the parts of the exprᵢ at level n. ", 
"MarcumQ" : "MarcumQ[m,a,b] gives Marcum's Q function Qₘ(a,b).\nMarcumQ[m,a,b₀,b₁] gives Marcum's Q function Qₘ(a,b₀)-Qₘ(a,b₁).", 
"MardiaCombinedTest" : "MardiaCombinedTest[data] tests whether data follows a MultinormalDistribution using the Mardia combined test.\nMardiaCombinedTest[data,\"property\"] returns the value of \"property\".", 
"MardiaKurtosisTest" : "MardiaKurtosisTest[data] tests whether data follows a MultinormalDistribution using the Mardia kurtosis test.\nMardiaKurtosisTest[data,\"property\"] returns the value of \"property\".", 
"MardiaSkewnessTest" : "MardiaSkewnessTest[data] tests whether data follows a MultinormalDistribution using the Mardia skewness test.\nMardiaSkewnessTest[data,\"property\"] returns the value of \"property\".", 
"MarginalDistribution" : "MarginalDistribution[dist,k] represents a univariate marginal distribution of the kᵗʰ coordinate from the multivariate distribution dist.\nMarginalDistribution[dist,{k₁,k₂,…}] represents a multivariate marginal distribution of the {k₁,k₂,…} coordinates.", 
"Masking" : "Masking is an option for various image analysis and processing functions that specifies on which regions they should operate.", 
"MatchingDissimilarity" : "MatchingDissimilarity[u,v] gives the matching dissimilarity between Boolean vectors u and v.", 
"MatchLocalNameQ" : "MatchLocalNameQ is an internal symbol.", 
"MatchLocalNames" : "MatchLocalNames is an option for Trace and related functions that specifies whether symbols such as x should match symbols with local names of the form x$nnn. ", 
"MatchQ" : "MatchQ[expr,form] returns True if the pattern form matches expr, and returns False otherwise. ", 
"MathieuC" : "MathieuC[a,q,z] gives the even Mathieu function with characteristic value a and parameter q. ", 
"MathieuCharacteristicA" : "MathieuCharacteristicA[r,q] gives the characteristic value aᵣ for even Mathieu functions with characteristic exponent r and parameter q. ", 
"MathieuCharacteristicB" : "MathieuCharacteristicB[r,q] gives the characteristic value bᵣ for odd Mathieu functions with characteristic exponent r and parameter q. ", 
"MathieuCharacteristicExponent" : "MathieuCharacteristicExponent[a,q] gives the characteristic exponent r for Mathieu functions with characteristic value a and parameter q. ", 
"MathieuCPrime" : "MathieuCPrime[a,q,z] gives the derivative with respect to z of the even Mathieu function with characteristic value a and parameter q. ", 
"MathieuGroupM11" : "MathieuGroupM11[] represents the sporadic simple Mathieu group M₁₁.", 
"MathieuGroupM12" : "MathieuGroupM12[] represents the sporadic simple Mathieu group M₁₂.", 
"MathieuGroupM22" : "MathieuGroupM22[] represents the sporadic simple Mathieu group M₂₂.", 
"MathieuGroupM23" : "MathieuGroupM23[] represents the sporadic simple Mathieu group M₂₃.", 
"MathieuGroupM24" : "MathieuGroupM24[] represents the sporadic simple Mathieu group M₂₄.", 
"MathieuS" : "MathieuS[a,q,z] gives the odd Mathieu function with characteristic value a and parameter q. ", 
"MathieuSPrime" : "MathieuSPrime[a,q,z] gives the derivative with respect to z of the odd Mathieu function with characteristic value a and parameter q. ", 
"MathMLForm" : "MathMLForm[expr] prints as a MathML form of expr. ", 
"MatrixExp" : "MatrixExp[m] gives the matrix exponential of m. \nMatrixExp[m,v] gives the matrix exponential of m applied to the vector v.", 
"MatrixForm" : "MatrixForm[list] prints with the elements of list arranged in a regular array. ", 
"MatrixPlot" : "MatrixPlot[m] generates a plot that gives a visual representation of the values of elements in a matrix.", 
"MatrixPower" : "MatrixPower[m,n] gives the nᵗʰ matrix power of the matrix m. \nMatrixPower[m,n,v] gives the nᵗʰ matrix power of the matrix m applied to the vector v.", 
"MatrixQ" : "MatrixQ[expr] gives True if expr is a list of lists or a two-dimensional SparseArray object that can represent a matrix, and gives False otherwise. \nMatrixQ[expr,test] gives True only if test yields True when applied to each of the matrix elements in expr. ", 
"MatrixRank" : "MatrixRank[m] gives the rank of the matrix m. ", 
"Max" : "Max[x₁,x₂,…] yields the numerically largest of the xᵢ. \nMax[{x₁,x₂,…},{y₁,…},…] yields the largest element of any of the lists. ", 
"MaxDetect" : "MaxDetect[image] gives a binary image in which white pixels correspond to constant extended maxima in image.\nMaxDetect[image,h] finds extended maxima where the range of values is not greater than h.", 
"MaxExtraBandwidths" : "MaxExtraBandwidths is an option to SmoothKernelDistribution that controls the behavior outside that data range.", 
"MaxExtraConditions" : "MaxExtraConditions is an option to Solve and related functions that specifies how many extra equational conditions on continuous parameters to allow in solutions that are given.", 
"MaxFilter" : "MaxFilter[image,r] filters image by replacing every value by the maximum in its range r neighborhood. \nMaxFilter[data,r] applies max filtering to an array of data.", 
"Maximize" : "Maximize[f,x] maximizes f with respect to x.\nMaximize[f,{x,y,…}] maximizes f with respect to x, y, …. \nMaximize[{f,cons},{x,y,…}] maximizes f subject to the constraints cons. \nMaximize[{f,cons},{x,y,…},dom] maximizes with variables over the domain dom, typically Reals or Integers.", 
"MaxIterations" : "MaxIterations is an option that specifies the maximum number of iterations that should be tried in various built-in functions and algorithms.", 
"MaxMemoryUsed" : "MaxMemoryUsed[] gives the maximum number of bytes used to store all data for the current Mathematica session. ", 
"MaxMixtureKernels" : "MaxMixtureKernels is an option for SmoothKernelDistribution and related functions that specifies the maximum number and location of kernel functions to use in the estimation.", 
"MaxPlotPoints" : "MaxPlotPoints is an option for plotting functions like ArrayPlot and ListPlot3D that specifies the maximum number of points that will explicitly be included in the output. ", 
"MaxPoints" : "MaxPoints is an option for NIntegrate specifying the maximum total number of times to sample the integrand.", 
"MaxRecursion" : "MaxRecursion is an option for functions like NIntegrate and Plot that specifies how many recursive subdivisions can be made. ", 
"MaxStableDistribution" : "MaxStableDistribution[μ,σ,ξ] represents a generalized maximum extreme value distribution with location parameter μ, scale parameter σ, and shape parameter ξ.", 
"MaxStepFraction" : "MaxStepFraction is an option to functions like NDSolve that specifies the maximum fraction of the total range to cover in a single step.", 
"MaxSteps" : "MaxSteps is an option to functions like NDSolve that specifies the maximum number of steps to take in generating a result.", 
"MaxStepSize" : "MaxStepSize is an option to functions like NDSolve that specifies the maximum size of a single step used in generating a result.", 
"MaxValue" : "MaxValue[f,x] gives the maximum value of f with respect to x.\nMaxValue[f,{x,y,…}] gives the maximum value of f with respect to x, y, …. \nMaxValue[{f,cons},{x,y,…}] gives the maximum value of f subject to the constraints cons. \nMaxValue[{f,cons},{x,y,…},dom] gives the maximum value of f over the domain dom, typically Reals or Integers.", 
"MaxwellDistribution" : "MaxwellDistribution[σ] represents a Maxwell distribution with scale parameter σ.", 
"McLaughlinGroupMcL" : "McLaughlinGroupMcL[] represents the sporadic simple McLaughlin group McL.", 
"Mean" : "Mean[list] gives the statistical mean of the elements in list. \nMean[dist] gives the mean of the symbolic distribution dist.", 
"MeanDeviation" : "MeanDeviation[list] gives the mean absolute deviation from the mean of the elements in list.", 
"MeanFilter" : "MeanFilter[image,r] filters image by replacing every value by the mean value in its range r neighborhood. \nMeanFilter[data,r] applies mean filtering to an array of data.", 
"MeanShift" : "MeanShift[list,d] replaces each element in list by the mean of the values of all elements that differ by less than d.", 
"MeanShiftFilter" : "MeanShiftFilter[image,r,d] replaces each pixel with the mean of the pixels in a range-r neighborhood and whose value is within a distance d.\nMeanShiftFilter[array,r,d] applies mean-shift filtering to a data array.", 
"Median" : "Median[list] gives the median of the elements in list. \nMedian[dist] gives the median of the symbolic distribution dist. ", 
"MedianDeviation" : "MedianDeviation[list] gives the median absolute deviation from the median of the elements in list.", 
"MedianFilter" : "MedianFilter[image,r] filters image by replacing every value by the median in its range r neighborhood. \nMedianFilter[data,r] applies median filtering to an array of data.", 
"Medium" : "Medium is a style or option setting that specifies that objects should be medium sized.", 
"MeijerG" : "MeijerG[{{a₁,…,aₙ},{Subscript[a,n+1],…,aₚ}},{{b₁,…,bₘ},{Subscript[b,m+1],…,Subscript[b,q]}},z] is the Meijer G function G Subsuperscript[, pq, mn](z|GridBox[{{{{{{a}, ₁}, ,, {…}, ,, {{a}, ₚ}}}}, {{{{{b}, ₁}, ,, {…}, ,, {Subscript[, {b}, ,, {q}, ]}}}}}]). ", 
"MemberQ" : "MemberQ[list,form] returns True if an element of list matches form, and False otherwise. \nMemberQ[list,form,levelspec] tests all parts of list specified by levelspec. ", 
"MemoryConstrained" : "MemoryConstrained[expr,b] evaluates expr, stopping if more than b bytes of memory are requested. \nMemoryConstrained[expr,b,failexpr] returns failexpr if the memory constraint is not met. ", 
"MemoryInUse" : "MemoryInUse[] gives the number of bytes currently being used to store all data in the current Mathematica kernel session. \nMemoryInUse[$FrontEnd] gives the number of bytes used in the Mathematica front end.", 
"MenuCommandKey" : "MenuCommandKey is an option for cells that specifies the keyboard shortcut to be associated with a style listed in the Format ▶ Style submenu.", 
"MenuPacket" : "MenuPacket[integer,string] is a MathLink packet indicating a menu request with title string.", 
"MenuSortingValue" : "MenuSortingValue is an option for cells and notebooks that specifies where a cell style, stylesheet, or palette is listed in the Format ▶ Style submenu, Format ▶ Stylesheet submenu, or Palettes menu respectively.", 
"MenuStyle" : "MenuStyle is an option for menu-generating constructs that specifies the style to use in displaying menu items. ", 
"MenuView" : "MenuView[{lbl₁->expr₁,lbl₂->expr₂,…}] represents an object in which selecting the menu item with label lblᵢ displays exprᵢ. \nMenuView[{lbl₁->expr₁,lbl₂->expr₂,…},i] makes the iᵗʰ item be the one currently selected.\nMenuView[{{v₁,lbl₁->expr₁},{v₂,lbl₂->expr₂},…},v] associates values vᵢ with successive menu items, and makes the item with value v be the one currently selected. \nMenuView[{expr₁,expr₂,…}] takes the menu items' labels to be successive integers.", 
"Mesh" : "Mesh is an option for Plot3D, DensityPlot, and other plotting functions that specifies what mesh should be drawn. ", 
"MeshFunctions" : "MeshFunctions is an option for plotting functions that specifies functions to use to determine the placement of mesh divisions. ", 
"MeshShading" : "MeshShading is an option for plotting functions that gives lists of colors to use for regions between mesh divisions. ", 
"MeshStyle" : "MeshStyle is an option for Plot3D, DensityPlot, and other plotting functions that specifies the style in which to draw a mesh. ", 
"Message" : "Message[symbol::tag] prints the message symbol::tag unless it has been switched off. \nMessage[symbol::tag,e₁,e₂,…] prints a message, inserting the values of the eᵢ as needed. ", 
"MessageDialog" : "MessageDialog[expr] puts up a standard message dialog that displays expr together with an OK button.\nMessageDialog[expr,{lbl₁:>act₁,lbl₂:>act₂,…}] includes buttons with labels lblᵢ that evaluate the corresponding actᵢ if clicked.", 
"MessageList" : "MessageList[n] is a global object assigned to be a list of the names of messages generated during the processing of the nᵗʰ input line. ", 
"MessageName" : "symbol::tag is a name for a message. ", 
"MessagePacket" : "MessagePacket[symbol,string] is a MathLink packet containing a Mathematica message identifier of the form symbol::string.", 
"Messages" : "Messages[symbol] gives all the messages assigned to a particular symbol. ", 
"MetaCharacters" : "MetaCharacters is an option to StringPosition. With MetaCharacters -> None, no strings have special meanings. MetaCharacters -> {c₁, c₂, c₃} specifies the metacharacters for pattern escape, single character matching and multiple character matching. MetaCharacters -> Automatic is equivalent to MetaCharacters -> {\"\\\\\", \".\", \"*\"}.", 
"Method" : "Method is an option for various algorithm-intensive functions that specifies what internal methods they should use.", 
"MexicanHatWavelet" : "MexicanHatWavelet[] represents the Mexican hat wavelet of width 1.\nMexicanHatWavelet[σ] represents the Mexican hat wavelet of width σ.", 
"MeyerWavelet" : "MeyerWavelet[] represents the Meyer wavelet of order 3.\nMeyerWavelet[n] represents the Meyer wavelet of order n evaluated on the equally spaced interval {-10,10}.\nMeyerWavelet[n,lim] represents the Meyer wavelet of order n evaluated on the equally spaced interval {-lim,lim}. ", 
"Min" : "Min[x₁,x₂,…] yields the numerically smallest of the xᵢ. \nMin[{x₁,x₂,…},{y₁,…},…] yields the smallest element of any of the lists. ", 
"MinDetect" : "MinDetect[image] gives a binary image in which white pixels correspond to constant extended minima in image.\nMinDetect[image,h] finds extended minima where the range of values is not greater than h.", 
"MinFilter" : "MinFilter[image,r] filters image by replacing every value by the minimum in its range r neighborhood. \nMinFilter[data,r] applies min filtering to an array of data.", 
"MinimalPolynomial" : "MinimalPolynomial[s,x] gives the minimal polynomial in x for which the algebraic number s is a root. ", 
"MinimalStateSpaceModel" : "MinimalStateSpaceModel[ss] gives the minimal state-space model of the StateSpaceModel object ss.", 
"Minimize" : "Minimize[f,x] minimizes f with respect to x.\nMinimize[f,{x,y,…}] minimizes f with respect to x, y, …. \nMinimize[{f,cons},{x,y,…}] minimizes f subject to the constraints cons. \nMinimize[{f,cons},{x,y,…},dom] minimizes with variables over the domain dom, typically Reals or Integers.", 
"Minors" : "Minors[m] gives the minors of a matrix m. \nMinors[m,k] gives the kᵗʰ minors. ", 
"MinRecursion" : "MinRecursion is an option for NIntegrate and other numerical functions that use a recursive algorithm. With MinRecursion -> n, a minimum depth of recursion of n is used before tests for convergence begin.", 
"MinSize" : "MinSize is an option of certain BoxForm primitives.", 
"MinStableDistribution" : "MinStableDistribution[μ,σ,ξ] represents a generalized minimum extreme value distribution with location parameter μ, scale parameter σ, and shape parameter ξ.", 
"Minus" : "-x is the arithmetic negation of x. ", 
"MinusPlus" : "MinusPlus[x] displays as ∓x.\nMinusPlus[x,y,…] displays as x∓y∓….", 
"MinValue" : "MinValue[f,x] gives the minimum value of f with respect to x.\nMinValue[f,{x,y,…}] gives the minimum value of f with respect to x, y, …. \nMinValue[{f,cons},{x,y,…}] gives the minimum value of f subject to the constraints cons. \nMinValue[{f,cons},{x,y,…},dom] gives the minimum value of f over the domain dom, typically Reals or Integers.", 
"Missing" : "Missing[] represents data that is missing.\nMissing[\"reason\"] specifies a reason for the data being missing.\nMissing[\"reason\",expr] associates the expression expr with the missing data. ", 
"MixtureDistribution" : "MixtureDistribution[{w₁,…,wₙ},{dist₁,…,distₙ}] represents a mixture distribution whose CDF is given as a sum of the CDFs of the component distributions distᵢ, each with weight wᵢ.", 
"Mod" : "Mod[m,n] gives the remainder on division of m by n. \nMod[m,n,d] uses an offset d. ", 
"Modal" : "Modal is an option to functions such as CreateDialog that specifies whether the dialog that is created should be modal to the Mathematica front end.", 
"Mode" : "Mode is an option to Solve and related functions that specifies in what sense the equations are to be solved. The possible settings for Mode are Generic, Modular, and Rational.", 
"Modular" : "Modular is a setting for the option Mode in Solve and related functions, which specifies that equations need be satisfied only modulo an integer.", 
"ModularLambda" : "ModularLambda[τ] gives the modular lambda elliptic function λ(τ). ", 
"Module" : "Module[{x,y,…},expr] specifies that occurrences of the symbols x, y, … in expr should be treated as local. \nModule[{x=x₀,…},expr] defines initial values for x, …. ", 
"Modulus" : "Modulus->n is an option that can be given in certain algebraic functions to specify that integers should be treated modulo n. ", 
"MoebiusMu" : "MoebiusMu[n] gives the Möbius function μ(n). ", 
"Moment" : "Moment[list,r] gives the rᵗʰ sample moment of the elements in list.\nMoment[dist,r] gives the rᵗʰ moment of the symbolic distribution dist.\nMoment[…,{r₁,r₂,…}] gives the {r₁,r₂,…}ᵗʰ multivariate moment. \nMoment[r] represents the rᵗʰ formal moment. ", 
"MomentConvert" : "MomentConvert[mexpr,form] converts the moment expression mexpr to the specified form. ", 
"MomentEvaluate" : "MomentEvaluate[mexpr,dist] evaluates formal moments in the moment expression mexpr on the distribution dist.\nMomentEvaluate[mexpr,list] evaluates formal moments and formal sample moments in mexpr on the data list. \nMomentEvaluate[mexpr,dist,list] evaluates formal moments on the distribution dist and formal sample moments on the data list. ", 
"MomentGeneratingFunction" : "MomentGeneratingFunction[dist,t] gives the moment generating function for the symbolic distribution dist as a function of the variable t. \nMomentGeneratingFunction[dist,{t₁,t₂,…}] gives the moment generating function for the multivariate symbolic distribution dist as a function of the variables t₁, t₂, …. ", 
"Monitor" : "Monitor[expr,mon] generates a temporary monitor cell in which the continually updated current value of mon is displayed during the course of evaluation of expr. ", 
"MonomialList" : "MonomialList[poly] gives the list of all monomials in the polynomial poly.\nMonomialList[poly,{x₁,x₂,…}] gives the list of monomials with respect to the variables xᵢ in poly.\nMonomialList[poly,{x₁,x₂,…},order] puts the monomials in the specified order.", 
"MonomialOrder" : "MonomialOrder is an option for GroebnerBasis, PolynomialReduce and NSolve which specifies the monomial order to be used in computations.", 
"MonsterGroupM" : "MonsterGroupM[] represents the sporadic simple monster group M.", 
"MorletWavelet" : "MorletWavelet[] represents a Morlet wavelet. ", 
"MorphologicalBinarize" : "MorphologicalBinarize[image,{t₁,t₂}] creates a binary image from image by replacing all values above the upper threshold t₂ with 1, also including pixels with intensities above the lower threshold t₁ that are connected to the foreground.\nMorphologicalBinarize[image,t] uses t as the upper threshold, automatically choosing a suitable value for the lower threshold.\nMorphologicalBinarize[image] chooses the lower and the upper threshold automatically.", 
"MorphologicalBranchPoints" : "MorphologicalBranchPoints[image] gives a version of a binary image image in which white pixels represent the morphological branch points.", 
"MorphologicalComponents" : "MorphologicalComponents[image] gives an array in which each pixel of image is replaced by an integer index representing the connected foreground image component in which the pixel lies.\nMorphologicalComponents[image,t] treats values above t as foreground.", 
"MorphologicalEulerNumber" : "MorphologicalEulerNumber[image] computes the morphological Euler number of regions in a binary image.\nMorphologicalEulerNumber[image,t] treats values above t as foreground.", 
"MorphologicalGraph" : "MorphologicalGraph[image] gives a graph object that represents the connectivity of the morphological branch points and endpoints of the objects in image after applying morphological thinning.", 
"MorphologicalPerimeter" : "MorphologicalPerimeter[image] picks out the morphological perimeter of regions of foreground in image.\nMorphologicalPerimeter[image,t] treats values above t as foreground.", 
"MorphologicalTransform" : "MorphologicalTransform[image,f] applies the function f to the 3×3 neighborhood of each pixel in a binary image image.\nMorphologicalTransform[image,rule] applies a morphological transformation specified by a rule number rule.\nMorphologicalTransform[image,\"name\"] uses a named transformation \"name\".\nMorphologicalTransform[image,transformation,n] applies n iterations of transformation on image.", 
"Most" : "Most[expr] gives expr with the last element removed. ", 
"MouseAnnotation" : "MouseAnnotation[] gives any mouse annotation associated with the expression at the current mouse position. ", 
"MouseAppearance" : "MouseAppearance[expr,graphic] changes the mouse cursor to appear as graphic when the mouse pointer is in the area where expr is displayed.\nMouseAppearance[expr,graphic,{x,y}] uses the coordinates {x,y} in the graphic as the hotspot for the mouse cursor.\nMouseAppearance[expr,graphic,Scaled[{x,y}]] uses the scaled coordinates {x,y} as the hotspot for the mouse cursor.\nMouseAppearance[expr,\"cursorname\"] uses the named cursor \"cursorname\" as the mouse cursor.\nMouseAppearance[expr,Automatic] reverts to normal mouse cursor behavior.", 
"MouseButtons" : "MouseButtons[] gives a list of the mouse buttons currently being pressed.", 
"Mouseover" : "Mouseover[expr,over] represents an object that displays as over when the mouse pointer is over it, and as expr otherwise. ", 
"MousePosition" : "MousePosition[] gives the current mouse position in the notebook front end. \nMousePosition[\"coords\"] gives the mouse position with respect to the specified coordinate system.\nMousePosition[\"coords\",def] returns def if the mouse is not over an object that defines the specified coordinate system.", 
"MovingAverage" : "MovingAverage[list,r] gives the moving average of list, computed by averaging runs of r elements.\nMovingAverage[list,{w₁,w₂,…,wᵣ}] gives the moving average of list, computed with weights wᵢ.", 
"MovingMedian" : "MovingMedian[list,r] gives the moving median of list, computed using spans of r elements.", 
"MoyalDistribution" : "MoyalDistribution[μ,σ] represents a Moyal distribution with location parameter μ and scale parameter σ.", 
"MultiedgeStyle" : "MultiedgeStyle is an option for GraphPlot and related functions that specifies how to draw multiple edges.", 
"MultilaunchWarning" : "MultilaunchWarning is a global option that specifies whether a warning is given when you try to modify user preferences while running two copies of Mathematica simultaneously.", 
"MultilineFunction" : "MultilineFunction is an option for UnderscriptBox and related box objects that specifies what to do when the contents of a box object are too long to fit on one line.", 
"Multinomial" : "Multinomial[n₁,n₂,…] gives the multinomial coefficient (n₁+n₂+…)!\/(n₁! n₂! …). ", 
"MultinomialDistribution" : "MultinomialDistribution[n,{p₁,p₂,…,pₘ}] represents a multinomial distribution with n trials and probabilities pᵢ.", 
"MultinormalDistribution" : "MultinormalDistribution[μ,Σ] represents a multivariate normal (Gaussian) distribution with mean vector μ and covariance matrix Σ.", 
"MultiplicativeOrder" : "MultiplicativeOrder[k,n] gives the multiplicative order of k modulo n, defined as the smallest integer m such that kᵐ≡1mod n. \nMultiplicativeOrder[k,n,{r₁,r₂,…}] gives the generalized multiplicative order of k modulo n, defined as the smallest integer m such that kᵐ≡rᵢmod n for some i. ", 
"Multiplicity" : "Multiplicity is an option to Roots. Multiplicity -> n specifies that the multiplicity of each of the roots is n in the final result.", 
"MultivariateHypergeometricDistribution" : "MultivariateHypergeometricDistribution[n,{m₁,m₂,…,mₖ}] represents a multivariate hypergeometric distribution with n draws without replacement from a collection containing mᵢ objects of type i. ", 
"MultivariatePoissonDistribution" : "MultivariatePoissonDistribution[μ₀,{μ₁,μ₂,…}] represents a multivariate Poisson distribution with mean vector {μ₀+μ₁,μ₀+μ₂,…}.", 
"MultivariateTDistribution" : "MultivariateTDistribution[Σ,ν] represents the multivariate Student t distribution with scale matrix Σ and degrees of freedom parameter ν.\nMultivariateTDistribution[μ,Σ,ν] represents the multivariate Student t distribution with location μ, scale matrix Σ, and ν degrees of freedom.", 
"N" : "N[expr] gives the numerical value of expr. \nN[expr,n] attempts to give a result with n‐digit precision. ", 
"NakagamiDistribution" : "NakagamiDistribution[μ,ω] represents a Nakagami distribution with shape parameter μ and spread parameter ω.", 
"NameQ" : "NameQ[\"string\"] yields True if there are any symbols whose names match the string pattern given, and yields False otherwise. ", 
"Names" : "Names[\"string\"] gives a list of the names of symbols which match the string. \nNames[patt] gives a list of names matching the arbitrary string pattern patt.", 
"Nand" : "Nand[e₁,e₂,…] is the logical NAND function. It evaluates its arguments in order, giving True immediately if any of them are False, and False if they are all True. ", 
"NArgMax" : "NArgMax[f,x] gives a position xₘₐₓ at which f is numerically maximized.\nNArgMax[f,{x,y,…}] gives a position {xₘₐₓ,yₘₐₓ,…} at which f is numerically maximized.\nNArgMax[{f,cons},{x,y,…}] gives a position at which f is numerically maximized subject to the constraints cons. ", 
"NArgMin" : "NArgMin[f,x] gives a position xₘᵢₙ at which f is numerically minimized.\nNArgMin[f,{x,y,…}] gives a position {xₘᵢₙ,yₘᵢₙ,…} at which f is numerically minimized.\nNArgMin[{f,cons},{x,y,…}] gives a position at which f is numerically minimized subject to the constraints cons. ", 
"NBernoulliB" : "NBernoulliB[n] gives the numerical value of the nᵗʰ Bernoulli number. \nNBernoulliB[n, d] gives the result to d-digit precision.", 
"NCache" : "NCache[x,xn] represents a numeric cache object for a quantity with exact value x and approximate numerical value xn.", 
"NDSolve" : "NDSolve[eqns,y,{x,xₘᵢₙ,xₘₐₓ}] finds a numerical solution to the ordinary differential equations eqns for the function y with the independent variable x in the range xₘᵢₙ to xₘₐₓ. \nNDSolve[eqns,y,{x,xₘᵢₙ,xₘₐₓ},{t,tₘᵢₙ,tₘₐₓ}] finds a numerical solution to the partial differential equations eqns. \nNDSolve[eqns,{y₁,y₂,…},{x,xₘᵢₙ,xₘₐₓ}] finds numerical solutions for the functions yᵢ. ", 
"Nearest" : "Nearest[{elem₁,elem₂,…},x] gives the list of elemᵢ to which x is nearest. \nNearest[{elem₁->v₁,elem₂->v₂,…},x] gives the vᵢ corresponding to the elemᵢ to which x is nearest. \nNearest[{elem₁,elem₂,…}->{v₁,v₂,…},x] gives the same result. \nNearest[{elem₁,elem₂,…}->Automatic,x] takes the vᵢ to be successive integers i. \nNearest[data,x,n] gives the n nearest elemᵢ to x. \nNearest[data] generates a NearestFunction[…] which can be applied repeatedly to different x. ", 
"NearestFunction" : "NearestFunction[data] represents a function whose values give the elements closest to an element that is supplied.", 
"NeedlemanWunschSimilarity" : "NeedlemanWunschSimilarity[u,v] gives a number representing the Needleman–Wunsch similarity between strings or vectors u and v.", 
"Needs" : "Needs[\"context`\"] loads an appropriate file if the specified context is not already in $Packages. \nNeeds[\"context`\",\"file\"] loads file if the specified context is not already in $Packages. ", 
"Negative" : "Negative[x] gives True if x is a negative number. ", 
"NegativeBinomialDistribution" : "NegativeBinomialDistribution[n,p] represents a negative binomial distribution with parameters n and p.", 
"NegativeMultinomialDistribution" : "NegativeMultinomialDistribution[n,p] represents a negative multinomial distribution with parameter n and failure probability vector p.", 
"NeighborhoodGraph" : "NeighborhoodGraph[g,v] gives the graph neighborhood vertex v in the graph g. \nNeighborhoodGraph[g,{a₁,a₂,…}] gives the graph neighborhood of the aᵢ that can be vertices, edges, or subgraphs of g.\nNeighborhoodGraph[g,patt] gives the graph neighborhood of the vertices and edges that match the pattern patt.\nNeighborhoodGraph[g,…,k] gives the neighborhood up to distance k.", 
"Nest" : "Nest[f,expr,n] gives an expression with f applied n times to expr. ", 
"NestedGreaterGreater" : "NestedGreaterGreater[x,y,…] displays as x⪢y⪢….", 
"NestedLessLess" : "NestedLessLess[x,y,…] displays as x⪡y⪡….", 
"NestList" : "NestList[f,expr,n] gives a list of the results of applying f to expr 0 through n times. ", 
"NestWhile" : "NestWhile[f,expr,test] starts with expr, then repeatedly applies f until applying test to the result no longer yields True. \nNestWhile[f,expr,test,m] supplies the most recent m results as arguments for test at each step. \nNestWhile[f,expr,test,All] supplies all results so far as arguments for test at each step. \nNestWhile[f,expr,test,m,max] applies f at most max times. \nNestWhile[f,expr,test,m,max,n] applies f an extra n times. \nNestWhile[f,expr,test,m,max,-n] returns the result found when f had been applied n fewer times. ", 
"NestWhileList" : "NestWhileList[f,expr,test] generates a list of the results of applying f repeatedly, starting with expr, and continuing until applying test to the result no longer yields True. \nNestWhileList[f,expr,test,m] supplies the most recent m results as arguments for test at each step. \nNestWhileList[f,expr,test,All] supplies all results so far as arguments for test at each step. \nNestWhileList[f,expr,test,m,max] applies f at most max times. ", 
"NevilleThetaC" : "NevilleThetaC[z,m] gives the Neville theta function Subscript[ϑ,c] (z|m). ", 
"NevilleThetaD" : "NevilleThetaD[z,m] gives the Neville theta function Subscript[ϑ,d] (z|m). ", 
"NevilleThetaN" : "NevilleThetaN[z,m] gives the Neville theta function ϑₙ (z|m). ", 
"NevilleThetaS" : "NevilleThetaS[z,m] gives the Neville theta function ϑₛ (z|m). ", 
"NExpectation" : "NExpectation[expr,x≈dist] gives the numerical expectation of expr under the assumption that x follows the probability distribution dist.\nNExpectation[expr,{x₁,x₂,…}≈dist] gives the numerical expectation of expr under the assumption that {x₁,x₂,…} follows the multivariate distribution dist. \nNExpectation[expr,{x₁≈dist₁,x₂≈dist₂,…}] gives the numerical expectation of expr under the assumption that x₁, x₂, … are independent and follow the distributions dist₁, dist₂, …. \nNExpectation[expr⦈pred,…] gives the numerical conditional expectation of expr given pred.", 
"NextPrime" : "NextPrime[n] gives the next prime above n.\nNextPrime[n,k] gives the kᵗʰ prime above n.", 
"NHoldAll" : "NHoldAll is an attribute which specifies that none of the arguments to a function should be affected by N. ", 
"NHoldFirst" : "NHoldFirst is an attribute which specifies that the first argument to a function should not be affected by N. ", 
"NHoldRest" : "NHoldRest is an attribute which specifies that all but the first argument to a function should not be affected by N. ", 
"NicholsGridLines" : "NicholsGridLines is an option to NicholsPlot that specifies contours of constant magnitude and constant phase of the closed-loop system.", 
"NicholsPlot" : "NicholsPlot[g] gives the Nichols plot of a rational function g in one complex variable.\nNicholsPlot[sys] gives the Nichols plot of a TransferFunctionModel or StateSpaceModel object sys.\nNicholsPlot[…,{fₘᵢₙ,fₘₐₓ}] gives the plot for frequencies from fₘᵢₙ to fₘₐₓ.", 
"NIntegrate" : "NIntegrate[f,{x,xₘᵢₙ,xₘₐₓ}] gives a numerical approximation to the integral Subsuperscript[ ∫, xₘᵢₙ, xₘₐₓ] f dx. \nNIntegrate[f,{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ},…] gives a numerical approximation to the multiple integral Subsuperscript[ ∫, xₘᵢₙ, xₘₐₓ]dxSubsuperscript[ ∫, yₘᵢₙ, yₘₐₓ]dy … f.", 
"NMaximize" : "NMaximize[f,x] maximizes f numerically with respect to x.\nNMaximize[f,{x,y,…}] maximizes f numerically with respect to x, y, …. \nNMaximize[{f,cons},{x,y,…}] maximizes f numerically subject to the constraints cons. ", 
"NMaxValue" : "NMaxValue[f,x] gives the maximum value of f with respect to x.\nNMaxValue[f,{x,y,…}] gives the maximum value of f with respect to x, y, …. \nNMaxValue[{f,cons},{x,y,…}] gives the maximum value of f subject to the constraints cons. ", 
"NMinimize" : "NMinimize[f,x] minimizes f numerically with respect to x.\nNMinimize[f,{x,y,…}] minimizes f numerically with respect to x, y, …. \nNMinimize[{f,cons},{x,y,…}] minimizes f numerically subject to the constraints cons. ", 
"NMinValue" : "NMinValue[f,x] gives the minimum value of f with respect to x.\nNMinValue[f,{x,y,…}] gives the minimum value of f with respect to x, y, …. \nNMinValue[{f,cons},{x,y,…}] gives the minimum value of f subject to the constraints cons.", 
"NominalVariables" : "NominalVariables is an option for fitting functions such as LinearModelFit that specifies which variables should be treated as having discrete values specified by names. ", 
"NonAssociative" : "NonAssociative is a symbol that represents a non-associative operator in formatting functions.", 
"NoncentralBetaDistribution" : "NoncentralBetaDistribution[α,β,δ] represents a noncentral beta distribution with shape parameters α, β and noncentrality parameter δ.", 
"NoncentralChiSquareDistribution" : "NoncentralChiSquareDistribution[ν,λ] represents a noncentral χ² distribution with ν degrees of freedom and noncentrality parameter λ.", 
"NoncentralFRatioDistribution" : "NoncentralFRatioDistribution[n,m,λ] represents a noncentral F-ratio distribution with n numerator degrees of freedom, m denominator degrees of freedom, and numerator noncentrality parameter λ.\nNoncentralFRatioDistribution[n,m,λ, η] represents a doubly noncentral F-ratio distribution with numerator noncentrality parameter λ and denominator noncentrality parameter η.", 
"NoncentralStudentTDistribution" : "NoncentralStudentTDistribution[ν,δ] represents a noncentral Student t distribution with ν degrees of freedom and noncentrality parameter δ.", 
"NonCommutativeMultiply" : "a**b**c is a general associative, but non‐commutative, form of multiplication. ", 
"NonConstants" : "NonConstants is an option for D which gives a list of objects to be taken to depend implicitly on the differentiation variables. ", 
"None" : "None is a setting used for certain options. ", 
"NonlinearModelFit" : "NonlinearModelFit[{y₁,y₂,…},form,{β₁,…},x] constructs a nonlinear model with structure form that fits the yᵢ for successive x values 1, 2, … using the parameters β₁, ….\nNonlinearModelFit[{{x₁₁,x₁₂,…,y₁},{x₂₁,x₂₂,…,y₂},…},form,{β₁,…},{x₁,…}] constructs a nonlinear model where form depends on the variables xₖ. \nNonlinearModelFit[data,{form,cons},{β₁,…},{x₁,…}] constructs a nonlinear model subject to the parameter constraints cons.", 
"NonNegative" : "NonNegative[x] gives True if x is a non‐negative number. ", 
"NonPositive" : "NonPositive[x] gives True if x is a non‐positive number. ", 
"Nor" : "Nor[e₁,e₂,…] is the logical NOR function. It evaluates its arguments in order, giving False immediately if any of them are True, and True if they are all False. ", 
"NorlundB" : "NorlundB[n,a] gives Nørlund polynomials B Subsuperscript[, n, (a)] of degree n in a.\nNorlundB[n,a,x] gives generalized Bernoulli polynomials B Subsuperscript[, n, (a)](x).", 
"Norm" : "Norm[expr] gives the norm of a number, vector or matrix. \nNorm[expr,p] gives the p‐norm. ", 
"Normal" : "Normal[expr] converts expr to a normal expression, from a variety of special forms. ", 
"NormalDistribution" : "NormalDistribution[μ,σ] represents a normal (Gaussian) distribution with mean μ and standard deviation σ.\nNormalDistribution[] represents a normal distribution with zero mean and unit standard deviation.", 
"Normalize" : "Normalize[v] gives the normalized form of a vector v. \nNormalize[z] gives the normalized form of a complex number z.\nNormalize[expr,f] normalizes with respect to the norm function f.", 
"NormalizedSquaredEuclideanDistance" : "NormalizedSquaredEuclideanDistance[u,v] gives the normalized squared Euclidean distance between vectors u and v.", 
"NormalsFunction" : "NormalsFunction is an option for Plot3D and related functions that specifies a function to apply to determine the effective surface normals at every point.", 
"NormFunction" : "NormFunction is an option for functions such as FindFit and NDSolve which gives a function to be minimized in generating results.", 
"Not" : "!expr is the logical NOT function. It gives False if expr is True, and True if it is False. ", 
"NotCongruent" : "NotCongruent[x,y,…] displays as x≢y≢….", 
"NotCupCap" : "NotCupCap[x,y,…] displays as x≭y≭….", 
"NotDoubleVerticalBar" : "NotDoubleVerticalBar[x,y,…] displays as x∦y∦….", 
"Notebook" : "Notebook[{cell₁,cell₂,…}] is the low‐level construct that represents a notebook manipulated by the Mathematica front end. ", 
"NotebookApply" : "NotebookApply[notebook,data] writes data into a notebook at the current selection, replacing the first selection placeholder in data by the current selection, and then setting the current selection to be just after the data written. \nNotebookApply[notebook,data,sel] writes data into a notebook and then sets the current selection to be as specified by sel. ", 
"NotebookAutoSave" : "NotebookAutoSave is a notebook option which specifies whether the notebook should automatically be saved after each piece of output generated by evaluation in it. ", 
"NotebookClose" : "NotebookClose[notebook] closes the notebook corresponding to the specified notebook object. \nNotebookClose[] closes the current evaluation notebook.", 
"NotebookConvertSettings" : "NotebookConvertSettings->{opt₁->val₁,opt₂->val₂,…} is a global option that specifies settings for converting imported legacy notebooks.", 
"NotebookCreate" : "NotebookCreate[] creates a new open notebook in the front end. \nNotebookCreate[options] sets up the specified options for the new notebook. ", 
"NotebookDelete" : "NotebookDelete[notebook] deletes the current selection in the notebook corresponding to the specified notebook object. \nNotebookDelete[] deletes the current selection in the current evaluation notebook.", 
"NotebookDirectory" : "NotebookDirectory[] gives the directory of the current evaluation notebook. \nNotebookDirectory[nb] gives the directory for the notebook specified by nb. ", 
"NotebookDynamicExpression" : "NotebookDynamicExpression is an option for notebooks that specifies an expression to be dynamically updated whenever that notebook is open.", 
"NotebookEvaluate" : "NotebookEvaluate[notebook] evaluates all the evaluatable cells in notebook.", 
"NotebookEventActions" : "NotebookEventActions is a notebook option that gives a list of actions to perform when specified events occur in connection with the notebook. ", 
"NotebookFileName" : "NotebookFileName[] gives the file name of the current evaluation notebook. \nNotebookFileName[nb] gives the file name for the notebook specified by nb. ", 
"NotebookFind" : "NotebookFind[notebook,data] sets the current selection in the specified notebook object to be the next occurrence of data. \nNotebookFind[notebook,data,Previous] sets the current selection to be the previous occurrence. \nNotebookFind[notebook,data,All] sets the current selection to be all occurrences. \nNotebookFind[notebook,data,dir,elems] searches the elements of cells specified by elems. ", 
"NotebookGet" : "NotebookGet[obj] gets the raw expression corresponding to the notebook represented by the notebook object obj. \nNotebookGet[] gets the raw expression corresponding to the currently selected notebook. ", 
"NotebookInformation" : "NotebookInformation[] gives a list of properties of the current evaluation notebook.\nNotebookInformation[notebook] gives a list of properties for the specified notebook.", 
"NotebookLocate" : "NotebookLocate[\"tag\"] locates all cells with the specified tag in your current input notebook, selecting the cells and scrolling to the position of the first one. \nNotebookLocate[{\"file\",\"tag\"}] if necessary opens the notebook stored in file, then locates cells with the specified tag. ", 
"NotebookObject" : "NotebookObject[fe,id] is an object that represents an open notebook in the front end. ", 
"NotebookOpen" : "NotebookOpen[\"name\"] opens an existing notebook with the specified name, returning the corresponding notebook object. \nNotebookOpen[\"name\",options] opens a notebook using the options given. \nNotebookOpen[\"http:\/\/url\",…] opens a notebook from any accessible URL. ", 
"NotebookPath" : "NotebookPath is a global option that determines which directories are searched when a specified notebook is needed.", 
"NotebookPrint" : "NotebookPrint[expr] sends a notebook containing expr to your default printer.\nNotebookPrint[notebook] sends the specified notebook to your default printer. \nNotebookPrint[notebook,\"file.ext\"] saves a print‐ready form of the notebook to a file in the format indicated by the file extension ext. \nNotebookPrint[] sends the current evaluation notebook to your default printer.", 
"NotebookPut" : "NotebookPut[expr] creates a notebook corresponding to expr and makes it the currently selected notebook in the front end. \nNotebookPut[] creates a new empty notebook.\nNotebookPut[expr,obj] replaces the notebook represented by the notebook object obj with one corresponding to expr. ", 
"NotebookRead" : "NotebookRead[notebook] gives the expression corresponding to the current selection in the specified notebook object. ", 
"Notebooks" : "Notebooks[] gives a list of notebooks currently open in the front end. ", 
"NotebookSave" : "NotebookSave[notebook] saves the current version of the specified notebook. \nNotebookSave[notebook,\"file\"] saves the notebook in the specified file. \nNotebookSave[] saves the current version of the current evaluation notebook in a file.", 
"NotebookSelection" : "NotebookSelection[] represents the current selection in the current evaluation notebook in the front end.\nNotebookSelection[nb] represents the current selection associated with the open notebook nb. ", 
"NotebooksMenu" : "NotebooksMenu is a global option that specifies which recently opened notebooks are listed under the File menu.", 
"NotebookWrite" : "NotebookWrite[notebook,data] writes data into a notebook at the current selection, setting the current selection to be just after the data written. \nNotebookWrite[notebook,data,sel] writes data into a notebook, setting the current selection to be as specified by sel. ", 
"NotElement" : "NotElement[x,dom] or x∉dom asserts that x is not an element of the domain dom.\nNotElement[x₁|…|xₙ,dom] asserts that none of the xᵢ are elements of dom.\nNotElement[patt,dom] asserts that any expression matching the pattern patt is not an element of the domain dom.", 
"NotEqualTilde" : "NotEqualTilde[x,y,…] displays as xy….", 
"NotExists" : "NotExists[x,y] displays as ∄ₓy.", 
"NotGreater" : "NotGreater[x,y,…] displays as x≯y≯….", 
"NotGreaterEqual" : "NotGreaterEqual[x,y,…] displays as x≱y≱….", 
"NotGreaterFullEqual" : "NotGreaterFullEqual[x,y,…] displays as x≩y≩….", 
"NotGreaterGreater" : "NotGreaterGreater[x,y,…] displays as xy….", 
"NotGreaterLess" : "NotGreaterLess[x,y,…] displays as x≹y≹….", 
"NotGreaterSlantEqual" : "NotGreaterSlantEqual[x,y,…] displays as xy….", 
"NotGreaterTilde" : "NotGreaterTilde[x,y,…] displays as x≵y≵….", 
"NotHumpDownHump" : "NotHumpDownHump[x,y,…] displays as xy….", 
"NotHumpEqual" : "NotHumpEqual[x,y,…] displays as xy….", 
"NotLeftTriangle" : "NotLeftTriangle[x,y,…] displays as x⋪y⋪….", 
"NotLeftTriangleBar" : "NotLeftTriangleBar[x,y,…] displays as xy….", 
"NotLeftTriangleEqual" : "NotLeftTriangleEqual[x,y,…] displays as x⋬y⋬….", 
"NotLess" : "NotLess[x,y,…] displays as x≮y≮….", 
"NotLessEqual" : "NotLessEqual[x,y,…] displays as x≰y≰….", 
"NotLessFullEqual" : "NotLessFullEqual[x,y,…] displays as x≨y≨….", 
"NotLessGreater" : "NotLessGreater[x,y,…] displays as x≸y≸….", 
"NotLessLess" : "NotLessLess[x,y,…] displays as xy….", 
"NotLessSlantEqual" : "NotLessSlantEqual[x,y,…] displays as xy….", 
"NotLessTilde" : "NotLessTilde[x,y,…] displays as x≴y≴….", 
"NotNestedGreaterGreater" : "NotNestedGreaterGreater[x,y,…] displays as xy….", 
"NotNestedLessLess" : "NotNestedLessLess[x,y,…] displays as xy….", 
"NotPrecedes" : "NotPrecedes[x,y,…] displays as x⊀y⊀….", 
"NotPrecedesEqual" : "NotPrecedesEqual[x,y,…] displays as xy….", 
"NotPrecedesSlantEqual" : "NotPrecedesSlantEqual[x,y,…] displays as x⋠y⋠….", 
"NotPrecedesTilde" : "NotPrecedesTilde[x,y,…] displays as x⋨y⋨….", 
"NotReverseElement" : "NotReverseElement[x,y,…] displays as x∌y∌….", 
"NotRightTriangle" : "NotRightTriangle[x,y,…] displays as x⋫y⋫….", 
"NotRightTriangleBar" : "NotRightTriangleBar[x,y,…] displays as xy….", 
"NotRightTriangleEqual" : "NotRightTriangleEqual[x,y,…] displays as x⋭y⋭….", 
"NotSquareSubset" : "NotSquareSubset[x,y,…] displays as xy….", 
"NotSquareSubsetEqual" : "NotSquareSubsetEqual[x,y,…] displays as x⋢y⋢….", 
"NotSquareSuperset" : "NotSquareSuperset[x,y,…] displays as xy….", 
"NotSquareSupersetEqual" : "NotSquareSupersetEqual[x,y,…] displays as x⋣y⋣….", 
"NotSubset" : "NotSubset[x,y,…] displays as x⊄y⊄….", 
"NotSubsetEqual" : "NotSubsetEqual[x,y,…] displays as x⊈y⊈….", 
"NotSucceeds" : "NotSucceeds[x,y,…] displays as x⊁y⊁….", 
"NotSucceedsEqual" : "NotSucceedsEqual[x,y,…] displays as xy….", 
"NotSucceedsSlantEqual" : "NotSucceedsSlantEqual[x,y,…] displays as x⋡y⋡….", 
"NotSucceedsTilde" : "NotSucceedsTilde[x,y,…] displays as x⋩y⋩….", 
"NotSuperset" : "NotSuperset[x,y,…] displays as x⊅y⊅….", 
"NotSupersetEqual" : "NotSupersetEqual[x,y,…] displays as x⊉y⊉….", 
"NotTilde" : "NotTilde[x,y,…] displays as x≁y≁….", 
"NotTildeEqual" : "NotTildeEqual[x,y,…] displays as x≄y≄….", 
"NotTildeFullEqual" : "NotTildeFullEqual[x,y,…] displays as x≇y≇….", 
"NotTildeTilde" : "NotTildeTilde[x,y,…] displays as x≉y≉….", 
"NotVerticalBar" : "NotVerticalBar[x,y,…] displays as xy….", 
"NProbability" : "NProbability[pred,x≈dist] gives the numerical probability for an event that satisfies the predicate pred under the assumption that x follows the probability distribution dist. \nNProbability[pred,{x₁,x₂,…}≈dist] gives the numerical probability that an event satisfies pred under the assumption that {x₁,x₂,…} follows the multivariate distribution dist. \nNProbability[pred,{x₁≈dist₁,x₂≈dist₂,…}] gives the numerical probability that an event satisfies pred under the assumption that x₁, x₂, … are independent and follow the distributions dist₁, dist₂, …. \nNProbability[pred₁⦈pred₂,…] gives the numerical conditional probability of pred₁ given pred₂. ", 
"NProduct" : "NProduct[f,{i,iₘᵢₙ,iₘₐₓ}] gives a numerical approximation to the product Underoverscript[∏, i=iₘᵢₙ, iₘₐₓ]f.\nNProduct[f,{i,iₘᵢₙ,iₘₐₓ,di}] uses a step di in the product. ", 
"NProductFactors" : "NProductFactors is an option for NProduct. NProductFactors -> n explicitly includes n factors in the product before extrapolation.", 
"NRoots" : "NRoots[lhs==rhs,var] yields a disjunction of equations which represent numerical approximations to the roots of a polynomial equation. ", 
"NSolve" : "NSolve[expr,vars] attempts to find numerical approximations to the solutions of the system expr of equations or inequalities for the variables vars. \nNSolve[expr,vars,Reals] finds solutions over the domain of real numbers.", 
"NSum" : "NSum[f,{i,iₘᵢₙ,iₘₐₓ}] gives a numerical approximation to the sum Underoverscript[∑, i=iₘᵢₙ, iₘₐₓ]f.\nNSum[f,{i,iₘᵢₙ,iₘₐₓ,di}] uses a step di in the sum. ", 
"NSumTerms" : "NSumTerms is an option for NSum. NSumTerms -> n explicitly includes n terms in the sum before extrapolation.", 
"Null" : "Null is a symbol used to indicate the absence of an expression or a result. It is not displayed in ordinary output.  When Null appears as a complete output expression, no output is printed. ", 
"NullRecords" : "NullRecords is an option for Read and related functions which specifies whether null records should be taken to exist between repeated record separators. ", 
"NullSpace" : "NullSpace[m] gives a list of vectors that forms a basis for the null space of the matrix m. ", 
"NullWords" : "NullWords is an option for Read and related functions which specifies whether null words should be taken to exist between repeated word separators. ", 
"Number" : "Number represents an exact integer or an approximate real number in Read. ", 
"NumberFieldClassNumber" : "NumberFieldClassNumber[θ] gives the class number for the algebraic number field [θ] generated by θ.", 
"NumberFieldDiscriminant" : "NumberFieldDiscriminant[a] gives the discriminant of the field [a] generated by the algebraic number a.", 
"NumberFieldFundamentalUnits" : "NumberFieldFundamentalUnits[a] gives a list of fundamental units for the field [a] generated by the algebraic number a.", 
"NumberFieldIntegralBasis" : "NumberFieldIntegralBasis[a] gives an integral basis for the field [a] generated by the algebraic number a.", 
"NumberFieldNormRepresentatives" : "NumberFieldNormRepresentatives[a,m] gives a list of representatives of classes of algebraic integers of norm ±m in the field [a] generated by the algebraic number a.", 
"NumberFieldRegulator" : "NumberFieldRegulator[a] gives the regulator of the field [a] generated by the algebraic number a.", 
"NumberFieldRootsOfUnity" : "NumberFieldRootsOfUnity[a] gives the roots of unity for the field [a] generated by the algebraic number a.", 
"NumberFieldSignature" : "NumberFieldSignature[a] gives the signature of the field [a] generated by the algebraic number a.", 
"NumberForm" : "NumberForm[expr,n] prints with approximate real numbers in expr given to n‐digit precision. ", 
"NumberFormat" : "NumberFormat is an option for NumberForm and related functions that specifies how the mantissa, base, and exponent should be assembled into a final print form. ", 
"NumberMarks" : "NumberMarks is an option for InputForm and related functions that specifies whether ` marks should be included in the printed forms of approximate numbers. ", 
"NumberMultiplier" : "NumberMultiplier is an option for NumberForm and related functions which gives the string to use as a multiplication sign in scientific notation. ", 
"NumberPadding" : "NumberPadding is an option for NumberForm and related functions which gives strings to use as padding on the left‐ and right‐hand sides of numbers. ", 
"NumberPoint" : "NumberPoint is an option for NumberForm and related functions which gives the string to use as a decimal point. ", 
"NumberQ" : "NumberQ[expr] gives True if expr is a number, and False otherwise. ", 
"NumberSeparator" : "NumberSeparator is an option for NumberForm and related functions which gives the string to insert at breaks between digits. ", 
"NumberSigns" : "NumberSigns is an option for NumberForm and related functions which gives strings to use as signs for negative and positive numbers. ", 
"NumberString" : "NumberString represents the characters of a number in StringExpression.", 
"Numerator" : "Numerator[expr] gives the numerator of expr. ", 
"NumericFunction" : "NumericFunction is an attribute that can be assigned to a symbol f to indicate that f[arg₁,arg₂,…] should be considered a numeric quantity whenever all the argᵢ are numeric quantities. ", 
"NumericQ" : "NumericQ[expr] gives True if expr is a numeric quantity, and False otherwise. ", 
"NValues" : "NValues[f] gives a list of transformation rules corresponding to all numerical values (values for N[f[x,…],…], etc.) defined for the symbol f.", 
"NyquistGridLines" : "NyquistGridLines is an option to NyquistPlot that specifies contours of constant magnitude and phase of a closed-loop system.", 
"NyquistPlot" : "NyquistPlot[g] gives the Nyquist plot of a rational function g in one complex variable.\nNyquistPlot[sys] gives the Nyquist plot of a TransferFunctionModel or StateSpaceModel object sys.\nNyquistPlot[…,{fₘᵢₙ,fₘₐₓ}] gives the plot for frequencies from fₘᵢₙ to fₘₐₓ.", 
"O" : "O[x]^n represents a term of order xⁿ. \nO[x]^n is generated to represent omitted higher‐order terms in power series. \nO[x,x₀]^n represents a term of order (x-x₀)ⁿ. ", 
"ObservabilityGramian" : "ObservabilityGramian[ss] gives the observability Gramian of the StateSpaceModel object ss.", 
"ObservabilityMatrix" : "ObservabilityMatrix[ss] gives the observability matrix of the StateSpaceModel object ss.", 
"ObservableDecomposition" : "ObservableDecomposition[ss] yields the observable decomposition of the StateSpaceModel object ss. The result is a list {sₒ,ssₒ} where sₒ is the transformation matrix and ssₒ is the observable subspace of ss.", 
"ObservableModelQ" : "ObservableModelQ[ss] gives True if the StateSpaceModel object ss is observable, and False otherwise.", 
"OddQ" : "OddQ[expr] gives True if expr is an odd integer, and False otherwise. ", 
"Off" : "Off[symbol::tag] switches off a message, so that it is no longer printed. \nOff[\"name\"] switches off a named group of messages.\nOff[s] switches off tracing messages associated with the symbol s. \nOff[m₁,m₂,…] switches off several messages or message groups. ", 
"Offset" : "Offset[{dx,dy},position] gives the position of a graphical object obtained by starting at the specified position and then moving by absolute offset {dx,dy}. ", 
"On" : "On[symbol::tag] switches on a message, so that it can be printed. \nOn[\"name\"] switches on a named group of messages.\nOn[s] switches on tracing for the symbol s. \nOn[m₁,m₂,…] switches on several messages or message groups. ", 
"ONanGroupON" : "ONanGroupON[] represents the sporadic simple O'Nan group O'N.", 
"OneIdentity" : "OneIdentity is an attribute that can be assigned to a symbol f to indicate that f[x], f[f[x]], etc. are all equivalent to x for the purpose of pattern matching. ", 
"Opacity" : "Opacity[a] is a graphics directive which specifies that graphical objects which follow are to be displayed, if possible, with opacity a. \nOpacity[a,color] uses the specified color with opacity a.", 
"OpenAppend" : "OpenAppend[\"file\"] opens a file to append output to it, and returns an OutputStream object. ", 
"Opener" : "Opener[x] represents an opener with setting x, displayed as Opener[True] when x is True and Opener[False] when x is False. \nOpener[Dynamic[x]] takes the setting to be the dynamically updated current value of x, with the value of x being toggled if the opener is clicked. ", 
"OpenerView" : "OpenerView[{expr₁,expr₂}] represents an object which displays as an opener, together with expr₁ if the opener is closed, and both expr₁ and expr₂ if it is open.\nOpenerView[{expr₁,expr₂},state] specifies the state of the opener, with False being closed, and True being open.", 
"Opening" : "Opening[image,ker] gives the morphological opening of image with respect to the structuring element ker.\nOpening[image,r] gives the opening with respect to a range r square.", 
"OpenRead" : "OpenRead[\"file\"] opens a file to read data from, and returns an InputStream object. ", 
"OpenTemporary" : "OpenTemporary[] opens a temporary file to which output can be written, and returns an OutputStream object. ", 
"OpenWrite" : "OpenWrite[\"file\"] opens a file to write output to it, and returns an OutputStream object. \nOpenWrite[] opens a new file in the default area for temporary files on your computer system.", 
"Operate" : "Operate[p,f[x,y]] gives p[f][x,y]. \nOperate[p,expr,n] applies p at level n in the head of expr. ", 
"OperatingSystem" : "OperatingSystem is an option for file and related operations that specifies the type of operating system to use to determine file name and other conventions.", 
"Optional" : "p:v is a pattern object that represents an expression of the form p, which, if omitted, should be replaced by v. ", 
"OptionInspectorSettings" : "OptionInspectorSettings->{opt₁->val₁,opt₂->val₂,…} is a global option that specifies the display of options in the Option Inspector.", 
"OptionQ" : "OptionQ[e] returns True if e can be considered an option or list of options, and False otherwise.", 
"Options" : "Options[symbol] gives the list of default options assigned to a symbol. \nOptions[expr] gives the options explicitly specified in a particular expression such as a graphics object. \nOptions[stream] or Options[\"sname\"] gives options associated with a particular stream. \nOptions[object] gives options associated with an external object such as a NotebookObject. \nOptions[obj,name] gives the setting for the option name. \nOptions[obj,{name₁,name₂,…}] gives a list of the settings for the options nameᵢ. ", 
"OptionsPattern" : "OptionsPattern[] is a pattern object that represents a collection of options given as rules, where the values of the options can be accessed using OptionValue. \nOptionsPattern[f] takes default option values from Options[f].\nOptionsPattern[{opt₁->val₁,opt₂->val₂,…}] uses an explicit list of default option values.", 
"OptionValue" : "OptionValue[name] gives the value of name in options matched by OptionsPattern. \nOptionValue[f,name] gives the value of name for options associated with the head f. \nOptionValue[f,opts,name] extracts option values from the explicit list of rules opts.", 
"Or" : "e₁||e₂||… is the logical OR function. It evaluates its arguments in order, giving True immediately if any of them are True, and False if they are all False. ", 
"Orange" : "Orange represents the color orange in graphics or style specifications. ", 
"Order" : "Order[expr₁,expr₂] gives 1 if expr₁ is before expr₂ in canonical order, and -1 if expr₁ is after expr₂ in canonical order. It gives 0 if expr₁ is identical to expr₂. ", 
"OrderDistribution" : "OrderDistribution[{dist,n},k] represents the kᵗʰ-order statistics distribution for n observations from the distribution dist.\nOrderDistribution[{dist,n},{k₁,k₂,…}] represents the joint (k₁,k₂,…)ᵗʰ-order statistics distribution from n observations from the distribution dist. ", 
"OrderedQ" : "OrderedQ[h[e₁,e₂,…]] gives True if the eᵢ are in canonical order, and False otherwise. ", 
"Ordering" : "Ordering[list] gives the positions in list at which each successive element of Sort[list] appears. \nOrdering[list,n] gives the positions in list at which the first n elements of Sort[list] appear. \nOrdering[list,-n] gives the positions of the last n elements of Sort[list]. \nOrdering[list,n,p] uses Sort[list,p]. ", 
"Orderless" : "Orderless is an attribute that can be assigned to a symbol f to indicate that the elements eᵢ in expressions of the form f[e₁,e₂,…] should automatically be sorted into canonical order. This property is accounted for in pattern matching. ", 
"Orthogonalize" : "Orthogonalize[{v₁,v₂,…}] gives an orthonormal basis found by orthogonalizing the vectors vᵢ.\nOrthogonalize[{e₁,e₂,…},f] gives a basis for the eᵢ orthonormal with respect to the inner product function f.", 
"Out" : "%n or Out[n] is a global object that is assigned to be the value produced on the nᵗʰ output line. \n% gives the last result generated. \n%% gives the result before last. %%…% (k times) gives the kᵗʰ previous result. ", 
"Outer" : "Outer[f,list₁,list₂,…] gives the generalized outer product of the listᵢ, forming all possible combinations of the lowest‐level elements in each of them, and feeding them as arguments to f. \nOuter[f,list₁,list₂,…,n] treats as separate elements only sublists at level n in the listᵢ. \nOuter[f,list₁,list₂,…,n₁,n₂,…] treats as separate elements only sublists at level nᵢ in the corresponding listᵢ. ", 
"OutputAutoOverwrite" : "OutputAutoOverwrite is an option for notebooks that specifies whether the output of a command should replace any existing output from a previous evaluation.", 
"OutputControllabilityMatrix" : "OutputControllabilityMatrix[ss] gives the output controllability matrix of the StateSpaceModel object ss.", 
"OutputControllableModelQ" : "OutputControllableModelQ[ss] gives True if the StateSpaceModel object ss is output controllable, and False otherwise.", 
"OutputForm" : "OutputForm[expr] prints as a two-dimensional representation of expr using only keyboard characters. ", 
"OutputMathEditExpression" : "OutputMathEditExpression is an internal symbol used for formatting.", 
"OutputNamePacket" : "OutputNamePacket[string] is a MathLink packet that contains in string the name assigned to the next output.", 
"OutputResponse" : "OutputResponse[sys,u,t] gives the output response of a TransferFunctionModel or StateSpaceModel object sys to the input u as a function of time t.\nOutputResponse[sys,u,{t,tₘᵢₙ,tₘₐₓ}] gives the response from tₘᵢₙ to tₘₐₓ.\nOutputResponse[sys,du] gives the response of the discrete-time system sys to the input sequence du.\nOutputResponse[{ss,{x₁₀,x₂₀,…,Subscript[x,n0]}},…] gives the response of a StateSpaceModel object ss with initial conditions Subscript[x,i0].", 
"OutputSizeLimit" : "OutputSizeLimit is an option for notebooks which specifies the maximum size in bytes of expressions that will automatically be output in their entirety.", 
"OutputStream" : "OutputStream[\"name\",n] is an object that represents an output stream for functions such as Write. ", 
"OverBar" : "OverBar[expr] displays with a bar over expr.", 
"OverDot" : "OverDot[expr] displays with a dot over expr.", 
"Overflow" : "Overflow[] represents a number too large to represent explicitly on your computer system.", 
"OverHat" : "OverHat[expr] displays with a hat over expr.", 
"Overlaps" : "Overlaps is an option to StringCases, StringCount, and StringPosition that specifies how to treat overlapping substrings. ", 
"Overlay" : "Overlay[{expr₁,expr₂,…}] displays as an overlay of all the exprᵢ.\nOverlay[{expr₁,expr₂,…},{i,j,…}] displays as an overlay of exprᵢ, Subscript[expr,j], ….\nOverlay[{expr₁,expr₂,…},{i,j,…},s] allows selections to be made and controls to be clicked in exprₛ.", 
"Overscript" : "Overscript[x,y] is an object that formats as Overscript[x, y]. ", 
"OverscriptBox" : "OverscriptBox[x,y] is the low‐level box representation for Overscript[x, y] in notebook expressions. ", 
"OverscriptBoxOptions" : "OverscriptBoxOptions->{opt₁->val₁,opt₂->val₂,…} is an option that specifies the style and display of OverscriptBox constructs.", 
"OverTilde" : "OverTilde[expr] displays with a tilde over expr.", 
"OverVector" : "OverVector[expr] displays with a right vector over expr.", 
"OwenT" : "OwenT[x,a] gives Owen's T function T(x,a).", 
"OwnValues" : "OwnValues[x] gives the rule corresponding to any ownvalue defined for the symbol x.", 
"PackingMethod" : "PackingMethod is an option for GraphPlot and related functions which specifies how disconnected components should be packed together in the layout produced.", 
"PackPaclet" : "PackPaclet[\"dir\"] creates a .paclet file from the contents of dir. The directory must contain a PacletInfo.m file.", 
"Paclet" : "Paclet is an internal symbol.", 
"PacletCheckUpdate" : "PacletCheckUpdate is an internal symbol.", 
"PacletDirectoryAdd" : "PacletDirectoryAdd is an internal symbol.", 
"PacletDirectoryRemove" : "PacletDirectoryRemove is an internal symbol.", 
"PacletDisable" : "PacletDisable is an internal symbol.", 
"PacletEnable" : "PacletEnable is an internal symbol.", 
"PacletFind" : "PacletFind is an internal symbol.", 
"PacletFindRemote" : "PacletFindRemote is an internal symbol.", 
"PacletInformation" : "PacletInformation is an internal symbol.", 
"PacletInstall" : "PacletInstall is an internal symbol.", 
"PacletInstallQueued" : "PacletInstallQueued is an internal symbol.", 
"PacletManager" : "PacletManager is used only as a generic symbol for some messages.", 
"PacletManagerEnabled" : "PacletManagerEnabled is an internal symbol.", 
"PacletNewerQ" : "PacletNewerQ is an internal symbol.", 
"PacletResource" : "PacletResource is an internal symbol.", 
"PacletSetLoading" : "PacletSetLoading is an internal symbol.", 
"PacletSite" : "PacletSite is an internal symbol.", 
"PacletSiteAdd" : "PacletSiteAdd is an internal symbol.", 
"PacletSiteRemove" : "PacletSiteRemove is an internal symbol.", 
"PacletSites" : "PacletSites[] gives the list of currently-enabled paclet sites.", 
"PacletSiteUpdate" : "PacletSiteUpdate is an internal symbol.", 
"PacletUninstall" : "PacletUninstall is an internal symbol.", 
"PacletUpdate" : "PacletUpdate is an internal symbol.", 
"PaddedForm" : "PaddedForm[expr,n] prints with all numbers in expr padded to leave room for a total of n digits. \nPaddedForm[expr,{n,f}] prints with approximate real numbers having exactly f digits to the right of the decimal point. ", 
"Padding" : "Padding is an option to various array and image operations that specifies what padding to use when extending beyond the original data specified.", 
"PadeApproximant" : "PadeApproximant[expr,{x,x₀,{m,n}}] gives the Padé approximant to expr about the point x=x₀, with numerator order m and denominator order n.\nPadeApproximant[expr,{x,x₀,n}] gives the diagonal Padé approximant to expr about the point x=x₀ of order n.", 
"PadLeft" : "PadLeft[list,n] makes a list of length n by padding list with zeros on the left. \nPadLeft[list,n,x] pads by repeating the element x. \nPadLeft[list,n,{x₁,x₂,…}] pads by cyclically repeating the elements xᵢ. \nPadLeft[list,n,padding,m] leaves a margin of m elements of padding on the right. \nPadLeft[list,{n₁,n₂,…}] makes a nested list with length nᵢ at level i. \nPadLeft[list] pads a ragged array list with zeros to make it full. ", 
"PadRight" : "PadRight[list,n] makes a list of length n by padding list with zeros on the right. \nPadRight[list,n,x] pads by repeating the element x. \nPadRight[list,n,{x₁,x₂,…}] pads by cyclically repeating the elements xᵢ. \nPadRight[list,n,padding,m] leaves a margin of m elements of padding on the left. \nPadRight[list,{n₁,n₂,…}] makes a nested list with length nᵢ at level i. \nPadRight[list] pads a ragged array list with zeros to make it full. ", 
"PageBreakAbove" : "PageBreakAbove is an option for Cell which specifies whether a page break should be made immediately above the cell if the notebook that contains the cell is printed. ", 
"PageBreakBelow" : "PageBreakBelow is an option for Cell which specifies whether a page break should be made immediately below the cell if the notebook that contains the cell is printed. ", 
"PageBreakWithin" : "PageBreakWithin is an option for Cell which specifies whether a page break should be allowed within the cell if the notebook that contains the cell is printed. ", 
"PageFooterLines" : "PageFooterLines is an option for notebooks that specifies whether a horizontal line is inserted at the bottom of each page when the notebook is printed.", 
"PageFooters" : "PageFooters is an option for notebooks that specifies what should be inserted as the footer of each page of a notebook when it is printed.", 
"PageHeaderLines" : "PageHeaderLines is an option for notebooks that specifies whether a horizontal line is inserted at the top of each page when the notebook is printed.", 
"PageHeaders" : "PageHeaders is an option for notebooks that specifies what should be inserted as the header of each page of a notebook when it is printed.", 
"PageRankCentrality" : "PageRankCentrality[g,α] gives a list of page-rank centralities for the vertices in the graph g and weight α.\nPageRankCentrality[g,α,β] gives a list of page-rank centralities using weight α and initial centralities β.", 
"PageWidth" : "PageWidth is an option for output streams and for cells which specifies how wide each line of text should be allowed to be. ", 
"PairedBarChart" : "PairedBarChart[{y₁,y₂,…},{z₁,z₂,…}] makes a paired bar chart with bar lengths y₁,  y₂, … and z₁, z₂, …, respectively.\nPairedBarChart[{…,wᵢ[yᵢ,…],…},{…,Subscript[w,j][Subscript[z,j],…],…}] makes a paired bar chart with bar features defined by the symbolic wrappers wₖ.\nPairedBarChart[{data₁₁,…},{data₂₁,…}] makes a paired bar chart from multiple datasets data₁ᵢ and Subscript[data₂,j].", 
"PairedHistogram" : "PairedHistogram[{x₁,x₂,…},{y₁,y₂,…}] plots a paired histogram of the values xᵢ and yᵢ.\nPairedHistogram[{x₁,x₂,…},{y₁,y₂,…}, bspec] plots a paired histogram with bin width specification bspec.\nPairedHistogram[{x₁,x₂,…},{y₁,y₂,…},bspec,hspec] plots a paired histogram with bin heights computed according to the specification hspec.\nPairedHistogram[{data₁₁,…},{data₂₁,…},…] plots a paired histograms for multiple datasets Subscript[data,1i] and Subscript[data,2j].", 
"PairedTTest" : "PairedTTest[data] tests whether the mean of data is zero. \nPairedTTest[{data₁,data₂}] tests whether the mean of data₁– data₂ is zero.\nPairedTTest[dspec,μ₀] tests a location measure against μ₀.\nPairedTTest[dspec,μ₀,\"property\"] returns the value of \"property\".", 
"PairedZTest" : "PairedZTest[data] tests whether the mean of the data is zero. \nPairedZTest[{data₁,data₂}] tests whether the means of data₁ and data₂ are equal.\nPairedZTest[dspec,σ] tests for zero or equal means assuming a population variance σ.\nPairedZTest[dspec,σ,μ₀] tests the mean against μ₀.\nPairedZTest[dspec,σ,μ₀,\"property\"] returns the value of \"property\".", 
"PaletteNotebook" : "PaletteNotebook[{cell₁,cell₂,…}] represents a palette notebook that can be manipulated by the Mathematica front end. ", 
"PalettePath" : "PalettePath is a global option that specifies which directories Mathematica searches for palettes on startup.", 
"Pane" : "Pane[expr] displays as a pane containing expr. \nPane[expr,w] makes the pane be w printer's points wide, linewrapping the contents if necessary.\nPane[expr,{w,h}] makes the pane be w points wide and h points high, shrinking the contents if necessary.", 
"Panel" : "Panel[expr] displays as a panel containing expr. \nPanel[expr,title] gives the panel the specified title. \nPanel[expr,title,pos] places title at a position specified by pos. \nPanel[expr,{title₁,title₂,…},{pos₁,…}] places titleᵢ at position posᵢ. \nPanel[] displays an empty panel. ", 
"Paneled" : "Paneled is an option for Manipulate and related functions that specifies whether to give the output inside a panel.", 
"PaneSelector" : "PaneSelector[{v₁->expr₁,v₂->expr₂,…},v] represents an object that displays as a pane containing the exprᵢ for which vᵢ is equal to v. ", 
"ParabolicCylinderD" : "ParabolicCylinderD[ν,z] gives the parabolic cylinder function Subscript[D,ν](z). ", 
"ParagraphIndent" : "ParagraphIndent is an option for Cell which specifies how far in printer's points to indent the first line of each paragraph of text. ", 
"ParagraphSpacing" : "ParagraphSpacing is an option for Cell, StyleBox, and Style that specifies how much extra space to leave between successive paragraphs of text. ", 
"ParallelArray" : "ParallelArray[f,n] generates in parallel a list of length n, with elements f[i], evaluated.\nParallelArray[f,{n₁,n₂,…}] generates in parallel an n₁⨯n₂⨯… array of nested lists, with elements f[i₁,i₂,…]. \nParallelArray[f,{n₁,n₂,…},{r₁,r₂,…}] generates in parallel a list using the index origins rᵢ (default 1). \nParallelArray[f,dims,origin,h] uses head h, rather than List, for each level of the array. ", 
"ParallelCombine" : "ParallelCombine[f,h[e₁,e₂,…],comb] evaluates f[h[e₁,e₂,…]] in parallel by distributing parts of the computation to all parallel kernels and combining the partial results with comb.\nParallelCombine[f,h[e₁,e₂, …]] is equivalent to ParallelCombine[f,h[e₁,e₂,…],h] if h has attribute Flat, and ParallelCombine[f,h[e₁,e₂,…],Join] otherwise.", 
"ParallelDo" : "ParallelDo[expr,{iₘₐₓ}] evaluates expr in parallel iₘₐₓ times. \nParallelDo[expr,{i,iₘₐₓ}] evaluates expr in parallel with the variable i successively taking on the values 1 through iₘₐₓ (in steps of 1). \nParallelDo[expr,{i,iₘᵢₙ,iₘₐₓ}] starts with i=iₘᵢₙ. \nParallelDo[expr,{i,iₘᵢₙ,iₘₐₓ,di}] uses steps di. \nParallelDo[expr,{i,{i₁,i₂,…}}] uses the successive values i₁, i₂, ….\nParallelDo[expr,{i,iₘᵢₙ,iₘₐₓ},{j,jₘᵢₙ,jₘₐₓ},…] evaluates expr looping in parallel over different values of j, etc. for each i. ", 
"ParallelEvaluate" : "ParallelEvaluate[expr] evaluates the expression expr on all available parallel kernels and returns the list of results obtained.\nParallelEvaluate[expr,kernel] evaluates expr on the parallel kernel specified. \nParallelEvaluate[expr,{ker₁,ker₂,…}] evaluates expr on the parallel kernels kerᵢ.", 
"Parallelization" : "Parallelization is an option for Compile that specifies whether it should create a compiled function that could run in parallel. ", 
"Parallelize" : "Parallelize[expr] evaluates expr using automatic parallelization.", 
"ParallelMap" : "ParallelMap[f,expr] applies f in parallel to each element on the first level in expr.\nParallelMap[f,expr,levelspec] applies f in parallel to parts of expr specified by levelspec.", 
"ParallelNeeds" : "ParallelNeeds[\"context`\"] evaluates Needs[\"context`\"] on all available parallel kernels.", 
"ParallelProduct" : "ParallelProduct[expr,{i,iₘₐₓ}] evaluates the product UnderoverscriptBox[∏, {{{i}, =, 1}}, {{i}, ₘₐₓ}, LimitsPositioning -> True]expr in parallel.\nParallelProduct[expr,{i,iₘᵢₙ,iₘₐₓ}] starts with i=iₘᵢₙ.\nParallelProduct[expr,{i,iₘᵢₙ,iₘₐₓ,di}] uses steps di.\nParallelProduct[expr,{i,{i₁,i₂,…}}] uses successive values i₁, i₂, ….\nParallelProduct[expr,{i,iₘᵢₙ,iₘₐₓ},{j,jₘᵢₙ,jₘₐₓ},…] evaluates the multiple product UnderoverscriptBox[∏, {{{i}, =, {{i}, ₘᵢₙ}}}, {{i}, ₘₐₓ}, LimitsPositioning -> True]UnderoverscriptBox[∏, {{{j}, =, {{j}, ₘᵢₙ}}}, {{j}, ₘₐₓ}, LimitsPositioning -> True]… expr in parallel.", 
"ParallelSubmit" : "ParallelSubmit[expr] submits expr for evaluation on the next available parallel kernel and returns an EvaluationObject expression representing the submitted evaluation.\nParallelSubmit[{var₁,var₂, …},expr] builds a closure for the variables given before submitting expr.", 
"ParallelSum" : "ParallelSum[expr,{i,iₘₐₓ}] evaluates in parallel the sum UnderoverscriptBox[∑, {{{i}, =, 1}}, {{i}, ₘₐₓ}, LimitsPositioning -> True]expr.\nParallelSum[expr,{i,iₘᵢₙ,iₘₐₓ}] starts with i=Subscript[i,min].\nParallelSum[expr,{i,iₘᵢₙ,iₘₐₓ,di}] uses steps di.\nParallelSum[expr,{i,{i₁,i₂,…}}] uses successive values i₁, i₂, …..\nParallelSum[expr,{i,iₘᵢₙ,iₘₐₓ},{j,jₘᵢₙ,jₘₐₓ},…] evaluates in parallel the multiple sum UnderoverscriptBox[∑, {{{i}, =, {{i}, ₘᵢₙ}}}, {{i}, ₘₐₓ}, LimitsPositioning -> True]UnderoverscriptBox[∑, {{{j}, =, {{j}, ₘᵢₙ}}}, {{j}, ₘₐₓ}, LimitsPositioning -> True]… expr.", 
"ParallelTable" : "ParallelTable[expr,{iₘₐₓ}] generates in parallel a list of iₘₐₓ copies of expr.\nParallelTable[expr,{i,iₘₐₓ}] generates in parallel a list of the values of expr when i runs from 1 to iₘₐₓ. \nParallelTable[expr,{i,iₘᵢₙ,iₘₐₓ}] starts with i=iₘᵢₙ. \nParallelTable[expr,{i,iₘᵢₙ,iₘₐₓ,di}] uses steps di. \nParallelTable[expr,{i,{i₁,i₂,…}}] uses the successive values i₁, i₂, ….\nParallelTable[expr,{i,iₘᵢₙ,iₘₐₓ},{j,jₘᵢₙ,jₘₐₓ},…] gives a nested list. The list associated with i is outermost.", 
"ParallelTry" : "ParallelTry[f,{arg₁,arg₂,…}] evaluates f[argᵢ] in parallel, returning the first result received.\nParallelTry[f,{arg₁,arg₂,…},k] returns a list of the first k results.", 
"ParameterEstimator" : "ParameterEstimator is an option to EstimatedDistribution and FindDistributionParameters that specifies what parameter estimator to use. ", 
"ParameterMixtureDistribution" : "ParameterMixtureDistribution[dist[θ],θ≈wdist] represents a parameter mixture distribution where the parameter θ is distributed according to the weight distribution wdist. \nParameterMixtureDistribution[dist[θ₁,θ₂,…],{θ₁≈wdist₁,θ₂≈wdist₂,…}] represents a parameter mixture distribution where the parameter θ₁ has weight distribution wdist₁, θ₂ has weight distribution wdist₂, etc. ", 
"ParameterVariables" : "ParameterVariables is an option for GroebnerBasis and PolynomialReduce. These variables will always be last in the ordering. By default, all variables that are not otherwise classified will become parameter variables. By specifying them explicitly one fixes their relative positions in the overall variable ordering.", 
"ParametricPlot" : "ParametricPlot[{fₓ,Subscript[f,y]},{u,uₘᵢₙ,uₘₐₓ}] generates a parametric plot of a curve with x and y coordinates fₓ and Subscript[f,y] as a function of u. \nParametricPlot[{{fₓ,Subscript[f,y]},{gₓ,Subscript[g,y]},…},{u,uₘᵢₙ,uₘₐₓ}] plots several parametric curves. \nParametricPlot[{fₓ,Subscript[f,y]},{u,uₘᵢₙ,uₘₐₓ},{v,vₘᵢₙ,vₘₐₓ}] plots a parametric region. \nParametricPlot[{{fₓ,Subscript[f,y]},{gₓ,Subscript[g,y]},…},{u,uₘᵢₙ,uₘₐₓ},{v,vₘᵢₙ,vₘₐₓ}] plots several parametric regions. ", 
"ParametricPlot3D" : "ParametricPlot3D[{fₓ,Subscript[f,y],Subscript[f,z]},{u,uₘᵢₙ,uₘₐₓ}] produces a three-dimensional space curve parametrized by a variable u which runs from uₘᵢₙ to uₘₐₓ. \nParametricPlot3D[{fₓ,Subscript[f,y],Subscript[f,z]},{u,uₘᵢₙ,uₘₐₓ},{v,vₘᵢₙ,vₘₐₓ}] produces a three-dimensional surface parametrized by u and v. \nParametricPlot3D[{{fₓ,Subscript[f,y],Subscript[f,z]},{gₓ,Subscript[g,y],Subscript[g,z]}…}…] plots several objects together. ", 
"ParentDirectory" : "ParentDirectory[] gives the parent of the current working directory. \nParentDirectory[\"dir\"] gives the parent of the directory dir. ", 
"ParentForm" : "ParentForm sets the parent form for a boxes format.", 
"Parenthesize" : "Parenthesize[ expr, fmt, prec, group] will represent expr in format fmt and parenthesize it if necessary.", 
"ParetoDistribution" : "ParetoDistribution[k,α] represents a Pareto distribution with minimum value parameter k and shape parameter α.\nParetoDistribution[k,α,μ] represents a Pareto type II distribution with location parameter μ.\nParetoDistribution[k,α,γ,μ] represents a Pareto type IV distribution with shape parameter γ.", 
"Part" : "expr[[i]] or Part[expr,i] gives the iᵗʰ part of expr. \nexpr[[-i]] counts from the end. \nexpr[[i,j,…]] or Part[expr,i,j,…] is equivalent to expr[[i]][[j]]…. \nexpr[[{i₁,i₂,…}]] gives a list of the parts i₁, i₂, … of expr. \nexpr[[m;;n]] gives parts m through n.\nexpr[[m;;n;;s]] gives parts m through n in steps of s.", 
"ParticleData" : "ParticleData[name,\"property\"] gives the specified property for a subatomic particle or family of particles with the specified name. \nParticleData[{name,q},\"property\"] gives the specified property for a version of the particle with charge q.", 
"Partition" : "Partition[list,n] partitions list into non‐overlapping sublists of length n. \nPartition[list,n,d] generates sublists with offset d. \nPartition[list,{n₁,n₂,…}] partitions a nested list into blocks of size n₁⨯n₂⨯….\nPartition[list,{n₁,n₂,…},{d₁,d₂,…}] uses offset dᵢ at level i in list. \nPartition[list,n,d,{Subscript[k,L],Subscript[k,R]}] specifies that the first element of list should appear at position Subscript[k,L] in the first sublist, and the last element of list should appear at or after position Subscript[k,R] in the last sublist. If additional elements are needed, Partition fills them in by treating list as cyclic. \nPartition[list,n,d,{Subscript[k,L],Subscript[k,R]},x] pads if necessary by repeating the element x. \nPartition[list,n,d,{Subscript[k,L],Subscript[k,R]},{x₁,x₂,…}] pads if necessary by cyclically repeating the elements xᵢ. \nPartition[list,n,d,{Subscript[k,L],Subscript[k,R]},{}] uses no padding, and so can yield sublists of different lengths. \nPartition[list,nlist,dlist,{Subscript[klist,L],Subscript[klist,R]},padlist] specifies alignments and padding in a nested list. ", 
"PartitionsP" : "PartitionsP[n] gives the number p(n) of unrestricted partitions of the integer n. ", 
"PartitionsQ" : "PartitionsQ[n] gives the number q(n) of partitions of the integer n into distinct parts. ", 
"PascalDistribution" : "PascalDistribution[n,p] represents a Pascal distribution with parameters n and p.", 
"PassEventsDown" : "PassEventsDown is an option to EventHandler which specifies whether events handled by a particular event handler should be passed down to event handlers nested inside.", 
"PassEventsUp" : "PassEventsUp is an option to EventHandler that specifies whether events handled by a particular event handler should be passed up to event handlers in outer expressions.", 
"Paste" : "Paste[expr] pastes expr at the current insertion point in the input notebook. \nPaste[notebook,expr] pastes expr to the specified notebook.\nPaste[] pastes the contents of the system clipboard in the input notebook. ", 
"PasteBoxFormInlineCells" : "PasteBoxFormInlineCells is an option for cells that specifies whether a new inline cell is created when a typeset expression is pasted into a non-box-type cell.", 
"PasteButton" : "PasteButton[expr] represents a button that pastes expr whenever it is pressed. \nPasteButton[label,expr] displays with label on the button. ", 
"Path" : "Path is an option for Get and related functions which gives a list of directories to search in attempting to find an external file. ", 
"PathGraph" : "PathGraph[{v₁,v₂,…}] yields a path with vertices vᵢ and edges between vᵢ and Subscript[v,i+ 1 ].\nPathGraph[{e₁,e₂,…}] yields a path with edges Subscript[e,j].\nPathGraph[{v₁,v₂,…},{e₁,e₂,…}] yields a path with vertices vᵢ and edges Subscript[e,j].\nPathGraph[{…,wᵢ[vᵢ,…],…},{…,Subscript[w,j][Subscript[e,j],…],…}] yields a path with vertex and edge properties defined by the symbolic wrappers wₖ.", 
"PathGraphQ" : "PathGraphQ[g] yields True if the graph g is a path and False otherwise.", 
"Pattern" : "s:obj represents the pattern object obj, assigned the name s. ", 
"PatternSequence" : "PatternSequence[p₁,p₂,…] is a pattern object which represents a sequence of arguments matching p₁, p₂, ….", 
"PatternTest" : "p?test is a pattern object that stands for any expression which matches p, and on which the application of test gives True. ", 
"PauliMatrix" : "PauliMatrix[k] gives the kᵗʰ Pauli spin matrix σₖ.", 
"PaulWavelet" : "PaulWavelet[] represents a Paul wavelet of order 4.\nPaulWavelet[n] represents a Paul wavelet of order n.", 
"Pause" : "Pause[n] pauses for at least n seconds. ", 
"PDF" : "PDF[dist,x] gives the probability density function for the symbolic distribution dist evaluated at x.\nPDF[dist,{x₁,x₂,…}] gives the multivariate probability density function for a symbolic distribution dist evaluated at {x₁,x₂,…}.\nPDF[dist] gives the PDF as a pure function.", 
"PearsonChiSquareTest" : "PearsonChiSquareTest[data] tests whether data is normally distributed using the Pearson χ² test.\nPearsonChiSquareTest[data,dist] tests whether data is distributed according to dist using the Pearson χ² test.\nPearsonChiSquareTest[data,dist,\"property\"] returns the value of \"property\".", 
"PearsonDistribution" : "PearsonDistribution[a₁,a₀,b₂,b₁,b₀] represents a distribution of the Pearson family with parameters a₁, a₀, b₂, b₁, and b₀.\nPearsonDistribution[type,a₁,a₀,b₂,b₁,b₀] represents a Pearson distribution of given type. ", 
"PeekClasses" : "PeekClasses is deprecated. It has been replaced by LoadedJavaClasses.", 
"PerformanceGoal" : "PerformanceGoal is an option for plotting and various other algorithmic functions that specifies what aspect of performance to try to optimize with Automatic settings for options.", 
"PermutationCycles" : "PermutationCycles[perm] gives a disjoint cycle representation of permutation perm.", 
"PermutationCyclesQ" : "PermutationCyclesQ[expr] returns True if expr is a permutation in disjoint cyclic form, and False otherwise.", 
"PermutationGroup" : "PermutationGroup[{perm₁,…,permₙ}] represents the group generated by multiplication of the permutations perm₁,…,permₙ.", 
"PermutationLength" : "PermutationLength[perm] returns the number of integers moved by the permutation perm.", 
"PermutationList" : "PermutationList[perm] returns a permutation list representation of permutation perm.\nPermutationList[perm,len] returns a permutation list of length len.", 
"PermutationListQ" : "PermutationListQ[expr] returns True if expr is a valid permutation list and False otherwise.", 
"PermutationMax" : "PermutationMax[perm] returns the largest integer moved by the permutation perm.", 
"PermutationMin" : "PermutationMin[perm] returns the smallest integer moved by the permutation perm.", 
"PermutationOrder" : "PermutationOrder[perm] gives the order of permutation perm.", 
"PermutationPower" : "PermutationPower[perm,n] gives the nᵗʰ permutation power of the permutation perm.", 
"PermutationProduct" : "PermutationProduct[a,b,c] gives the product of permutations a, b, c.", 
"PermutationReplace" : "PermutationReplace[expr,perm] replaces each part in expr by its image under the permutation perm.\nPermutationReplace[expr,gr] returns the list of images of expr under all elements of the permutation group gr.", 
"Permutations" : "Permutations[list] generates a list of all possible permutations of the elements in list. \nPermutations[list,n] gives all permutations containing at most n elements.\nPermutations[list,{n}] gives all permutations containing exactly n elements.", 
"PermutationSupport" : "PermutationSupport[perm] returns the support of the permutation perm.", 
"Permute" : "Permute[expr,perm] permutes the positions of the elements of expr according to the permutation perm.\nPermute[expr,gr] returns the list of permuted forms of expr under the elements of the permutation group gr.", 
"PeronaMalikFilter" : "PeronaMalikFilter[image] applies a Perona–Malik diffusion filter to image.\nPeronaMalikFilter[image,t] specifies the amount of diffusion t to be applied. \nPeronaMalikFilter[image,t,k] uses a conductance parameter k.\nPeronaMalikFilter[image,t,k,σ] applies a Gaussian regularization of width σ to the image gradient in the conductance function.", 
"PERTDistribution" : "PERTDistribution[{min,max},c] represents a PERT distribution with range min to max and maximum at c.\nPERTDistribution[{min,max},c,λ] represents a modified PERT distribution with shape parameter λ.", 
"PetersenGraph" : "PetersenGraph[n,k] gives the generalized Petersen graph Subscript[P,n, k].", 
"PhaseMargins" : "PhaseMargins[sys] gives the phase margins of a linear time-invariant system sys.", 
"Pi" : "Pi is π, with numerical value ≃3.14159. ", 
"Pick" : "Pick[list,sel] picks out those elements of list for which the corresponding element of sel is True. \nPick[list,sel,patt] picks out those elements of list for which the corresponding element of sel matches patt. ", 
"Piecewise" : "Piecewise[{{val₁,cond₁},{val₂,cond₂},…}] represents a piecewise function with values valᵢ in the regions defined by the conditions condᵢ. \nPiecewise[{{val₁,cond₁},…},val] uses default value val if none of the condᵢ apply. The default for val is 0. ", 
"PiecewiseExpand" : "PiecewiseExpand[expr] expands nested piecewise functions in expr to give a single piecewise function. \nPiecewiseExpand[expr,assum] expands piecewise functions using assumptions. \nPiecewiseExpand[expr,assum,dom] does the expansion over the domain dom. ", 
"PieChart" : "PieChart[{y₁,y₂,…}] makes a pie chart with sector angle proportional to y₁, y₂, ….\nPieChart[{…,wᵢ[yᵢ,…],…,Subscript[w,j][Subscript[y,j],…],…}] makes a pie chart with sector features defined by the symbolic wrappers wₖ.\nPieChart[{data₁,data₂,…}] makes a pie chart from multiple datasets dataᵢ.", 
"PieChart3D" : "PieChart3D[{y₁,y₂,…}] makes a 3D pie chart with sector angle proportional to y₁, y₂, ….\nPieChart3D[{…,wᵢ[yᵢ,…],…,Subscript[w,j][Subscript[y,j],…],…}] makes a 3D pie chart with sector features defined by the symbolic wrappers wₖ.\nPieChart3D[{data₁,data₂,…}] makes a 3D pie chart from multiple datasets dataᵢ.", 
"Pink" : "Pink represents the color pink in graphics or style specifications. ", 
"Pivoting" : "Pivoting is an option to certain matrix decomposition functions. With Pivoting -> False, no pivoting is done. With Pivoting -> True, column pivoting is carried out and the list of matrices returned is augmented by the appropriate permutation matrix.", 
"PixelConstrained" : "PixelConstrained is an option for ArrayPlot which specifies how to constrain cells to align with displayed pixels.", 
"PixelValue" : "PixelValue[image,{x,y}] gives the pixel value of image at position {x,y}.\nPixelValue[image,{x,y},\"type\"] gives the pixel value converted to the specified type.", 
"Placed" : "Placed[expr,pos] represents an expression expr placed at relative position pos in a chart or other display. \nPlaced[{e₁,e₂,…},pos] places each of the eᵢ at a relative position specified by pos.\nPlaced[{e₁,e₂,…},pos,f] applies the function f to each of the eᵢ before displaying it.", 
"Placeholder" : "Placeholder[name] represents a placeholder labeled with name that indicates a place to type.\nPlaceholder[] gives the empty placeholder .", 
"PlaceholderReplace" : "PlaceholderReplace is an option to Paste that determines whether to replace a selection placeholder with the selected contents.", 
"Plain" : "Plain represents a font that is not bold, italic, or underlined.", 
"Play" : "Play[f,{t,tₘᵢₙ,tₘₐₓ}] creates an object that plays as a sound whose amplitude is given by f as a function of time t in seconds between tₘᵢₙ and tₘₐₓ. ", 
"PlayRange" : "PlayRange is an option for Play and related functions which specifies what range of sound amplitude levels should be included. ", 
"Plot" : "Plot[f,{x,xₘᵢₙ,xₘₐₓ}] generates a plot of f as a function of x from xₘᵢₙ to xₘₐₓ. \nPlot[{f₁,f₂,…},{x,xₘᵢₙ,xₘₐₓ}] plots several functions fᵢ. ", 
"Plot3D" : "Plot3D[f,{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] generates a three-dimensional plot of f as a function of x and y. \nPlot3D[{f₁,f₂,…},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] plots several functions. ", 
"PlotDivision" : "PlotDivision is an option for Plot that specifies the maximum amount of subdivision to be used.", 
"PlotJoined" : "PlotJoined is an option for ListPlot that specifies whether the points plotted should be joined by a line. ", 
"PlotLabel" : "PlotLabel is an option for graphics functions that specifies an overall label for a plot. ", 
"PlotLayout" : "PlotLayout is an option used by WaveletListPlot and similar functions to specify the layout of multiple plots.", 
"PlotMarkers" : "PlotMarkers is an option for graphics functions like ListPlot and ListLinePlot that specifies what markers to draw at the points plotted. ", 
"PlotPoints" : "PlotPoints is an option for plotting functions that specifies how many initial sample points to use. ", 
"PlotRange" : "PlotRange is an option for graphics functions that specifies what range of coordinates to include in a plot. ", 
"PlotRangeClipping" : "PlotRangeClipping is an option for graphics functions that specifies whether graphics objects should be clipped at the edge of the region defined by PlotRange, or should be allowed to extend to the actual edge of the image. ", 
"PlotRangePadding" : "PlotRangePadding is an option for graphics functions that specifies how much further axes etc. should extend beyond the range of coordinates specified by PlotRange. ", 
"PlotRegion" : "PlotRegion is an option for graphics functions that specifies what region of the final display area a plot should fill. ", 
"PlotStyle" : "PlotStyle is an option for plotting and related functions that specifies styles in which objects are to be drawn. ", 
"Plus" : "x+y+z represents a sum of terms. ", 
"PlusMinus" : "PlusMinus[x] displays as ±x.\nPlusMinus[x,y,…] displays as x±y±….", 
"Pochhammer" : "Pochhammer[a,n] gives the Pochhammer symbol (a)ₙ. ", 
"PodStates" : "PodStates is an option for WolframAlpha that determines information about the states of the pods.", 
"PodWidth" : "PodWidth is an option for WolframAlpha that determines the width parameters of the content returned by the Wolfram|Alpha API.", 
"Point" : "Point[coords] is a graphics primitive that represents a point. \nPoint[{coords₁,coords₂,…}] represents a collection of points. ", 
"PointFigureChart" : "PointFigureChart[{{date₁,p₁},{date₂,p₂},…}] makes a point and figure chart with prices pᵢ at date dateᵢ.\nPointFigureChart[{\"name\",daterange}] makes a point and figure chart of closing prices for the financial entity \"name\" over the date range daterange.\nPointFigureChart[{…},s,n] makes a point and figure chart with point and figure height s and n reversals.", 
"PointForm" : "PointForm[g] is a three-dimensional graphics directive that specifies that points are to be drawn with the graphics directive g or the list of graphics directives g.", 
"PointSize" : "PointSize[d] is a graphics directive which specifies that points which follow are to be shown if possible as circular regions with diameter d. The diameter d is given as a fraction of the total width of the plot. ", 
"PoissonConsulDistribution" : "PoissonConsulDistribution[μ,λ] represents a Poisson–Consul distribution with parameters μ and λ.", 
"PoissonDistribution" : "PoissonDistribution[μ] represents a Poisson distribution with mean μ.", 
"PolarAxes" : "PolarAxes is an option for sector charts and polar plots that specifies whether polar axes should be drawn.", 
"PolarAxesOrigin" : "PolarAxesOrigin is an option for sector charts and polar plots that specifies where polar axes should be drawn.", 
"PolarGridLines" : "PolarGridLines is an option for sector charts and polar plots that specifies polar grid lines.", 
"PolarPlot" : "PolarPlot[r,{θ,θₘᵢₙ,θₘₐₓ}] generates a polar plot of a curve with radius r as a function of angle θ.\nPolarPlot[{f₁,f₂,…},{θ,θₘᵢₙ,θₘₐₓ}] makes a polar plot of curves with radius functions f₁, f₂, ….", 
"PolarTicks" : "PolarTicks is an option for sector charts and polar plots that specifies tick marks for polar axes.", 
"PoleZeroMarkers" : "PoleZeroMarkers is an option for RootLocusPlot that specifies the markers to be drawn on the complex plane at the open-loop poles, closed-loop poles, and open-loop zeros.", 
"PolyaAeppliDistribution" : "PolyaAeppliDistribution[θ,p] represents a Polya–Aeppli distribution with shape parameters θ and p. ", 
"PolyGamma" : "PolyGamma[z] gives the digamma function ψ(z). \nPolyGamma[n,z] gives the nᵗʰ derivative of the digamma function Superscript[ψ, (n)](z). ", 
"Polygon" : "Polygon[{pt₁,pt₂,…}] is a graphics primitive that represents a filled polygon. \nPolygon[{{pt₁₁,pt₁₂,…},{pt₂₁,…},…}] represents a collection of polygons. ", 
"PolygonIntersections" : "PolygonIntersections is an option for Graphics3D which specifies whether intersecting polygons should be left unchanged. ", 
"PolyhedronData" : "PolyhedronData[poly,\"property\"] gives the value of the specified property for the polyhedron named poly.\nPolyhedronData[poly] gives an image of the polyhedron named poly.\nPolyhedronData[\"class\"] gives a list of the polyhedra in the specified class.", 
"PolyLog" : "PolyLog[n,z] gives the polylogarithm function Liₙ(z).\nPolyLog[n,p,z] gives the Nielsen generalized polylogarithm function Subscript[S,n,p](z). ", 
"PolynomialExtendedGCD" : "PolynomialExtendedGCD[poly₁,poly₂,x] gives the extended GCD of poly₁ and poly₂ treated as univariate polynomials in x.\nPolynomialExtendedGCD[poly₁,poly₂,x,Modulus->p] gives the extended GCD over the integers mod prime p.", 
"PolynomialGCD" : "PolynomialGCD[poly₁,poly₂,…] gives the greatest common divisor of the polynomials polyᵢ. \nPolynomialGCD[poly₁,poly₂,…,Modulus->p] evaluates the GCD modulo the prime p. ", 
"PolynomialLCM" : "PolynomialLCM[poly₁,poly₂,…] gives the least common multiple of the polynomials polyᵢ. \nPolynomialLCM[poly₁,poly₂,…,Modulus->p] evaluates the LCM modulo the prime p. ", 
"PolynomialMod" : "PolynomialMod[poly,m] gives the polynomial poly reduced modulo m. \nPolynomialMod[poly,{m₁,m₂,…}] reduces modulo all of the mᵢ. ", 
"PolynomialQ" : "PolynomialQ[expr,var] yields True if expr is a polynomial in var, and yields False otherwise. \nPolynomialQ[expr,{var₁,…}] tests whether expr is a polynomial in the varᵢ. ", 
"PolynomialQuotient" : "PolynomialQuotient[p,q,x] gives the quotient of p and q, treated as polynomials in x, with any remainder dropped. ", 
"PolynomialQuotientRemainder" : "PolynomialQuotientRemainder[p,q,x] gives a list of the quotient and remainder of p and q, treated as polynomials in x. ", 
"PolynomialReduce" : "PolynomialReduce[poly,{poly₁,poly₂,…},{x₁,x₂,…}] yields a list representing a reduction of poly in terms of the polyᵢ. The list has the form {{a₁,a₂,…},b}, where b is minimal and a₁ poly₁+a₂ poly₂+…+b is exactly poly. ", 
"PolynomialRemainder" : "PolynomialRemainder[p,q,x] gives the remainder from dividing p by q, treated as polynomials in x. ", 
"Polynomials" : "Polynomials[x] represents the domain of polynomials in x.", 
"PopupMenu" : "PopupMenu[x,{val₁,val₂,…}] represents a popup menu with setting x and possible values valᵢ. \nPopupMenu[Dynamic[x],{val₁,…}] takes the setting to be the dynamically updated current value of x, with the value of x being reset every time an item is selected from the menu. \nPopupMenu[x,{val₁->lbl₁,val₂->lbl₂,…}] represents a popup menu in which possible value valᵢ is indicated by lblᵢ. \nPopupMenu[x,{val₁->lbl₁,…},dlbl] displays the menu item as dlbl if x is none of the valᵢ. \nPopupMenu[x,{…},dlbl,base] displays as base when it is not being clicked. ", 
"PopupView" : "PopupView[{expr₁,expr₂,…}] represents an object which displays as a popup menu whose items are the exprᵢ.\nPopupView[{expr₁,expr₂,…},i] makes the iᵗʰ entry be the one currently chosen.\nPopupView[{expr₁,expr₂,…},i,base] displays as base if it is not being clicked.", 
"PopupWindow" : "PopupWindow[expr,contents] displays as expr, but pops up a window containing contents when clicked.", 
"Position" : "Position[expr,pattern] gives a list of the positions at which objects matching pattern appear in expr. \nPosition[expr,pattern,levelspec] finds only objects that appear on levels specified by levelspec. \nPosition[expr,pattern,levelspec,n] gives the positions of the first n objects found. ", 
"Positive" : "Positive[x] gives True if x is a positive number. ", 
"PositiveDefiniteMatrixQ" : "PositiveDefiniteMatrixQ[m] tests whether m is a positive definite matrix.", 
"PossibleZeroQ" : "PossibleZeroQ[expr] gives True if basic symbolic and numerical methods suggest that expr has value zero, and gives False otherwise. ", 
"Postfix" : "Postfix[f[expr]] prints with f[expr] given in default postfix form: expr\/\/f. \nPostfix[f[expr],h] prints as exprh. ", 
"Power" : "x^y gives x to the power y.", 
"PowerDistribution" : "PowerDistribution[k,a] represents a power distribution with domain parameter k and shape parameter a.", 
"PowerExpand" : "PowerExpand[expr] expands all powers of products and powers. \nPowerExpand[expr,{x₁,x₂,…}] expands only with respect to the variables xᵢ.", 
"PowerMod" : "PowerMod[a,b,m] gives aᵇ mod m. \nPowerMod[a,-1,m] finds the modular inverse of a modulo m.\nPowerMod[a,1\/r,m] finds a modular rᵗʰ root of a.", 
"PowerModList" : "PowerModList[a,s\/r,m] gives a list of all x modulo m for which xʳ≡aˢ mod m.", 
"PowersRepresentations" : "PowersRepresentations[n,k,p] gives the distinct representations of the integer n as a sum of k non-negative pᵗʰ integer powers.", 
"PowerSymmetricPolynomial" : "PowerSymmetricPolynomial[r] represents a formal power symmetric polynomial with exponent r.\nPowerSymmetricPolynomial[{r₁,r₂,…}] represents a multivariate formal power symmetric polynomial with exponents r₁, r₂, ….\nPowerSymmetricPolynomial[rspec,data] gives the power symmetric polynomial in data. ", 
"PrecedenceForm" : "PrecedenceForm[expr,prec] prints with expr parenthesized as it would be if it contained an operator with precedence prec. ", 
"Precedes" : "Precedes[x,y,…] displays as x≺y≺….", 
"PrecedesEqual" : "PrecedesEqual[x,y,…] displays as x⪯y⪯….", 
"PrecedesSlantEqual" : "PrecedesSlantEqual[x,y,…] displays as x≼y≼….", 
"PrecedesTilde" : "PrecedesTilde[x,y,…] displays as x≾y≾….", 
"Precision" : "Precision[x] gives the effective number of digits of precision in the number x. ", 
"PrecisionGoal" : "PrecisionGoal is an option for various numerical operations which specifies how many effective digits of precision should be sought in the final result. ", 
"PreDecrement" : "--x decreases the value of x by 1, returning the new value of x. ", 
"PreemptProtect" : "PreemptProtect[expr] evaluates expr, without any interruption from preemptive evaluations.", 
"PreferencesPath" : "PreferencesPath is a global option that specifies which directories are searched for user-specific settings when Mathematica is started.", 
"Prefix" : "Prefix[f[expr]] prints with f[expr] given in default prefix form: f@expr. \nPrefix[f[expr],h] prints as hexpr. ", 
"PreIncrement" : "++x increases the value of x by 1, returning the new value of x. ", 
"Prepend" : "Prepend[expr,elem] gives expr with elem prepended. ", 
"PrependTo" : "PrependTo[s,elem] prepends elem to the value of s, and resets s to the result. ", 
"PreserveImageOptions" : "PreserveImageOptions is an option to graphics and related functions that specifies whether image size and certain other options should be preserved from the previous version of a graphic if the graphic is replaced by a new one in output.", 
"PriceGraphDistribution" : "PriceGraphDistribution[n,k,a] represents a de Solla Price graph distribution for n-vertex graphs where a new vertex with k edges is added at each step using attractiveness parameter a.", 
"Prime" : "Prime[n] gives the nᵗʰ prime number. ", 
"PrimeNu" : "PrimeNu[n] gives the number of distinct primes ν(n) in n.", 
"PrimeOmega" : "PrimeOmega[n] gives the number of prime factors counting multiplicities Ω(n) in n.", 
"PrimePi" : "PrimePi[x] gives the number of primes π(x) less than or equal to x. ", 
"PrimePowerQ" : "PrimePowerQ[expr] yields True if expr is a power of a prime number, and yields False otherwise. ", 
"PrimeQ" : "PrimeQ[expr] yields True if expr is a prime number, and yields False otherwise. ", 
"Primes" : "Primes represents the domain of prime numbers, as in x∈Primes. ", 
"PrimeZetaP" : "PrimeZetaP[s] gives prime zeta function P(s).", 
"PrimitiveRoot" : "PrimitiveRoot[n] gives the smallest primitive root of n.", 
"PrincipalComponents" : "PrincipalComponents[matrix] transforms elements of matrix into unscaled principal components.", 
"PrincipalValue" : "PrincipalValue is an option for Integrate that specifies whether the Cauchy principal value should be found for a definite integral. ", 
"Print" : "Print[expr] prints expr as output. ", 
"PrintAction" : "PrintAction is an option for notebooks that specifies the action taken when a Print[] command is evaluated by the kernel.", 
"PrintingCopies" : "PrintingCopies is an option for notebooks that specifies the number of copies of a notebook printed when a print command is given.", 
"PrintingOptions" : "PrintingOptions->{opt₁->val₁,opt₂->val₂,…} is an option that specifies settings for printing.", 
"PrintingPageRange" : "PrintingPageRange is an option for notebooks that specifies the range of pages of a notebook to be printed.", 
"PrintingStartingPageNumber" : "PrintingStartingPageNumber is an option for notebooks that specifies what number to assign to the first page of a notebook when printed.", 
"PrintingStyleEnvironment" : "PrintingStyleEnvironment is an option for notebooks which specifies the style environment to be used in printing the notebook on paper. ", 
"PrintPrecision" : "PrintPrecision is an option for selections that specifies the maximum number of digits used for displaying a machine-precision number.", 
"PrintTemporary" : "PrintTemporary[expr] prints expr as a temporary cell in a notebook, removing it when the evaluation of the current input line is complete.", 
"PrivateEvaluationOptions" : "PrivateEvaluationOptions->{opt₁->val₁,opt₂->val₂} is an option for selections that specifies settings for evaluation-related suboptions.", 
"PrivateFontOptions" : "PrivateFontOptions->{opt₁->val₁,opt₂->val₂,…} is an option for selections that specifies settings for various font suboptions.", 
"PrivateNotebookOptions" : "PrivateNotebookOptions->{opt₁->val₁,opt₂->val₂,…} is an option for notebooks that specifies various low-level notebook settings.", 
"PrivatePaths" : "PrivatePaths->{opt₁->val₁,opt₂->val₂,…} is a global option that specifies settings for paths private to the notebook front end.", 
"Probability" : "Probability[pred,x≈dist] gives the probability for an event that satisfies the predicate pred under the assumption that x follows the probability distribution dist.\nProbability[pred,x≈data] gives the probability for an event that satisfies the predicate pred under the assumption that x follows the probability distribution given by data.\nProbability[pred,{x₁,x₂,…}≈dist] gives the probability that an event satisfies pred under the assumption that {x₁,x₂,…} follows the multivariate distribution dist.\nProbability[pred,{x₁≈dist₁,x₂≈dist₂,…}] gives the probability that an event satisfies pred under the assumption that x₁, x₂, … are independent and follow the distributions dist₁, dist₂, ….\nProbability[pred₁⦈pred₂,…] gives the conditional probability of pred₁ given pred₂.", 
"ProbabilityDistribution" : "ProbabilityDistribution[pdf,{x,xₘᵢₙ,xₘₐₓ}] represents the continuous distribution with PDF pdf in the variable x where the pdf is taken to be zero for x<xₘᵢₙ and x>xₘₐₓ.\nProbabilityDistribution[pdf,{x,xₘᵢₙ,xₘₐₓ,dx}] represents the discrete distribution with PDF pdf in the variable x where the pdf is taken to be zero for x<xₘᵢₙ and x>xₘₐₓ.\nProbabilityDistribution[pdf,{x,…},{y,…},…] represents a multivariate distribution with PDF pdf in the variables x, y, …, etc. \nProbabilityDistribution[{\"CDF\", cdf},…] represents a probability distribution with CDF given by cdf. \nProbabilityDistribution[{\"SF\",sf},…] represents a probability distribution with survival function given by sf. ", 
"ProbabilityPlot" : "ProbabilityPlot[list] generates a plot of the CDF of list against the CDF of a normal distribution.\nProbabilityPlot[dist] generates a plot of the CDF of the distribution dist against the CDF of a normal distribution.\nProbabilityPlot[data,rdata] generates a plot of the CDF of data against the CDF of rdata.\nProbabilityPlot[data,rdist] generates a plot of the CDF of data against the CDF of symbolic distribution rdist.\nProbabilityPlot[{data₁,data₂,…},ref] generates a plot of the CDF of dataᵢ against the CDF of a reference distribution ref.", 
"ProbabilityScalePlot" : "ProbabilityScalePlot[{x₁,x₂,…}] generates a normal probability plot of the samples xᵢ. \nProbabilityScalePlot[{x₁,x₂,…},\"dist\"] generates a probability plot scaled for the distribution \"dist\".\nProbabilityScalePlot[{data₁,data₂,…},\"dist\"] generates several scaled probability plots for data₁, data₂, ….", 
"ProbitModelFit" : "ProbitModelFit[{y₁,y₂,…},{f₁,f₂,…},x] constructs a binomial probit regression model of the form ½ (1+erf((β₀+β₁f₁ +β₂f₂ +⋯)\/√2)) that fits the yᵢ for successive x values 1, 2, ….\nProbitModelFit[{{x₁₁,x₁₂,…,y₁},{x₂₁,x₂₂,…,y₂},…},{f₁,f₂,…},{x₁,x₂,…}] constructs a binomial probit regression model of the form ½ (1+erf((β₀+β₁f₁ +β₂f₂ +⋯)\/√2)) where the fᵢ depend on the variables xₖ.\nProbitModelFit[{m,v}] constructs a binomial probit regression model from the design matrix m and response vector v.", 
"Product" : "Product[f,{i,iₘₐₓ}] evaluates the product Underoverscript[∏, i=1, iₘₐₓ]f. \nProduct[f,{i,iₘᵢₙ,iₘₐₓ}] starts with i=iₘᵢₙ. \nProduct[f,{i,iₘᵢₙ,iₘₐₓ,di}] uses steps di. \nProduct[f,{i,{i₁,i₂,…}}] uses successive values i₁, i₂, ….\nProduct[f,{i,iₘᵢₙ,iₘₐₓ},{j,jₘᵢₙ,jₘₐₓ},…] evaluates the multiple product Underoverscript[∏, i=iₘᵢₙ, iₘₐₓ]Underoverscript[∏, j=jₘᵢₙ, jₘₐₓ]… f. \nProduct[f,i] gives the indefinite product Underscript[∏, i]f.", 
"ProductDistribution" : "ProductDistribution[dist₁,dist₂,…] represents the joint distribution with independent component distributions dist₁, dist₂, ….", 
"ProductLog" : "ProductLog[z] gives the principal solution for w in z=weʷ. \nProductLog[k,z] gives the kᵗʰ solution. ", 
"ProgressIndicator" : "ProgressIndicator[x] represents a progress indicator with setting x in the range 0 to 1. \nProgressIndicator[Dynamic[x]] takes the setting to be the dynamically updated current value of x. \nProgressIndicator[x,{xₘᵢₙ,xₘₐₓ}] represents a progress indicator with range xₘᵢₙ to xₘₐₓ. \nProgressIndicator[x,Indeterminate] represents a progress indicator with indeterminate range. ", 
"Projection" : "Projection[u,v] finds the projection of the vector u onto the vector v.\nProjection[u,v,f] finds projections with respect to the inner product function f.", 
"Prolog" : "Prolog is an option for graphics functions which gives a list of graphics primitives to be rendered before the main part of the graphics is rendered. ", 
"PromptForm" : "PromptForm[prompt, expr] prints as an output prompt and expression.", 
"Properties" : "Properties is an option that allows specification of properties to objects and items of objects.", 
"Property" : "Property[item,name->value] associates the property name->value with item.", 
"PropertyList" : "PropertyList[{obj,item}] lists the properties available for item in obj.", 
"PropertyValue" : "PropertyValue[{obj,item},name] gives the property value associated with name for item in obj.", 
"Proportion" : "Proportion[x,y,…] displays as x∷y∷….", 
"Proportional" : "Proportional[x,y,…] displays as x∝y∝….", 
"Protect" : "Protect[s₁,s₂,…] sets the attribute Protected for the symbols sᵢ. \nProtect[\"form \"\n     1,\"form \"\n     2,…] protects all symbols whose names match any of the string patterns formᵢ. ", 
"Protected" : "Protected is an attribute which prevents any values associated with a symbol from being modified. ", 
"ProteinData" : "ProteinData[\"prot\"] gives the reference amino acid sequence for the protein prot.\nProteinData[\"prot\",\"property\"] gives the value of the specified property for the protein prot.", 
"Pruning" : "Pruning[image] removes the outermost branches of thin objects in image by setting their values to black.\nPruning[image,n] removes branches that are at most n pixels long.\nPruning[image,{n}] removes n pixels from each branch.\nPruning[image,n,t] treats values above t as foreground.", 
"PseudoInverse" : "PseudoInverse[m] finds the pseudoinverse of a rectangular matrix. ", 
"Purple" : "Purple represents the color purple in graphics or style specifications. ", 
"Put" : "expr>>filename writes expr to a file. \nPut[expr₁,expr₂,…,\"filename\"] writes a sequence of expressions exprᵢ to a file. \nPut[\"filename\"] creates an empty file with the specified name.", 
"PutAppend" : "expr>>>filename appends expr to a file. \nPutAppend[expr₁,expr₂,…,\"filename\"] appends a sequence of expressions exprᵢ to a file. ", 
"QBinomial" : "QBinomial[n,m,q] gives the q-binomial coefficient Subscript[(GridBox[{{TagBox[{n}, Identity, Editable -> True, Selectable -> True]}, {TagBox[{m}, Identity, Editable -> True, Selectable -> True]}}]),q].", 
"QFactorial" : "QFactorial[n,q] gives the q-factorial Subscript[[n],q]!.", 
"QGamma" : "QGamma[z,q] gives the q-gamma function Subscript[Γ,q] (z).", 
"QHypergeometricPFQ" : "QHypergeometricPFQ[{a₁,…,aᵣ},{b₁,…,bₛ},q,z] gives the basic hypergeometric series ᵣϕₛ(a;b;q;z).", 
"QPochhammer" : "QPochhammer[a,q,n] gives the q-Pochhammer symbol (a;q) ₙ.\nQPochhammer[a,q] gives the q-Pochhammer symbol Subscript[(a;q),∞].\nQPochhammer[q] gives the q-Pochhammer symbol Subscript[(q;q),∞].", 
"QPolyGamma" : "QPolyGamma[z,q] gives the q-digamma function Subscript[ψ,q](z).\nQPolyGamma[n,z,q] gives the nᵗʰ derivative of the q-digamma function Subsuperscript[ ψ, q, (n)](z).", 
"QRDecomposition" : "QRDecomposition[m] yields the QR decomposition for a numerical matrix m. The result is a list {q,r}, where q is an orthogonal matrix and r is an upper‐triangular matrix. ", 
"QuadraticIrrationalQ" : "QuadraticIrrationalQ[x] gives True if x is a quadratic irrational and False otherwise.", 
"Quantile" : "Quantile[list,q] gives the qᵗʰ quantile of list. \nQuantile[list,{q₁,q₂,…}] gives a list of quantiles q₁, q₂, …. \nQuantile[list,q,{{a,b},{c,d}}] uses the quantile definition specified by parameters a, b, c, d. \nQuantile[dist,q] gives a quantile of the symbolic distribution dist.", 
"QuantilePlot" : "QuantilePlot[list] generates a plot of quantiles of list against the quantiles of a normal distribution.\nQuantilePlot[dist] generates a plot of quantiles of the distribution dist against the quantiles of a normal distribution.\nQuantilePlot[data,rdata] generates a plot of the quantiles of data against the quantiles of rdata.\nQuantilePlot[data,rdist] generates a plot of the quantiles of data against the quantiles of a symbolic distribution rdist.\nQuantilePlot[{data₁,data₂,…},ref] generates a plot of quantiles of dataᵢ against the quantiles of a reference distribution ref.", 
"Quartics" : "Quartics is an option for functions that involve solving algebraic equations that specifies whether explicit forms for solutions to quartic equations should be given.", 
"QuartileDeviation" : "QuartileDeviation[list] gives the quartile deviation or semi-interquartile range of the elements in list.\nQuartileDeviation[dist] gives the quartile deviation or semi-interquartile range of the symbolic distribution dist.", 
"Quartiles" : "Quartiles[list] gives a list of the 1\/4, 1\/2, and 3\/4 quantiles of the elements in list.\nQuartiles[dist] gives a list of the 1\/4, 1\/2, and 3\/4 quantiles of the symbolic distribution dist.", 
"QuartileSkewness" : "QuartileSkewness[list] gives the coefficient of quartile skewness for the elements in list.\nQuartileSkewness[dist] gives the coefficient of quartile skewness for the symbolic distribution dist.", 
"Quiet" : "Quiet[expr] evaluates expr \"quietly\", without actually outputting any messages generated.\nQuiet[expr,{s₁::t₁,s₂::t₂,…}] quietens only the specified messages during the evaluation of expr.\nQuiet[expr,\"name\"] quietens only the named group of messages.", 
"Quit" : "Quit[] terminates a Mathematica kernel session. ", 
"Quotient" : "Quotient[m,n] gives the integer quotient of m and n. \nQuotient[m,n,d] uses an offset d. ", 
"QuotientRemainder" : "QuotientRemainder[m,n] gives a list of the quotient and remainder from division of m by n.", 
"RadicalBox" : "RadicalBox[x,n] is a low-level box construct that represents the displayed object x^(1\/(n)) in notebook expressions. ", 
"RadicalBoxOptions" : "RadicalBoxOptions->{opt₁->val₁,opt₂->val₂,…} is an option for selections that specifies settings for RadicalBox objects.", 
"RadioButton" : "RadioButton[x,val] represents a radio button whose setting x is set to val when the button is clicked. \nRadioButton[x,val] is displayed as RadioButton[00] when x is val, and as RadioButton[10] otherwise. \nRadioButton[Dynamic[x],val] takes the setting to be the dynamically updated current value of x, with the value of x being reset if the button is clicked. ", 
"RadioButtonBar" : "RadioButtonBar[x,{val₁,val₂,…}] represents a radio button bar with setting x and with labeled radio buttons for values valᵢ.\nRadioButtonBar[Dynamic[x],{val₁,val₂,…}] takes the setting to be the dynamically updated current value of x, with the value of x being reset every time a radio button is pressed.\nRadioButtonBar[x,{val₁->lbl₁,val₂->lbl₂,…}] represents a radio button bar in which the radio button giving value valᵢ is given label lblᵢ.", 
"Radon" : "Radon[image] gives an image representing the discrete Radon transform of image.\nRadon[image,{w,h}] specifies the width w and the height h of the resulting image.\nRadon[image,{w,h},{θ₁,θ₂}] computes the Radon transform only for angles from θ₁ to θ₂.", 
"RamanujanTau" : "RamanujanTau[n] gives the Ramanujan τ function τ(n).", 
"RamanujanTauL" : "RamanujanTauL[s] gives the Ramanujan tau Dirichlet L-function L(s).", 
"RamanujanTauTheta" : "RamanujanTauTheta[t] gives the Ramanujan tau theta function θ(t).", 
"RamanujanTauZ" : "RamanujanTauZ[t] gives the Ramanujan tau Z-function Z(t).", 
"Random" : "Random[] gives a uniformly distributed pseudorandom Real in the range 0 to 1. \nRandom[type,range] gives a pseudorandom number of the specified type, lying in the specified range. Possible types are: Integer, Real and Complex. The default range is 0 to 1. You can give the range {min,max} explicitly; a range specification of max is equivalent to {0,max}. ", 
"RandomChoice" : "RandomChoice[{e₁,e₂,…}] gives a pseudorandom choice of one of the eᵢ. \nRandomChoice[list,n] gives a list of n pseudorandom choices. \nRandomChoice[list,{n₁,n₂,…}] gives an n₁×n₂×… array of pseudorandom choices. \nRandomChoice[{w₁,w₂,…}->{e₁,e₂,…}] gives a pseudorandom choice weighted by the wᵢ. \nRandomChoice[wlist->elist,n] gives a list of n weighted choices.\nRandomChoice[wlist->elist,{n₁,n₂,…}] gives an n₁×n₂×… array of weighted choices.", 
"RandomComplex" : "RandomComplex[] gives a pseudorandom complex number with real and imaginary parts in the range 0 to 1.\nRandomComplex[{zₘᵢₙ,zₘₐₓ}] gives a pseudorandom complex number in the rectangle with corners given by the complex numbers zₘᵢₙ and zₘₐₓ.\nRandomComplex[zₘₐₓ] gives a pseudorandom complex number in the rectangle whose corners are the origin and zₘₐₓ.\nRandomComplex[range,n] gives a list of n pseudorandom complex numbers.\nRandomComplex[range,{n₁,n₂,…}] gives an n₁×n₂×… array of pseudorandom complex numbers", 
"RandomGraph" : "RandomGraph[{n,m}] gives a pseudorandom graph with n vertices and m edges.\nRandomGraph[{n,m},k] gives a list of k pseudorandom graphs.\nRandomGraph[gdist,…] samples from the random graph distribution gdist.", 
"RandomImage" : "RandomImage[max,{w,h}] gives an image of dimensions {w,h} with pseudorandom pixel values generated from a uniform distribution in the range 0 to max.\nRandomImage[{min,max},{w,h}] generates pixel values using a uniform distribution in the range min to max.\nRandomImage[dist,{w,h}] generates pixel values using a symbolic distribution dist.", 
"RandomInteger" : "RandomInteger[{iₘᵢₙ,iₘₐₓ}] gives a pseudorandom integer in the range {iₘᵢₙ,iₘₐₓ}. \nRandomInteger[iₘₐₓ] gives a pseudorandom integer in the range {0,…,iₘₐₓ}. \nRandomInteger[] pseudorandomly gives 0 or 1. \nRandomInteger[range,n] gives a list of n pseudorandom integers. \nRandomInteger[range,{n₁,n₂,…}] gives an n₁×n₂×… array of pseudorandom integers. ", 
"RandomPermutation" : "RandomPermutation[gr] gives a pseudorandom permutation in the permutation group gr.\nRandomPermutation[gr,n] gives a list of n pseudorandom permutations in the permutation group gr.", 
"RandomPrime" : "RandomPrime[{iₘᵢₙ,iₘₐₓ}] gives a pseudorandom prime number in the range iₘᵢₙ to iₘₐₓ.\nRandomPrime[iₘₐₓ] gives a pseudorandom prime number in the range 2 to iₘₐₓ.\nRandomPrime[range,n] gives a list of n pseudorandom primes.", 
"RandomReal" : "RandomReal[] gives a pseudorandom real number in the range 0 to 1. \nRandomReal[{xₘᵢₙ,xₘₐₓ}] gives a pseudorandom real number in the range xₘᵢₙ to xₘₐₓ. \nRandomReal[xₘₐₓ] gives a pseudorandom real number in the range 0 to xₘₐₓ.\nRandomReal[range,n] gives a list of n pseudorandom reals. \nRandomReal[range,{n₁,n₂,…}] gives an n₁×n₂×… array of pseudorandom reals. ", 
"RandomSample" : "RandomSample[{e₁,e₂,…},n] gives a pseudorandom sample of n of the eᵢ.\nRandomSample[{w₁,w₂,…}->{e₁,e₂,…},n] gives a pseudorandom sample of n of the eᵢ chosen using weights wᵢ.\nRandomSample[{e₁,e₂,…}] gives a pseudorandom permutation of the eᵢ.", 
"RandomVariate" : "RandomVariate[dist] gives a pseudorandom variate from the symbolic distribution dist.\nRandomVariate[dist,n] gives a list of n pseudorandom variates from the symbolic distribution dist.\nRandomVariate[dist,{n₁,n₂,…}] gives an n₁× n₂×… array of pseudorandom variates from the symbolic distribution dist.", 
"Range" : "Range[iₘₐₓ] generates the list {1,2,…,iₘₐₓ}. \nRange[iₘᵢₙ,iₘₐₓ] generates the list {iₘᵢₙ,…,iₘₐₓ}. \nRange[iₘᵢₙ,iₘₐₓ,di] uses step di.", 
"RangeFilter" : "RangeFilter[image,r] filters image by replacing every pixel by the difference of the maximum and minimum in its range r neighborhood. \nRangeFilter[data,r] applies a range filter to an array of data.", 
"RankedMax" : "RankedMax[list,n] gives the nᵗʰ largest element in list.", 
"RankedMin" : "RankedMin[list,n] gives the nᵗʰ smallest element in list.", 
"Raster" : "Raster[{{a₁₁,a₁₂,…},…}] is a two-dimensional graphics primitive which represents a rectangular array of gray cells. \nRaster[{{{r₁₁,g₁₁,b₁₁},…},…}] represents an array of RGB color cells. \nRaster[{{{r₁₁,g₁₁,b₁₁,α₁₁},…},…}] represents an array of color cells with opacity Subscript[α,ij]. \nRaster[{{{a₁₁,α₁₁},…},…}] represents an array of gray cells with the specified opacities. ", 
"RasterArray" : "RasterArray[{{g₁₁,g₁₂,…},…}] is a two-dimensional graphics primitive that represents a rectangular array of cells colored according to the graphics directives Subscript[g,ij]. ", 
"Rasterize" : "Rasterize[g] returns a rasterized graphic of g. \nRasterize[g,elem] gives the element elem associated with the rasterized form of g. ", 
"RasterSize" : "RasterSize is an option for Rasterize and related functions that determines the absolute pixel size of the raster generated.", 
"Rational" : "Rational is the head used for rational numbers. ", 
"RationalFunctions" : "RationalFunctions represents the domain of rational functions", 
"Rationalize" : "Rationalize[x] converts an approximate number x to a nearby rational with small denominator. \nRationalize[x,dx] yields the rational number with smallest denominator that lies within dx of x.", 
"Rationals" : "Rationals represents the domain of rational numbers, as in x∈Rationals. ", 
"Ratios" : "Ratios[list] gives the successive ratios of elements in list. \nRatios[list,n] gives the nᵗʰ iterated ratios of list. \nRatios[list,{n₁,n₂,…}] gives the successive nₖᵗʰ ratios at level k in a nested list. ", 
"Raw" : "Raw[h,\"hexstring\"] constructs a raw data object with head h, and with contents corresponding to the binary bit pattern represented by the string hexstring, interpreted as a hexadecimal number.", 
"RawBoxes" : "RawBoxes[boxes] is a low-level construct which is formatted as boxes without further interpretation. ", 
"RawData" : "RawData[data] is a low-level representation of the contents of a cell in which Show Cell Expression has been toggled.", 
"RawMedium" : "RawMedium is an internal symbol.", 
"RayleighDistribution" : "RayleighDistribution[σ] represents the Rayleigh distribution with scale parameter σ.", 
"Re" : "Re[z] gives the real part of the complex number z. ", 
"Read" : "Read[stream] reads one expression from an input stream and returns the expression. \nRead[stream,type] reads one object of the specified type. \nRead[stream,{type₁,type₂,…}] reads a sequence of objects of the specified types. ", 
"ReadList" : "ReadList[\"file\"] reads all the remaining expressions in a file and returns a list of them. \nReadList[\"file\",type] reads objects of the specified type from a file, until the end of the file is reached. The list of objects read is returned. \nReadList[\"file\",{type₁,type₂,…}] reads objects with a sequence of types, until the end of the file is reached. \nReadList[\"file\",types,n] reads only the first n objects of the specified types. ", 
"ReadProtected" : "ReadProtected is an attribute that prevents values associated with a symbol from being seen. ", 
"Real" : "Real is the head used for real (floating‐point) numbers. ", 
"RealBlockDiagonalForm" : "RealBlockDiagonalForm is an option for SchurDecomposition and related functions which specifies whether 2×2 blocks of real values should be used on matrix diagonals in place of complex values.", 
"RealDigits" : "RealDigits[x] gives a list of the digits in the approximate real number x, together with the number of digits that are to the left of the decimal point. \nRealDigits[x,b] gives a list of base‐b digits in x. \nRealDigits[x,b,len] gives a list of len digits. \nRealDigits[x,b,len,n] gives len digits starting with the coefficient of bⁿ. ", 
"RealExponent" : "RealExponent[x] gives log₁₀(|x|).\nRealExponent[x,b] gives Subscript[log,b](|x|).", 
"Reals" : "Reals represents the domain of real numbers, as in x∈Reals. ", 
"Reap" : "Reap[expr] gives the value of expr together with all expressions to which Sow has been applied during its evaluation. Expressions sown using Sow[e] or Sow[e,tagᵢ] with different tags are given in different lists. \nReap[expr,patt] reaps only expressions sown with tags that match patt. \nReap[expr,{patt₁,patt₂,…}] puts expressions associated with each of the pattᵢ in a separate list. \nReap[expr,patt,f] returns {expr,{f[tag₁,{e₁₁,e₁₂,…}],…}}. ", 
"RebuildPacletData" : "RebuildPacletData[] rebuilds cached paclet information by rescanning paclet directories.", 
"Record" : "Record represents a record in Read, Find, and related functions. ", 
"RecordLists" : "RecordLists is an option for ReadList that specifies whether objects from separate records should be returned in separate sublists. ", 
"RecordSeparators" : "RecordSeparators is an option for Read, Find, and related functions that specifies the list of strings to be taken as delimiters for records. ", 
"Rectangle" : "Rectangle[{xₘᵢₙ,yₘᵢₙ},{xₘₐₓ,yₘₐₓ}] is a two-dimensional graphics primitive that represents a filled rectangle, oriented parallel to the axes. \nRectangle[{xₘᵢₙ,yₘᵢₙ}] corresponds to a unit square with its bottom-left corner at {xₘᵢₙ,yₘᵢₙ}.", 
"RectangleChart" : "RectangleChart[{{x₁,y₁},{x₂,y₂},…}] makes a rectangle chart with bars of width xᵢ and height yᵢ. \nRectangleChart[{…,wᵢ[{xᵢ,yᵢ},…],…,Subscript[w,j][{xᵢ,Subscript[y,j]},…],…}] makes a rectangle chart with bar features defined by the symbolic wrappers wₖ.\nRectangleChart[{data₁,data₂,…}] makes a rectangle chart from multiple datasets dataᵢ. ", 
"RectangleChart3D" : "RectangleChart3D[{{x₁,y₁,z₁},{x₂,y₂,z₂},…}] makes a 3D rectangle chart with bars of width xᵢ, depth yᵢ and height zᵢ. \nRectangleChart3D[{…,wᵢ[{xᵢ,yᵢ,zᵢ},…],…,Subscript[w,j][{xᵢ,Subscript[y,j],Subscript[z,j]},…],…}] makes a 3D rectangle chart with bar features defined by the symbolic wrappers wₖ.\nRectangleChart3D[{data₁,data₂,…}] makes a 3D rectangle chart from multiple datasets dataᵢ. ", 
"RecurrenceTable" : "RecurrenceTable[eqns,expr,{n,nₘₐₓ}] generates a list of values of expr for successive n based on solving the recurrence equations eqns.\nRecurrenceTable[eqns,expr,nspec] generates a list of values of expr over the range of n values specified by nspec.\nRecurrenceTable[eqns,expr,{n₁,…},{n₂,…},…] generates an array of values of expr for successive n₁, n₂, ….", 
"Red" : "Red represents the color red in graphics or style specifications. ", 
"Reduce" : "Reduce[expr,vars] reduces the statement expr by solving equations or inequalities for vars and eliminating quantifiers. \nReduce[expr,vars,dom] does the reduction over the domain dom. Common choices of dom are Reals, Integers, and Complexes. ", 
"ReferenceLineStyle" : "ReferenceLineStyle is an option for QuantilePlot and similar functions that specifies the style used for the reference line. ", 
"Refine" : "Refine[expr,assum] gives the form of expr that would be obtained if symbols in it were replaced by explicit numerical expressions satisfying the assumptions assum. \nRefine[expr] uses default assumptions specified by any enclosing Assuming constructs. ", 
"ReflectionMatrix" : "ReflectionMatrix[v] gives the matrix that represents reflection of points in a mirror normal to the vector v.", 
"ReflectionTransform" : "ReflectionTransform[v] gives a TransformationFunction that represents a reflection in a mirror through the origin, normal to the vector v.\nReflectionTransform[v,p] gives a reflection in a mirror through the point p, normal to the vector v.", 
"Refresh" : "Refresh[expr,opts] represents an object whose value in a Dynamic should be refreshed at times specified by the options opts. \nRefresh[expr,None] specifies that the value of expr should never automatically be refreshed. ", 
"RefreshRate" : "RefreshRate is an option to Animate and related functions which specifies the refresh rate for frames in animations.", 
"RegionBinarize" : "RegionBinarize[image,marker,d] gives a binary version of image that includes the foreground pixels of marker and also connected regions whose pixel values are within a distance d.\nRegionBinarize[image,marker,d,{t₁,t₂}] grows regions in marker by adding pixels whose average intensity is also constrained within an interval {t₁,t₂}.", 
"RegionFunction" : "RegionFunction is an option for plotting functions that specifies the region to include in the plot drawn. ", 
"RegionPlot" : "RegionPlot[pred,{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] makes a plot showing the region in which pred is True. ", 
"RegionPlot3D" : "RegionPlot3D[pred,{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ},{z,zₘᵢₙ,zₘₐₓ}] makes a plot showing the three-dimensional region in which pred is True. ", 
"RegularExpression" : "RegularExpression[\"regex\"] represents the generalized regular expression specified by the string \"regex\". ", 
"Regularization" : "Regularization is an option for Sum and Product that specifies what type of regularization to use.", 
"Reinstall" : "Reinstall[link] un-installs the specified external package and installs it again.", 
"ReleaseHold" : "ReleaseHold[expr] removes Hold, HoldForm, HoldPattern, and HoldComplete in expr. ", 
"ReleaseJavaObject" : "ReleaseJavaObject[javaobject] tells the Java memory-management system to forget about any references to the specified JavaObject that are being maintained solely for the sake of Mathematica. The JavaObject in Mathematica is no longer valid after the call. You call ReleaseJavaObject when you are completely finished with an object in Mathematica, and you want to allow it to be garbage-collected in Java.", 
"ReliefImage" : "ReliefImage[array] generates a relief image of an array of height values. ", 
"ReliefPlot" : "ReliefPlot[array] generates a relief plot of an array of height values. ", 
"Remove" : "Remove[symbol₁,…] removes symbols completely, so that their names are no longer recognized by Mathematica. \nRemove[\"form \"\n     1,\"form \"\n     2,…] removes all symbols whose names match any of the string patterns formᵢ. ", 
"RemoveAlphaChannel" : "RemoveAlphaChannel[image] removes all opacity information from image.\nRemoveAlphaChannel[image,c] removes opacity by blending all pixels with the background color c.", 
"Removed" : "Removed[string] is printed to indicate a symbol that has been removed.", 
"RemoveProperty" : "RemoveProperty[{obj,item}] removes all properties associated with item in obj.\nRemoveProperty[{obj,item},name] removes the property name associated with item in obj.", 
"RemoveScheduledTask" : "RemoveScheduledTask[obj] remove the obj from the list of currently set tasks.", 
"RenameDirectory" : "RenameDirectory[dir₁,dir₂] renames the directory dir₁ to dir₂. ", 
"RenameFile" : "RenameFile[file₁,file₂] renames file₁ to file₂. ", 
"RenderAll" : "RenderAll is an option for Graphics3D that specifies whether or not PostScript should be generated for all polygons. ", 
"RenkoChart" : "RenkoChart[{{date₁,p₁},{date₂,p₂},…}] makes a Renko chart with prices pᵢ at date dateᵢ.\nRenkoChart[{\"name\",daterange}] makes a Renko chart of closing prices for the financial entity \"name\" over the date range daterange.\nRenkoChart[{…},s] makes a Renko chart with brick height of fraction s of the average price.", 
"Repeated" : "p.. or Repeated[p] is a pattern object that represents a sequence of one or more expressions, each matching p. \nRepeated[p,max] represents up to max expressions matching p.\nRepeated[p,{min,max}] represents between min and max expressions matching p.\nRepeated[p,{n}] represents exactly n expressions matching p.", 
"RepeatedNull" : "p... or RepeatedNull[p] is a pattern object that represents a sequence of zero or more expressions, each matching p. ", 
"RepeatedString" : "RepeatedString is an internal symbol used for formatting and printing.", 
"Replace" : "Replace[expr,rules] applies a rule or list of rules in an attempt to transform the entire expression expr. \nReplace[expr,rules,levelspec] applies rules to parts of expr specified by levelspec. ", 
"ReplaceAll" : "expr\/.rules applies a rule or list of rules in an attempt to transform each subpart of an expression expr. ", 
"ReplaceList" : "ReplaceList[expr,rules] attempts to transform the entire expression expr by applying a rule or list of rules in all possible ways, and returns a list of the results obtained. \nReplaceList[expr,rules,n] gives a list of at most n results. ", 
"ReplacePart" : "ReplacePart[expr,i->new] yields an expression in which the iᵗʰ part of expr is replaced by new. \nReplacePart[expr,{i₁->new₁,i₂->new₂,…}] replaces parts at positions iₙ by newₙ. \nReplacePart[expr,{i,j,…}->new] replaces the part at position {i,j,…}. \nReplacePart[expr,{{i₁,j₁,…}->new₁,…}] replaces parts at positions {iₙ,jₙ,…} by newₙ. \nReplacePart[expr,{{i₁,j₁,…},…}->new] replaces all parts at positions {iₙ,jₙ,…} by new. ", 
"ReplaceRepeated" : "expr\/\/.rules repeatedly performs replacements until expr no longer changes. ", 
"Resampling" : "Resampling is an option that specifies the method to be used for resampling images.", 
"Rescale" : "Rescale[x,{min,max}] gives x rescaled to run from 0 to 1 over the range min to max. \nRescale[x,{min,max},{xₘᵢₙ,xₘₐₓ}] gives x rescaled to run from xₘᵢₙ to xₘₐₓ over the range min to max. \nRescale[list] rescales each element of list to run from 0 to 1 over the range Min[list] to Max[list]. ", 
"RescalingTransform" : "RescalingTransform[{{xₘᵢₙ,xₘₐₓ},{yₘᵢₙ,yₘₐₓ},…},{{xpₘᵢₙ,xpₘₐₓ},…}] gives a TransformationFunction that rescales the region with coordinate ranges xₘᵢₙ to xₘₐₓ, etc. to the region with coordinate ranges xpₘᵢₙ to xpₘₐₓ, etc.\nRescalingTransform[{{xₘᵢₙ,xₘₐₓ},{yₘᵢₙ,yₘₐₓ},…}] gives a TransformationFunction that rescales to the unit square, cube, etc.", 
"ResetDirectory" : "ResetDirectory[] resets the current working directory to its previous value. ", 
"ResetScheduledTask" : "ResetScheduledTask[obj] resets scheduled task object obj to the original parameter values.\nResetScheduledTask[obj,timespec]  resets scheduled task timing to timespec.\nResetScheduledTask[obj,timespec,offset] resets scheduled task time offset to offset.", 
"Residue" : "Residue[expr,{z,z₀}] finds the residue of expr at the point z=z₀. ", 
"Resolve" : "Resolve[expr] attempts to resolve expr into a form that eliminates ForAll and Exists quantifiers. \nResolve[expr,dom] works over the domain dom. Common choices of dom are Complexes, Reals, and Booleans. ", 
"Rest" : "Rest[expr] gives expr with the first element removed. ", 
"RestartPacletManager" : "RestartPacletManager[] restarts the Paclet Manager.", 
"Resultant" : "Resultant[poly₁,poly₂,var] computes the resultant of the polynomials poly₁ and poly₂ with respect to the variable var. \nResultant[poly₁,poly₂,var,Modulus->p] computes the resultant modulo the prime p. ", 
"ResumePacket" : "ResumePacket[] is a MathLink packet used for synchronization with the Mathematica kernel.", 
"Return" : "Return[expr] returns the value expr from a function. \nReturn[] returns the value Null. ", 
"ReturnExpressionPacket" : "ReturnExpressionPacket[expr] is a MathLink packet that contains the expression expr, the result of an EnterExpressionPacket evaluation.", 
"ReturnInputFormPacket" : "ReturnInputFormPacket is an internal symbol used for formatting.", 
"ReturnPacket" : "ReturnPacket[expr] is a MathLink packet that contains the expression expr, the result of an EvaluatePacket evaluation.", 
"ReturnTextPacket" : "ReturnTextPacket[string] is a MathLink packet containing string, the result of an EnterTextPacket evaluation.", 
"Reverse" : "Reverse[expr] reverses the order of the elements in expr. \nReverse[expr,n] reverses elements at level n in expr.\nReverse[expr,{n₁,n₂,…}] reverses elements at levels n₁, n₂, … in expr.", 
"ReverseBiorthogonalSplineWavelet" : "ReverseBiorthogonalSplineWavelet[] represents a reverse biorthogonal spline wavelet of order 4 and dual order 2.\nReverseBiorthogonalSplineWavelet[n,m] represents a reverse biorthogonal spline wavelet of order n and dual order m.", 
"ReverseElement" : "ReverseElement[x,y,…] displays as x∋y∋….", 
"ReverseEquilibrium" : "ReverseEquilibrium[x,y,…] displays as x⇋y⇋….", 
"ReverseGraph" : "ReverseGraph[g] gives the reverse graph of the directed g.", 
"ReverseUpEquilibrium" : "ReverseUpEquilibrium[x,y,…] displays as x⥯y⥯….", 
"RevolutionAxis" : "RevolutionAxis is an option for RevolutionPlot3D which specifies the revolution axis around which the curve should be rotated. ", 
"RevolutionPlot3D" : "RevolutionPlot3D[Subscript[f,z],{t,tₘᵢₙ,tₘₐₓ}] generates a plot of the surface of revolution with height Subscript[f,z] at radius t.\nRevolutionPlot3D[Subscript[f,z],{t,tₘᵢₙ,tₘₐₓ},{θ,θₘᵢₙ,θₘₐₓ}] takes the azimuthal angle θ to vary between θₘᵢₙ and θₘₐₓ.\nRevolutionPlot3D[{fₓ,Subscript[f,z]},{t,tₘᵢₙ,tₘₐₓ}] generates a plot of the surface obtained by rotating the parametric curve with x,z coordinates {fₓ,Subscript[f,z]} around the z axis.\nRevolutionPlot3D[{fₓ,Subscript[f,z]},{t,tₘᵢₙ,tₘₐₓ},{θ,θₘᵢₙ,θₘₐₓ}] takes the azimuthal angle θ to vary from θₘᵢₙ to θₘₐₓ.\nRevolutionPlot3D[{fₓ,Subscript[f,y],Subscript[f,z]},{t,tₘᵢₙ,tₘₐₓ},…] plots the surface obtained by rotating the parametric curve with x,y,z coordinates {fₓ,Subscript[f,y],Subscript[f,z]}.", 
"RGBColor" : "RGBColor[red,green,blue] is a graphics directive specifying that objects that follow are to be displayed, if possible, in the color given. \nRGBColor[r,g,b,a] specifies opacity a. ", 
"RiccatiSolve" : "RiccatiSolve[{a,b},{q,r}] gives the matrix x that is the stabilizing solution of the continuous algebraic Riccati equation Superscript[a, ].x+x.a-x.b.r⁻¹.Superscript[b, ].x+q=0.\nRiccatiSolve[{a,b},{q,r,p}] solves the equation Superscript[a, ].x+x.a-(x.b+p).r⁻¹.(Superscript[b, ].x+Superscript[p, ])+q=0. ", 
"RiceDistribution" : "RiceDistribution[α,β] represents a Rice distribution with shape parameters α and β.\nRiceDistribution[m,α,β] represents a Norton–Rice distribution with parameters m, α, and β.", 
"RidgeFilter" : "RidgeFilter[image] computes a measure for the presence of a ridge for each pixel in image.\nRidgeFilter[image,σ] uses the specified ridge scale σ.", 
"RiemannR" : "RiemannR[x] gives the Riemann prime counting function R(x).", 
"RiemannSiegelTheta" : "RiemannSiegelTheta[t] gives the Riemann–Siegel function ϑ(t). ", 
"RiemannSiegelZ" : "RiemannSiegelZ[t] gives the Riemann–Siegel function Z(t). ", 
"Riffle" : "Riffle[{e₁,e₂,…},x] gives {e₁,x,e₂,x,…}. \nRiffle[{e₁,e₂,…},{x₁,x₂,…}] gives {e₁,x₁,e₂,x₂,…}. \nRiffle[list,x,n] yields a list in which every nᵗʰ element is x. \nRiffle[list,x,{iₘᵢₙ,iₘₐₓ,n}] yields a list in which x appears if possible at positions iₘᵢₙ, Cell[BoxData[{{i}, ₘᵢₙ}], InlineFormula]+n, iₘᵢₙ+2n, … , iₘₐₓ. ", 
"Right" : "Right is a symbol that represents the right-hand side for purposes of alignment and positioning. ", 
"RightArrow" : "RightArrow[x,y,…] displays as x→y→….", 
"RightArrowBar" : "RightArrowBar[x,y,…] displays as x⇥y⇥….", 
"RightArrowLeftArrow" : "RightArrowLeftArrow[x,y,…] displays as x⇄y⇄….", 
"RightCosetRepresentative" : "RightCosetRepresentative[group,g] returns the smallest element in the right coset of products of the elements of group by g.", 
"RightDownTeeVector" : "RightDownTeeVector[x,y,…] displays as x⥝y⥝….", 
"RightDownVector" : "RightDownVector[x,y,…] displays as x⇂y⇂….", 
"RightDownVectorBar" : "RightDownVectorBar[x,y,…] displays as x⥕y⥕….", 
"RightTee" : "RightTee[x,y] displays as x⊢y.", 
"RightTeeArrow" : "RightTeeArrow[x,y,…] displays as x↦y↦….", 
"RightTeeVector" : "RightTeeVector[x,y,…] displays as x⥛y⥛….", 
"RightTriangle" : "RightTriangle[x,y,…] displays as x⊳y⊳….", 
"RightTriangleBar" : "RightTriangleBar[x,y,…] displays as x⧐y⧐….", 
"RightTriangleEqual" : "RightTriangleEqual[x,y,…] displays as x⊵y⊵….", 
"RightUpDownVector" : "RightUpDownVector[x,y,…] displays as x⥏y⥏….", 
"RightUpTeeVector" : "RightUpTeeVector[x,y,…] displays as x⥜y⥜….", 
"RightUpVector" : "RightUpVector[x,y,…] displays as x↾y↾….", 
"RightUpVectorBar" : "RightUpVectorBar[x,y,…] displays as x⥔y⥔….", 
"RightVector" : "RightVector[x,y,…] displays as x⇀y⇀….", 
"RightVectorBar" : "RightVectorBar[x,y,…] displays as x⥓y⥓….", 
"RogersTanimotoDissimilarity" : "RogersTanimotoDissimilarity[u,v] gives the Rogers–Tanimoto dissimilarity between Boolean vectors u and v.", 
"Root" : "Root[f,k] represents the exact kᵗʰ root of the polynomial equation f[x]==0. \nRoot[{f,x₀}] represents the exact root of the general equation f[x]==0 near x=x₀.\nRoot[{f,x₀,n}] represents n roots of the equation f[x]==0 near x=x₀.", 
"RootApproximant" : "RootApproximant[x] converts the number x to one of the \"simplest\" algebraic numbers that approximates it well.\nRootApproximant[x,n] finds an algebraic number of degree at most n that approximates x.", 
"RootIntervals" : "RootIntervals[{poly₁,poly₂,…}] gives a list of isolating intervals for the real roots of any of the polyᵢ, together with a list of which polynomials actually have each successive root.\nRootIntervals[poly] gives isolating intervals for real roots of a single polynomial. \nRootIntervals[polys,Complexes] gives bounding rectangles for complex roots.", 
"RootLocusPlot" : "RootLocusPlot[g,{k,kₘᵢₙ,kₘₐₓ}] generates the root locus plot of a rational function g of k ranging from kₘᵢₙ to kₘₐₓ.\nRootLocusPlot[sys,…] plots the root loci of a TransferFunctionModel or StateSpaceModel object sys.", 
"RootMeanSquare" : "RootMeanSquare[list] gives the root mean square of values in list.", 
"RootOfUnityQ" : "RootOfUnityQ[a] yields True if a is a root of unity, and yields False otherwise.", 
"RootReduce" : "RootReduce[expr] attempts to reduce expr to a single Root object. ", 
"Roots" : "Roots[lhs==rhs,var] yields a disjunction of equations which represent the roots of a polynomial equation. ", 
"RootSum" : "RootSum[f,form] represents the sum of form[x] for all x that satisfy the polynomial equation f[x]==0. ", 
"Rotate" : "Rotate[g,θ] represents 2D graphics primitives or any other objects g rotated counterclockwise by θ radians about the center of their bounding box. \nRotate[g,θ,{x,y}] rotates about the point {x,y}. \nRotate[g,{u,v}] rotates around the origin, transforming the 2D or 3D vector u to v.\nRotate[g,θ,w] rotates 3D graphics primitives by θ radians around the 3D vector w anchored at the origin.\nRotate[g,θ,w,p] rotates around the 3D vector w anchored at p.\nRotate[g,θ,{u,v}] rotates by angle θ in the plane spanned by 3D vectors u and v.", 
"RotateLabel" : "RotateLabel is an option for graphics and related functions that specifies whether labels on vertical frame axes should be rotated to be vertical. ", 
"RotateLeft" : "RotateLeft[expr,n] cycles the elements in expr n positions to the left. \nRotateLeft[expr] cycles one position to the left. \nRotateLeft[expr,{n₁,n₂,…}] cycles elements at successive levels nᵢ positions to the left. ", 
"RotateRight" : "RotateRight[expr,n] cycles the elements in expr n positions to the right. \nRotateRight[expr] cycles one position to the right. \nRotateRight[expr,{n₁,n₂,…}] cycles elements at successive levels nᵢ positions to the right. ", 
"RotationAction" : "RotationAction is an option for three-dimensional graphics functions that specifies how to render 3D objects when they are interactively rotated.", 
"RotationMatrix" : "RotationMatrix[θ] gives the 2D rotation matrix that rotates 2D vectors counterclockwise by θ radians.\nRotationMatrix[θ,w] gives the 3D rotation matrix for a counterclockwise rotation around the 3D vector w.\nRotationMatrix[{u,v}] gives the matrix that rotates the vector u to the direction of the vector v in any dimension.\nRotationMatrix[θ,{u,v}] gives the matrix that rotates by θ radians in the hyperplane spanned by u and v.", 
"RotationTransform" : "RotationTransform[θ] gives a TransformationFunction that represents a rotation in 2D by θ radians about the origin.\nRotationTransform[θ,p] gives a 2D rotation about the 2D point p.\nRotationTransform[θ,w] gives a 3D rotation around the direction of the 3D vector w.\nRotationTransform[θ,w,p] gives a 3D rotation around the axis w anchored at the point p.\nRotationTransform[{u,v}] gives a rotation about the origin that transforms the vector u to the direction of the vector v.\nRotationTransform[{u,v},p] gives a rotation about the point p that transforms u to the direction of v.\nRotationTransform[θ,{u,v},…] gives a rotation by θ radians in the hyperplane spanned by u and v.", 
"Round" : "Round[x] gives the integer closest to x. \nRound[x,a] rounds to the nearest multiple of a. ", 
"RoundingRadius" : "RoundingRadius is an option for Rectangle, Framed, and related functions that specifies the radius of the circle to use in rendering rounded corners.", 
"Row" : "Row[{expr₁,expr₂,…}] is an object that formats with the exprᵢ arranged in a row, potentially extending over several lines. \nRow[list,s] inserts s as a separator between successive elements. ", 
"RowAlignments" : "RowAlignments is an option for the low-level function GridBox that specifies how entries in each row should be aligned. ", 
"RowBox" : "RowBox[{box₁,box₂,…}] is a low-level box construct that represents a row of boxes or strings in a notebook expression. ", 
"RowLines" : "RowLines is an option for the low-level function GridBox that specifies whether lines should be drawn between adjacent rows. ", 
"RowMinHeight" : "RowMinHeight is an option for the low-level function GridBox that specifies the minimum total height in units of font size that should be allowed for each row. ", 
"RowReduce" : "RowReduce[m] gives the row‐reduced form of the matrix m. ", 
"RowsEqual" : "RowsEqual is an option for the low-level function GridBox that specifies whether all rows in the grid should be assigned equal total height. ", 
"RowSpacings" : "RowSpacings is an option for the low-level function GridBox that specifies the spaces in x heights that should be inserted between successive rows. ", 
"RSolve" : "RSolve[eqn,a[n],n] solves a recurrence equation for a[n]. \nRSolve[{eqn₁,eqn₂,…},{a₁[n],a₂[n],…},n] solves a system of recurrence equations. \nRSolve[eqn,a[n₁,n₂,…],{n₁,n₂,…}] solves a partial recurrence equation. ", 
"RudvalisGroupRu" : "RudvalisGroupRu[] represents the sporadic simple Rudvalis group Ru.", 
"Rule" : "lhs->rhs or lhsrhs represents a rule that transforms lhs to rhs. ", 
"RuleCondition" : "RuleCondition is an internal symbol.", 
"RuleDelayed" : "lhs:>rhs or lhsrhs represents a rule that transforms lhs to rhs, evaluating rhs only after the rule is used. ", 
"RuleForm" : "RuleForm is an internal symbol used for formatting and printing.", 
"RulerUnits" : "RulerUnits is an option for notebooks that specifies the units in the ruler toolbar.", 
"Run" : "Run[expr₁,expr₂,…] generates the printed form of the expressions exprᵢ, separated by spaces, and runs it as an external operating system command. ", 
"RunScheduledTask" : "RunScheduledTask[expr] schedules and starts a task that will repeatedly evaluate expr once per second.\nRunScheduledTask[expr,time] schedules and starts a task that will repeatedly evaluate expr every time seconds.\nRunScheduledTask[expr,{time}] schedules and starts a task that will evaluate expr once after time seconds.\nRunScheduledTask[expr,{time,count}] schedules and starts a task that will try evaluating expr once every time seconds up to count times.\nRunScheduledTask[expr,timespec,start] schedules a task that will automatically start at start time.", 
"RunThrough" : "RunThrough[\"command\",expr] executes an external command, giving the printed form of expr as input and taking the output, reading it as Mathematica input, and returning the result. ", 
"RuntimeAttributes" : "RuntimeAttributes is an option for Compile that specifies attributes for the compiled function it creates.", 
"RuntimeOptions" : "RuntimeOptions is an option for Compile that specifies runtime settings for the compiled function it creates.", 
"RussellRaoDissimilarity" : "RussellRaoDissimilarity[u,v] gives the Russell–Rao dissimilarity between Boolean vectors u and v.", 
"SameQ" : "lhs===rhs yields True if the expression lhs is identical to rhs, and yields False otherwise. ", 
"SameTest" : "SameTest is an option whose setting gives a pairwise comparison function to determine whether expressions should be considered the same.", 
"SampleDepth" : "SampleDepth is an option for sound primitives that specifies how many bits should be used to encode sound amplitude levels. ", 
"SampledSoundFunction" : "SampledSoundFunction[f,n,r] is a sound primitive that represents a sound whose amplitude sampled r times a second is generated by applying the function f to successive integers from 1 to n. ", 
"SampledSoundList" : "SampledSoundList[{a₁,a₂,…},r] is a sound primitive that represents a sound whose amplitude has levels aᵢ sampled r times a second. ", 
"SampleRate" : "SampleRate is an option for sound primitives that specifies the number of samples per second to generate for sounds. ", 
"SamplingPeriod" : "SamplingPeriod is an option that specifies the sampling period of control system models.", 
"SatisfiabilityCount" : "SatisfiabilityCount[bf] counts the number of possible combinations of variable values that yield True when supplied as arguments to the Boolean function bf.\nSatisfiabilityCount[expr,{a₁,a₂,…}] counts the number of possible combinations of the aᵢ that make the Boolean expression expr be true.", 
"SatisfiabilityInstances" : "SatisfiabilityInstances[bf] attempts to find a choice of variables that makes the Boolean function bf yield True.\nSatisfiabilityInstances[expr,{a₁,a₂,…}] attempts to find a choice of the aᵢ that makes the Boolean expression expr be True.\nSatisfiabilityInstances[b,…,m] attempts to find m choices of variables that yield True.", 
"SatisfiableQ" : "SatisfiableQ[bf] gives True if a combination of values of variables exists that makes the Boolean function bf yield True.\nSatisfiableQ[expr,{a₁,a₂,…}] gives True if a combination of values of the aᵢ exists that makes the Boolean expression expr yield True.", 
"Save" : "Save[\"filename\",symbol] appends definitions associated with the specified symbol to a file. \nSave[\"filename\",\"form\"] appends definitions associated with all symbols whose names match the string pattern \"form\". \nSave[\"filename\",\"context`\"] appends definitions associated with all symbols in the specified context. \nSave[\"filename\",{object₁,object₂,…}] appends definitions associated with several objects. ", 
"Saveable" : "Saveable is an option for notebooks that specifies whether a notebook can be saved.", 
"SaveAutoDelete" : "SaveAutoDelete is an option for ErrorBox objects that specifies whether the ErrorBox is automatically deleted when the notebook containing it is saved.", 
"SaveDefinitions" : "SaveDefinitions is an option to Manipulate and related functions that specifies whether current definitions relevant for the evaluation of the expression being manipulated should automatically be saved.", 
"SawtoothWave" : "SawtoothWave[x] gives a sawtooth wave that varies from 0 to 1 with unit period.\nSawtoothWave[{min,max},x] gives a sawtooth wave that varies from min to max with unit period.", 
"Scale" : "Scale[g,s] represents graphics primitives g scaled by a factor s. \nScale[g,s,{x,y,…}] scales with the point {x,y,…} kept fixed. \nScale[g,{sₓ,Subscript[s,y],…},…] scales by different factors along different axes. ", 
"Scaled" : "Scaled[{x,y,…}] gives the position of a graphical object in terms of coordinates scaled to run from 0 to 1 across the whole plot range in each direction. \nScaled[{dx,dy,…},{x₀,y₀,…}] gives a position obtained by starting at ordinary coordinates {x₀,y₀,…}, then moving by a scaled offset {dx,dy,…}. ", 
"ScalingFunctions" : "ScalingFunctions is an option for BarChart, Histogram, and other charting functions that specifies what scaling functions should be used. ", 
"ScalingMatrix" : "ScalingMatrix[{sₓ,Subscript[s,y],…}] gives the matrix corresponding to scaling by a factor sᵢ along each coordinate axis.\nScalingMatrix[s,v] gives the matrix corresponding to scaling by a factor s along the direction of the vector v.", 
"ScalingTransform" : "ScalingTransform[{sₓ,Subscript[s,y],…}] gives a TransformationFunction that represents scaling by a factor sᵢ along each coordinate axis from the origin.\nScalingTransform[{sₓ,Subscript[s,y],…},p] gives scaling centered at the point p.\nScalingTransform[s,v] gives scaling by a factor s along the direction of the vector v.\nScalingTransform[s,v,p] gives scaling along the direction of v, centered at the point p.", 
"Scan" : "Scan[f,expr] evaluates f applied to each element of expr in turn. \nScan[f,expr,levelspec] applies f to parts of expr specified by levelspec. ", 
"ScheduledTaskObject" : "ScheduledTaskObject[id,expr,spec,…]  is a task object specifying future evaluation of expr according to spec.", 
"ScheduledTasks" : "ScheduledTasks[]  returns a list of ScheduledTaskObject expressions that represent current tasks.", 
"SchurDecomposition" : "SchurDecomposition[m] yields the Schur decomposition for a numerical matrix m, given as a list {q,t} where q is an orthonormal matrix and t is a block upper‐triangular matrix. \nSchurDecomposition[{m,a}] gives the generalized Schur decomposition of m with respect to a. ", 
"ScientificForm" : "ScientificForm[expr] prints with all real numbers in expr given in scientific notation. \nScientificForm[expr,n] prints with numbers given to n‐digit precision. ", 
"ScreenRectangle" : "ScreenRectangle is a global option that specifies the position of the screen by giving the coordinates of two diagonally opposite corners.", 
"ScreenStyleEnvironment" : "ScreenStyleEnvironment is an option for notebooks that specifies the style environment to be used in displaying a notebook on the screen. ", 
"ScriptBaselineShifts" : "ScriptBaselineShifts is an option for Style that specifies the minimum distance in x‐heights to shift subscripts and superscripts. ", 
"ScriptLevel" : "ScriptLevel is an option for selections that is used in determining the font size of modifiers such as subscripts and superscripts in a nested expression.", 
"ScriptMinSize" : "ScriptMinSize is an option for Style that specifies the minimum font size to use in rendering subscripts, etc. ", 
"ScriptSizeMultipliers" : "ScriptSizeMultipliers is an option for Style that specifies how much smaller to render each successive level of subscripts, etc. ", 
"Scrollbars" : "Scrollbars is an option for Pane that specifies whether scrollbars should be displayed.", 
"ScrollingOptions" : "ScrollingOptions->{opt₁->val₁,opt₂->val₂,…} is an option for notebooks that specifies settings for scrolling.", 
"ScrollPosition" : "ScrollPosition is an option for Pane that specifies the scroll position of the contents of the pane.", 
"Sec" : "Sec[z] gives the secant of z. ", 
"Sech" : "Sech[z] gives the hyperbolic secant of z. ", 
"SechDistribution" : "SechDistribution[μ,σ] represents the hyperbolic secant distribution with location parameter μ and scale parameter σ.", 
"SectorChart" : "SectorChart[{{x₁,y₁},{x₁,y₂},…}] makes a sector chart with sector angles proportional to xᵢ and radii yᵢ.\nSectorChart[{…,wᵢ[{xᵢ,yᵢ},…],…,Subscript[w,j][{Subscript[x,j],Subscript[y,j]},…],…}] makes a sector chart with sector features defined by the symbolic wrappers wₖ.\nSectorChart[{data₁,data₂,…}] makes a sector chart from multiple datasets dataᵢ.", 
"SectorChart3D" : "SectorChart3D[{{x₁,y₁,z₁},{x₂,y₂,z₂},…}] makes a 3D sector chart with sector angle proportional to xᵢ, radius yᵢ, and height zᵢ.\nSectorChart3D[{…,wᵢ[{xᵢ,yᵢ,zᵢ},…],…,Subscript[w,j][{Subscript[x,j],Subscript[y,j],Subscript[z,j]},…],…}] makes a 3D sector chart with sector features defined by the symbolic wrappers wₖ.\nSectorChart3D[{data₁,data₂,…}] makes a 3D sector chart from multiple datasets dataᵢ. ", 
"SectorOrigin" : "SectorOrigin is an option to PieChart and related functions that specifies where sectors should start.", 
"SectorSpacing" : "SectorSpacing is an option to PieChart and related functions that specifies radial spacing of sectors. ", 
"SeedRandom" : "SeedRandom[n] resets the pseudorandom generator, using n as a seed. \nSeedRandom[] resets the generator, using as a seed the time of day and certain attributes of the current Mathematica session. ", 
"Select" : "Select[list,crit] picks out all elements eᵢ of list for which crit[eᵢ] is True. \nSelect[list,crit,n] picks out the first n elements for which crit[eᵢ] is True. ", 
"Selectable" : "Selectable is an option for displayed objects, cells, and notebooks that specifies whether their contents can be selected interactively using the front end. ", 
"SelectComponents" : "SelectComponents[m,\"prop\",crit] computes a property \"prop\" for all components in a label matrix m and returns a version of m in which components that do not satisfy crit are replaced with zeros.\nSelectComponents[m,\"prop\",n] gives a label matrix for the first n components, ranked by property \"prop\".\nSelectComponents[m,\"prop\",n,p] uses an ordering function p.", 
"SelectedNotebook" : "SelectedNotebook[] gives the currently selected notebook in the front end. ", 
"SelectionAnimate" : "SelectionAnimate[notebook] animates graphics in the current selection in a notebook. \nSelectionAnimate[notebook,t] animates graphics for t seconds. ", 
"SelectionCreateCell" : "SelectionCreateCell[notebook] copies the contents of the current selection in a notebook into a new cell. \nSelectionCreateCell[notebook,sel] sets the current selection after the copy to be as specified by sel. ", 
"SelectionEvaluate" : "SelectionEvaluate[notebook] replaces the current selection in a notebook with the result obtained by evaluating the contents of the selection in the kernel. \nSelectionEvaluate[notebook,sel] sets the current selection after the evaluation to be as specified by sel. ", 
"SelectionEvaluateCreateCell" : "SelectionEvaluateCreateCell[notebook] takes the current selection in a notebook and creates a new cell containing the result obtained by evaluating the contents of the selection using the kernel. \nSelectionEvaluateCreateCell[notebook,sel] sets the current selection after the evaluation to be as specified by sel. ", 
"SelectionMove" : "SelectionMove[obj,dir,unit] moves the current selection in an open notebook in the front end in the direction dir by the specified unit. \nSelectionMove[obj,dir,unit,n] repeats the move n times. ", 
"SelfLoopStyle" : "SelfLoopStyle is an option for GraphPlot and related functions that specifies how to draw self-loops that connect a vertex to itself.", 
"SemialgebraicComponentInstances" : "SemialgebraicComponentInstances[ineqs,{x₁,x₂,…}] gives at least one sample point in each connected component of the semialgebraic set defined by the inequalities ineqs in the variables x₁, x₂, ….", 
"SendMail" : "SendMail[rules] sends an email message built up from the elements specified in rules.", 
"Sequence" : "Sequence[expr₁,expr₂,…] represents a sequence of arguments to be spliced automatically into any function. ", 
"SequenceAlignment" : "SequenceAlignment[s₁,s₂] finds an optimal alignment of sequences of elements in the strings or lists s₁ and s₂, and yields a list of successive matching and differing sequences.", 
"SequenceForm" : "SequenceForm[expr₁,expr₂,…] prints as the textual concatenation of the printed forms of the exprᵢ. ", 
"SequenceHold" : "SequenceHold is an attribute that specifies that Sequence objects appearing in the arguments of a function should not automatically be flattened out. ", 
"SequenceLimit" : "SequenceLimit[list] returns the approximation given by Wynn's epsilon algorithm to the limit of a sequence whose first few terms are given by list. Warning: Wynn's epsilon algorithm can give finite results for divergent sequences.", 
"Series" : "Series[f,{x,x₀,n}] generates a power series expansion for f about the point x=x₀ to order (x-x₀)ⁿ. \nSeries[f,{x,x₀,nₓ},{y,y₀,Subscript[n,y]},…] successively finds series expansions with respect to x, then y, etc. ", 
"SeriesCoefficient" : "SeriesCoefficient[series,n] finds the coefficient of the nᵗʰ-order term in a power series in the form generated by Series. \nSeriesCoefficient[f,{x,x₀,n}] finds the coefficient of (x-x₀)ⁿ in the expansion of f about the point x=x₀.\nSeriesCoefficient[f,{x,x₀,nₓ},{y,y₀,Subscript[n,y]},…] finds a coefficient in a multivariate series. ", 
"SeriesData" : "SeriesData[x,x₀,{a₀,a₁,…},nₘᵢₙ,nₘₐₓ,den] represents a power series in the variable x about the point x₀. The aᵢ are the coefficients in the power series. The powers of (x-x₀) that appear are nₘᵢₙ\/den, (nₘᵢₙ+1)\/den, … , nₘₐₓ\/den. ", 
"SessionTime" : "SessionTime[] gives the total number of seconds of real time that have elapsed since the beginning of your Mathematica session. ", 
"Set" : "lhs=rhs evaluates rhs and assigns the result to be the value of lhs. From then on, lhs is replaced by rhs whenever it appears. \n{l₁,l₂,…}={r₁,r₂,…} evaluates the rᵢ, and assigns the results to be the values of the corresponding lᵢ. ", 
"SetAccuracy" : "SetAccuracy[expr,a] yields a version of expr in which all numbers have been set to have accuracy a. ", 
"SetAlphaChannel" : "SetAlphaChannel[image] adds a fully opaque alpha channel to image.\nSetAlphaChannel[image,a] sets the opacity of all pixels to a.\nSetAlphaChannel[image,aimage] sets the alpha channel of image to aimage.", 
"SetAttributes" : "SetAttributes[s,attr] adds attr to the list of attributes of the symbol s. ", 
"SetDelayed" : "lhs:=rhs assigns rhs to be the delayed value of lhs. rhs is maintained in an unevaluated form. When lhs appears, it is replaced by rhs, evaluated afresh each time. ", 
"SetDirectory" : "SetDirectory[\"dir\"] sets the current working directory to dir. \nSetDirectory[] sets the current working directory to your \"home\" directory.", 
"SetFileDate" : "SetFileDate[\"file\"] sets the modification and access dates for a file to be the current date. ", 
"SetInternetProxy" : "SetInternetProxy[\"host\", port] sets proxy information in your Java session for accessing the Internet. If you use a proxy for accessing the Internet, you may need to call this function to enable Java code to use the Internet. Consult your network administrator for proxy settings. A typical example would look like SetInternetProxy[\"proxy.mycompany.com\", 8080].", 
"SetInternetProxy" : "SetInternetProxy[\"host\", port] sets proxy information in your Java session for accessing the Internet. If you use a proxy for accessing the Internet, you may need to call this function to enable Java code to use the Internet. Consult your network administrator for proxy settings. A typical example would look like SetInternetProxy[\"proxy.mycompany.com\", 8080].", 
"SetOptions" : "SetOptions[s,name₁->value₁,name₂->value₂,…] sets the specified default options for a symbol s. \nSetOptions[stream,…] or SetOptions[\"name\",…] sets options associated with a particular stream. \nSetOptions[object,…] sets options associated with an external object such as a NotebookObject. ", 
"SetPrecision" : "SetPrecision[expr,p] yields a version of expr in which all numbers have been set to have precision p. ", 
"SetProperty" : "SetProperty[{obj,item},name->value] sets the property name->value for item in obj.", 
"SetSelectedNotebook" : "SetSelectedNotebook[notebook] makes the specified notebook be the currently selected one in the front end. ", 
"SetSharedFunction" : "SetSharedFunction[f₁,f₂,…] declares the symbols fᵢ as shared functions whose downvalues are synchronized among all parallel kernels.", 
"SetSharedVariable" : "SetSharedVariable[s₁,s₂,…] declares the symbols sᵢ as shared variables whose values are synchronized among all parallel kernels.", 
"SetStreamPosition" : "SetStreamPosition[stream,n] sets the current point in an open stream. ", 
"SetSystemOptions" : "SetSystemOptions[\"name\"->value] resets the value for the internal system option with the specified name.", 
"Setter" : "Setter[x,val] represents a setter button whose setting x is set to val when the button is clicked. The button is labeled with val, and appears pressed if the value of x is val, and unpressed otherwise.\nSetter[Dynamic[x],val] takes the setting to be the dynamically updated current value of x, with the value of x being reset if the button is clicked.\nSetter[x,val,label] labels the setter button with label.\nSetter[x,{val₁,val₂,…},label] represents a setter button that sets x to valₙ if multi-clicked n times. ", 
"SetterBar" : "SetterBar[x,{val₁,val₂,…}] represents a setter bar with setting x and with setter buttons for values valᵢ.\nSetterBar[Dynamic[x],{val₁,val₂,…}] takes the setting to be the dynamically updated current value of x, with the value of x being reset every time a setter button is clicked.\nSetterBar[x,{val₁->lbl₁,val₂->lbl₂,…}] represents a setter bar in which the setter button giving value valᵢ has label lblᵢ.", 
"Setting" : "Setting[expr] replaces control objects such as sliders or popup menus in expr by their settings. ", 
"Shading" : "Shading is an option for SurfaceGraphics that specifies whether the surfaces should be shaded. ", 
"Shallow" : "Shallow[expr] prints as a shallow form of expr. \nShallow[expr,depth] prints with all parts of expr below the specified depth given in skeleton form. \nShallow[expr,{depth,length}] also gives parts whose lengths are above the specified limit in skeleton form. \nShallow[expr,{depth,length},form] uses skeleton form for any parts that match the pattern form. ", 
"ShannonWavelet" : "ShannonWavelet[] represents the Shannon wavelet evaluated on the equally spaced interval {-10,10}. \nShannonWavelet[lim] represents the Shannon wavelet evaluated on the equally spaced interval {-lim,lim}. ", 
"ShapiroWilkTest" : "ShapiroWilkTest[data] tests whether data is normally distributed using the Shapiro–Wilk test.\nShapiroWilkTest[data,\"property\"] returns the value of \"property\".", 
"Share" : "Share[expr] changes the way expr is stored internally, to try and minimize the amount of memory used. \nShare[] tries to minimize the memory used to store all expressions. ", 
"Sharpen" : "Sharpen[image] gives a sharpened version of image.\nSharpen[image,r] gives a version of image sharpened over pixel radius r.", 
"ShearingMatrix" : "ShearingMatrix[θ,v,n] gives the matrix corresponding to shearing by θ radians along the direction of the vector v, and normal to the vector n. ", 
"ShearingTransform" : "ShearingTransform[θ,v,n] gives a TransformationFunction that represents a shear by θ radians along the direction of the vector v, normal to the vector n, and keeping the origin fixed.\nShearingTransform[θ,v,n,p] gives a shear that keeps the point p fixed, rather than the origin.", 
"Short" : "Short[expr] prints as a short form of expr, less than about one line long. \nShort[expr,n] prints as a form of expr about n lines long. ", 
"ShortDownArrow" : "ShortDownArrow[x,y,…] displays as xy….", 
"Shortest" : "Shortest[p] is a pattern object that matches the shortest sequence consistent with the pattern p. ", 
"ShortestMatch" : "ShortestMatch[p] is a string pattern object matching the shortest sequence of characters consistent with the string pattern p.", 
"ShortestPathFunction" : "ShortestPathFunction[type,data] represents a function that gives the shortest path from a source vertex s to target vertex t in a graph.", 
"ShortLeftArrow" : "ShortLeftArrow[x,y,…] displays as xy….", 
"ShortRightArrow" : "ShortRightArrow[x,y,…] displays as xy….", 
"ShortUpArrow" : "ShortUpArrow[x,y,…] displays as xy….", 
"Show" : "Show[graphics,options] shows graphics with the specified options added. \nShow[g₁,g₂,…] shows several graphics combined. ", 
"ShowAutoStyles" : "ShowAutoStyles is an option for Cell that specifies whether styles that are specified to be automatically used for various syntactic and other constructs should be shown. ", 
"ShowCellBracket" : "ShowCellBracket is an option for Cell that specifies whether to display the bracket that indicates the extent of the cell. ", 
"ShowCellLabel" : "ShowCellLabel is an option for Cell that specifies whether to display the label for a cell. ", 
"ShowCellTags" : "ShowCellTags is an option for Cell that specifies whether to display tags for a cell. ", 
"ShowClosedCellArea" : "ShowClosedCellArea is an option for cells that specifies whether a rectangular bar is displayed next to a closed cell group to indicate the number of cells in the group.", 
"ShowContents" : "ShowContents is an option for selections that specifies whether an object represented by a StyleBox should be displayed on the screen or replaced by blank space.", 
"ShowCursorTracker" : "ShowCursorTracker is an option for Cell that specifies whether an elliptical spot should appear momentarily to guide the eye if the cursor position jumps. ", 
"ShowGroupOpenCloseIcon" : "ShowGroupOpenCloseIcon is an option for cells that specifies whether a triangular icon is displayed next to the leading cell in a cell group to indicate whether the cell group is open or closed.", 
"ShowGroupOpener" : "ShowGroupOpener is an option for cells that specifies whether an opener icon is displayed next to the leading cell in a cell group to indicate whether the cell group is open or closed.", 
"ShowPageBreaks" : "ShowPageBreaks is a notebook option that specifies whether to indicate in the on‐screen display of a notebook where page breaks would occur if the notebook were printed. ", 
"ShowSelection" : "ShowSelection is an option to Notebook, Cell, and Style that specifies whether to show the current selection highlighted. ", 
"ShowShortBoxForm" : "ShowShortBoxForm is an option for cells that specifies whether box expressions, which are used to represent two-dimensional forms in a cell, are displayed in a more compact notation when the expression for that cell is viewed.", 
"ShowSpecialCharacters" : "ShowSpecialCharacters is an option for Style and Cell that specifies whether to replace \\[Name], \\:nnnn, etc. by explicit special characters. ", 
"ShowStringCharacters" : "ShowStringCharacters is an option for Cell that specifies whether to display \" when a string is entered. ", 
"ShrinkingDelay" : "ShrinkingDelay is an option for dynamic objects that specifies how long to delay before shrinking the size of the region in which the object is displayed to the actual size of the object. ", 
"SiegelTheta" : "SiegelTheta[Ω,s] gives the Siegel theta function Θ (Ω,s) with Riemann modular matrix Ω and vector s.\nSiegelTheta[{ν₁,ν₂},Ω,s] gives the Siegel theta function Θ [ν₁,ν₂]( Ω,s) with characteristics ν₁ and ν₂.", 
"SiegelTukeyTest" : "SiegelTukeyTest[{data₁,data₂}] tests whether the variances of data₁ and data₂ are equal.\nSiegelTukeyTest[dspec,Subsuperscript[ σ, 0, 2]] tests a dispersion measure against Subsuperscript[ σ, 0, 2].\nSiegelTukeyTest[dspec,Subsuperscript[ σ, 0, 2],\"property\"] returns the value of \"property\".", 
"Sign" : "Sign[x] gives -1, 0, or 1 depending on whether x is negative, zero, or positive. ", 
"Signature" : "Signature[list] gives the signature of the permutation needed to place the elements of list in canonical order. ", 
"SignedRankTest" : "SignedRankTest[data] tests whether the median of data is zero. \nSignedRankTest[{data₁,data₂}] tests whether the median of data₁-data₂ is zero.\nSignedRankTest[dspec,μ₀] tests a location measure against μ₀.\nSignedRankTest[dspec,μ₀,\"property\"] returns the value of \"property\".", 
"SignificanceLevel" : "SignificanceLevel is an option to VarianceTest and similar functions that controls cutoffs for diagnostic tests as well as test conclusions. ", 
"SignPadding" : "SignPadding is an option for NumberForm and related functions that specifies whether padding should be inserted after signs. ", 
"SignTest" : "SignTest[data] tests whether the median of data is zero. \nSignTest[{data₁,data₂}] tests whether the median of data₁– data₂ is zero.\nSignTest[dspec,μ₀] tests a location measure against μ₀.\nSignTest[dspec,μ₀,\"property\"] returns the value of \"property\".", 
"SimilarityRules" : "SimilarityRules is an option for functions such as SequenceAlignment that gives a list of rules for similarity scores to assume between pairs of elements.", 
"SimpleGraph" : "SimpleGraph[g] gives the underlying simple graph from the graph g.", 
"SimpleGraphQ" : "SimpleGraphQ[g] yields True if the graph g is a simple graph and False otherwise.", 
"Simplify" : "Simplify[expr] performs a sequence of algebraic and other transformations on expr, and returns the simplest form it finds. \nSimplify[expr,assum] does simplification using assumptions. ", 
"Sin" : "Sin[z] gives the sine of z. ", 
"Sinc" : "Sinc[z] gives sinc(z). ", 
"SinghMaddalaDistribution" : "SinghMaddalaDistribution[q,a,b] represents the Singh–Maddala distribution with shape parameters q and a and scale parameter b.", 
"SingleLetterItalics" : "SingleLetterItalics is an option for Cell that specifies whether single‐letter names should be displayed in italics. ", 
"SingularValueDecomposition" : "SingularValueDecomposition[m] gives the singular value decomposition for a numerical matrix m as a list of matrices {u,w,v}, where w is a diagonal matrix and m can be written as u.w.Conjugate[Transpose[v]]. \nSingularValueDecomposition[{m,a}] gives the generalized singular value decomposition of m with respect to a. \nSingularValueDecomposition[m,k] gives the singular value decomposition associated with the k largest singular values of m. \nSingularValueDecomposition[{m,a},k] gives the generalized singular value decomposition associated with the k largest singular values.", 
"SingularValueList" : "SingularValueList[m] gives a list of the nonzero singular values of a matrix m. \nSingularValueList[{m,a}] gives the generalized singular values of m with respect to a. \nSingularValueList[m,k] gives the k largest singular values of m. \nSingularValueList[{m,a},k] gives the k largest generalized singular values of m.", 
"SingularValuePlot" : "SingularValuePlot[m] gives the singular value plot of a matrix m of rational functions in one complex variable.\nSingularValuePlot[sys] gives the singular value plot of a TransferFunctionModel or StateSpaceModel object sys.\nSingularValuePlot[…,{fₘᵢₙ,fₘₐₓ}] gives the plot for frequencies from fₘᵢₙ to fₘₐₓ.", 
"SingularValues" : "SingularValues[m] gives the singular value decomposition for a numerical matrix m. The result is a list {u,w,v}, where w is the list of singular values, and m can be written as Conjugate[Transpose[u]]. DiagonalMatrix[w].v.", 
"Sinh" : "Sinh[z] gives the hyperbolic sine of z. ", 
"SinhIntegral" : "SinhIntegral[z] gives the hyperbolic sine integral function Shi(z). ", 
"SinIntegral" : "SinIntegral[z] gives the sine integral function Si(z). ", 
"SixJSymbol" : "SixJSymbol[{j₁,j₂,j₃},{j₄,j₅,j₆}] gives the values of the Racah 6‐j symbol. ", 
"Skeleton" : "Skeleton[n] represents a sequence of n omitted elements in an expression printed with Short or Shallow. The standard print form for Skeleton is n. ", 
"SkeletonTransform" : "SkeletonTransform[image] gives the skeleton transform of image, in which the value of each skeleton pixel is its distance to the nearest background pixel.\nSkeletonTransform[image,t] treats values above t as foreground.", 
"SkellamDistribution" : "SkellamDistribution[μ₁,μ₂] represents a Skellam distribution with shape parameters μ₁ and μ₂.", 
"Skewness" : "Skewness[list] gives the coefficient of skewness for the elements in list.\nSkewness[dist] gives the coefficient of skewness for the symbolic distribution dist.", 
"SkewNormalDistribution" : "SkewNormalDistribution[μ,σ,α] represents a skew-normal distribution with shape parameter α, location parameter μ, and scale parameter σ.", 
"Skip" : "Skip[stream,type] skips one object of the specified type in an input stream. \nSkip[stream,type,n] skips n objects of the specified type. ", 
"Slider" : "Slider[x] represents a slider with setting x in the range 0 to 1. \nSlider[Dynamic[x]] takes the setting to be the dynamically updated current value of x, with the value of x being reset if the slider is moved. \nSlider[x,{xₘᵢₙ,xₘₐₓ}] represents a slider with range xₘᵢₙ to xₘₐₓ. \nSlider[x,{xₘᵢₙ,xₘₐₓ,dx}] represents a slider that jumps in steps dx. \nSlider[x,{{e₁,e₂,…}}] represents a slider in which equally spaced intervals correspond to successive settings eᵢ. \nSlider[x,{{{e₁,w₁},{e₂,w₂},…}}] uses intervals of relative widths wᵢ for the eᵢ. ", 
"Slider2D" : "Slider2D[{x,y}] represents a 2D slider with settings x and y in the range 0 to 1. \nSlider2D[Dynamic[pt]] takes the setting to be the dynamically updated current value of pt, with the value of pt being reset if the slider is moved. \nSlider2D[pt,{min,max}] represents a 2D slider with range min to max in each direction. \nSlider2D[pt,{min,max,d}] represents a 2D slider that jumps in steps d in each direction. \nSlider2D[pt,{{xₘᵢₙ,yₘᵢₙ},{xₘₐₓ,yₘₐₓ}}] specifies different ranges in x and y directions. \nSlider2D[pt,{{xₘᵢₙ,yₘᵢₙ},{xₘₐₓ,yₘₐₓ},{dx,dy}}] uses jumps dx, dy.", 
"SlideView" : "SlideView[{expr₁,expr₂,…}] represents an object in which the exprᵢ are set up to be displayed on successive slides. \nSlideView[{expr₁,expr₂,…},i] makes the iᵗʰ slide be the one currently displayed.", 
"Slot" : "# represents the first argument supplied to a pure function. \n#n represents the nᵗʰ argument. ", 
"SlotSequence" : "## represents the sequence of arguments supplied to a pure function. \n##n represents the sequence of arguments supplied to a pure function, starting with the nᵗʰ argument. ", 
"Small" : "Small is a style or option setting that specifies that objects should be small.", 
"SmallCircle" : "SmallCircle[x,y,…] displays as x∘y∘….", 
"Smaller" : "Smaller is a style or option setting that specifies that objects should be smaller.", 
"SmithWatermanSimilarity" : "SmithWatermanSimilarity[u,v] gives a number representing the Smith–Waterman similarity between strings or vectors u and v.", 
"SmoothDensityHistogram" : "SmoothDensityHistogram[{{x₁,y₁},{x₂,y₂},…}] plots a smooth kernel histogram of the values {xᵢ,yᵢ}.\nSmoothDensityHistogram[{{x₁,y₁},{x₂,y₂},…},espec] plots a smooth kernel histogram with estimator specification espec.\nSmoothDensityHistogram[{{x₁,y₁},{x₂,y₂},…},espec,dfun] plots the distribution function dfun.", 
"SmoothHistogram" : "SmoothHistogram[{x₁,x₂,…}] plots a smooth kernel histogram of the values xᵢ.\nSmoothHistogram[{x₁,x₂,…},espec] plots a smooth kernel histogram with estimator specification espec.\nSmoothHistogram[{x₁,x₂,…},espec,dfun] plots the distribution function dfun. \nSmoothHistogram[{data₁,data₂,…},…] plots smooth kernel histograms for multiple datasets dataᵢ.", 
"SmoothHistogram3D" : "SmoothHistogram3D[{{x₁,y₁},{x₂,y₂},…}] plots a 3D smooth kernel histogram of the values {xᵢ,yᵢ}.\nSmoothHistogram3D[{{x₁,y₁},{x₂,y₂},…},espec] plots a 3D smooth kernel histogram with estimator specification espec.\nSmoothHistogram3D[{{x₁,y₁},{x₂,y₂},…},espec,dfun] plots the distribution function dfun.\nSmoothHistogram3D[{data₁,data₂,…},…] plots smooth kernel histograms for multiple datasets dataᵢ.", 
"SmoothKernelDistribution" : "SmoothKernelDistribution[{x₁,x₂,…}] represents a smooth kernel distribution based on the data values xᵢ.\nSmoothKernelDistribution[{{x₁,y₁,…},{x₂,y₂,…},…}] represents a multivariate smooth kernel distribution based on the data values {xᵢ,yᵢ,…}.\nSmoothKernelDistribution[…,bw] represents a smooth kernel distribution with bandwidth bw.\nSmoothKernelDistribution[…,bw,ker] represents a smooth kernel distribution with bandwidth bw and smoothing kernel ker.", 
"Socket" : "Socket is a possible value returned by FileType and related functions.", 
"SokalSneathDissimilarity" : "SokalSneathDissimilarity[u,v] gives the Sokal–Sneath dissimilarity between Boolean vectors u and v.", 
"Solve" : "Solve[expr,vars] attempts to solve the system expr of equations or inequalities for the variables vars. \nSolve[expr,vars,dom] solves over the domain dom. Common choices of dom are Reals, Integers, and Complexes.", 
"SolveAlways" : "SolveAlways[eqns,vars] gives the values of parameters that make the equations eqns valid for all values of the variables vars. ", 
"SolveDelayed" : "SolveDelayed is an option to NDSolve. SolveDelayed -> False causes the derivatives to be solved for symbolically at the beginning. SolveDelayed -> True causes the ODEs to be evaluated numerically and the derivatives solved for at each step.", 
"Sort" : "Sort[list] sorts the elements of list into canonical order. \nSort[list,p] sorts using the ordering function p. ", 
"SortBy" : "SortBy[list,f] sorts the elements of list in the order defined by applying f to each of them. ", 
"Sound" : "Sound[primitives] represents a sound. \nSound[primitives,t] specifies that the sound should have duration t.\nSound[primitives,{tₘᵢₙ,tₘₐₓ}] specifies that the sound should extend from time tₘᵢₙ to time tₘₐₓ.", 
"SoundNote" : "SoundNote[pitch] represents a music-like sound note with the specified pitch.\nSoundNote[pitch,t] takes the note to have duration t.\nSoundNote[pitch,{tₘᵢₙ,tₘₐₓ}] takes the note to occupy the time interval tₘᵢₙ to tₘₐₓ.\nSoundNote[pitch,tspec,\"style\"] takes the note to be in the specified style.\nSoundNote[pitch,tspec,\"style\",opts] uses the specified rendering options for the note.", 
"SoundVolume" : "SoundVolume is an option to Sound and SoundNote and related functions that specifies the relative volume of the sound produced.", 
"Sow" : "Sow[e] specifies that e should be collected by the nearest enclosing Reap. \nSow[e,tag] specifies that e should be collected by the nearest enclosing Reap whose pattern matches tag. \nSow[e,{tag₁,tag₂,…}] specifies that e should be collected once for each pattern that matches a tagᵢ. ", 
"SpaceForm" : "SpaceForm[n] prints as n spaces.", 
"Spacer" : "Spacer[w] displays as a spacer w printer's points wide.\nSpacer[{w,h}] displays as a spacer w points wide and a total of h points high.\nSpacer[{w,h,dh}] makes the spacer extend dh points below the baseline. ", 
"Spacings" : "Spacings is an option to Grid and related constructs that specifies the spacings to leave between successive objects.", 
"Span" : "i;;j represents a span of elements i through j.\ni;; represents a span from i to the end.\n;;j represents a span from the beginning to j.\n;; represents a span that includes all elements.\ni;;j;;k represents a span from i through j in steps of k.\ni;;;;k represents a span from i to the end in steps of k.\n;;j;;k represents a span from the beginning to j in steps of k.\n;;;;k represents a span from the beginning to the end in steps of k. ", 
"SpanAdjustments" : "SpanAdjustments is an option for selections that specifies the height and width of spanning characters.", 
"SpanCharacterRounding" : "SpanCharacterRounding is an option for selections that specifies the method used for rounding a spanning character when its size is to be adjusted.", 
"SpanFromAbove" : "SpanFromAbove is a symbol that can appear at a particular position in a Grid or related construct to indicate that the corresponding position is occupied by a spanning element that appears above it.", 
"SpanFromBoth" : "SpanFromBoth is a symbol that can appear at a particular position in a Grid or related construct to indicate that the corresponding position is occupied by a spanning element that appears above and to its left.", 
"SpanFromLeft" : "SpanFromLeft is a symbol that can appear at a particular position in a Grid or related construct to indicate that the corresponding position is occupied by a spanning element that appears to its left.", 
"SpanLineThickness" : "SpanLineThickness is an option for selections that specifies the thickness in printer's points of line-spanning characters such as ∖[VerticalLine] and ∖[HorizontalLine].", 
"SpanMaxSize" : "SpanMaxSize is an option for selections that specifies the maximum size of spanning characters such as parentheses and brackets.", 
"SpanMinSize" : "SpanMinSize is an option for selections that specifies the minimum size of spanning characters such as parentheses and brackets.", 
"SpanSymmetric" : "SpanSymmetric is an option for selections that specifies whether vertically expandable characters are symmetric about the axis of the selection.", 
"SparseArray" : "SparseArray[{pos₁->val₁,pos₂->val₂,…}] yields a sparse array in which values valᵢ appear at positions posᵢ. \nSparseArray[{pos₁,pos₂,…}->{val₁,val₂,…}] yields the same sparse array. \nSparseArray[list] yields a sparse array version of list. \nSparseArray[data,{d₁,d₂,…}] yields a sparse array representing a d₁×d₂×… array. \nSparseArray[data,dims,val] yields a sparse array in which unspecified elements are taken to have value val. ", 
"Speak" : "Speak[expr] speaks a spoken representation of the expression expr.", 
"Specularity" : "Specularity[s] is a graphics directive which specifies that surfaces of 3D graphics objects which follow are to be taken to have specularity s. \nSpecularity[s,n] uses specular exponent n. ", 
"SpellingCorrection" : "SpellingCorrection is an option for StringMatchQ, Names, and related functions that specifies whether strings should be considered to match even when a small fraction of the characters in them are different. ", 
"SpellingDictionaries" : "SpellingDictionaries->{opt₁->val₁,opt₂->val₂,…} is a global option that specifies settings for spell checking.", 
"SpellingDictionariesPath" : "SpellingDictionariesPath is a global option that specifies which directories are searched for spelling dictionaries when the Edit ▶ Check Spelling menu item is used.", 
"SpellingOptions" : "SpellingOptions->{opt₁->val₁,opt₂->val₂,…} is an option for notebooks that specifies settings for spell checking.", 
"Sphere" : "Sphere[{x,y,z},r] represents a sphere of radius r centered at (x,y,z). \nSphere[{x,y,z}] represents a sphere of radius 1. \nSphere[{{x₁,y₁,z₁},{x₂,y₂,z₂},…},r] represents a collection of spheres of radius r.", 
"SphericalBesselJ" : "SphericalBesselJ[n,z] gives the spherical Bessel function of the first kind jₙ(z). ", 
"SphericalBesselY" : "SphericalBesselY[n,z] gives the spherical Bessel function of the second kind yₙ(z). ", 
"SphericalHankelH1" : "SphericalHankelH1[n,z] gives the spherical Hankel function of the first kind h Subsuperscript[, n, (1)](z). ", 
"SphericalHankelH2" : "SphericalHankelH2[n,z] gives the spherical Hankel function of the second kind h Subsuperscript[, n, (2)](z). ", 
"SphericalHarmonicY" : "SphericalHarmonicY[l,m,θ,ϕ] gives the spherical harmonic Subsuperscript[ Y, l, m](θ,ϕ). ", 
"SphericalPlot3D" : "SphericalPlot3D[r,θ,ϕ] generates a 3D plot with a spherical radius r as a function of spherical coordinates θ and ϕ.\nSphericalPlot3D[r,{θ,θₘᵢₙ,θₘₐₓ},{ϕ,ϕₘᵢₙ,ϕₘₐₓ}] generates a 3D spherical plot over the specified ranges of spherical coordinates.\nSphericalPlot3D[{r₁,r₂,…},{θ,θₘᵢₙ,θₘₐₓ},{ϕ,ϕₘᵢₙ,ϕₘₐₓ}] generates a 3D spherical plot with multiple surfaces.", 
"SphericalRegion" : "SphericalRegion is an option for three-dimensional graphics functions that specifies whether the final image should be scaled so that a sphere drawn around the three‐dimensional bounding box would fit in the display area specified. ", 
"SpheroidalEigenvalue" : "SpheroidalEigenvalue[n,m,γ] gives the spheroidal eigenvalue with degree n and order m.", 
"SpheroidalJoiningFactor" : "SpheroidalJoiningFactor[n,m,γ] gives the spheroidal joining factor with degree n and order m.", 
"SpheroidalPS" : "SpheroidalPS[n,m,γ,z] gives the angular spheroidal function Subscript[PS,n,m](γ,z) of the first kind.", 
"SpheroidalPSPrime" : "SpheroidalPSPrime[n,m,γ,z] gives the derivative with respect to z of the angular spheroidal function Subscript[PS,n,m](γ,z) of the first kind.", 
"SpheroidalQS" : "SpheroidalQS[n,m,γ,z] gives the angular spheroidal function Subscript[QS,n,m](γ,z) of the second kind.", 
"SpheroidalQSPrime" : "SpheroidalQSPrime[n,m,γ,z] gives the derivative with respect to z of the angular spheroidal function Subscript[QS,n,m](γ,z) of the second kind.", 
"SpheroidalRadialFactor" : "SpheroidalRadialFactor[n,m,c] gives the spheroidal radial factor with degree n and order m.", 
"SpheroidalS1" : "SpheroidalS1[n,m,γ,z] gives the radial spheroidal function S Subsuperscript[, n,m, (1)](γ,z) of the first kind.", 
"SpheroidalS1Prime" : "SpheroidalS1Prime[n,m,γ,z] gives the derivative with respect to z of the radial spheroidal function S Subsuperscript[, n,m, (1)](γ,z) of the first kind.", 
"SpheroidalS2" : "SpheroidalS2[n,m,γ,z] gives the radial spheroidal function S Subsuperscript[, n,m, (2)](γ,z) of the second kind.", 
"SpheroidalS2Prime" : "SpheroidalS2Prime[n,m,γ,z] gives the derivative with respect to z of the radial spheroidal function S Subsuperscript[, n,m, (2)](γ,z) of the second kind.", 
"Splice" : "Splice[\"file\"] splices Mathematica output into an external file. It takes text enclosed between <* and *> in the file, evaluates the text as Mathematica input, and replaces the text with the resulting Mathematica output. ", 
"SplineClosed" : "SplineClosed is an option for B-spline functions and graphics primitives that specifies whether spline curves or surfaces should be closed. ", 
"SplineDegree" : "SplineDegree is an option for spline functions and graphics primitives that specifies the degree of polynomial basis to use.", 
"SplineKnots" : "SplineKnots is an option for B-spline functions and graphics primitives that specifies the positions of knots.", 
"SplineWeights" : "SplineWeights is an option for B-spline functions and graphics primitives that specifies weights of control points.", 
"Split" : "Split[list] splits list into sublists consisting of runs of identical elements. \nSplit[list,test] treats pairs of adjacent elements as identical whenever applying the function test to them yields True. ", 
"SplitBy" : "SplitBy[list,f] splits list into sublists consisting of runs of successive elements that give the same value when f is applied.\nSplitBy[list,{f₁,f₂,…}] recursively splits list into sublists by testing elements successively with each of the fᵢ.", 
"SpokenString" : "SpokenString[expr] gives a string of text corresponding to a spoken representation of the expression expr.", 
"Sqrt" : "Sqrt[z] or √(z) gives the square root of z. ", 
"SqrtBox" : "SqrtBox[x] is a low-level box construct that represents the displayed object √(x) in notebook expressions. ", 
"Square" : "Square[x] displays as □x.", 
"SquaredEuclideanDistance" : "SquaredEuclideanDistance[u,v] gives the squared Euclidean distance between vectors u and v.", 
"SquareFreeQ" : "SquareFreeQ[expr] gives True if expr is a square-free polynomial or number, and False otherwise.\nSquareFreeQ[expr,vars] gives True if expr is square free with respect to the variables vars. ", 
"SquareIntersection" : "SquareIntersection[x,y,…] displays as x⊓y⊓….", 
"SquaresR" : "SquaresR[d,n] gives the number of ways Subscript[r,d](n) to represent the integer n as a sum of d squares.", 
"SquareSubset" : "SquareSubset[x,y,…] displays as x⊏y⊏….", 
"SquareSubsetEqual" : "SquareSubsetEqual[x,y,…] displays as x⊑y⊑….", 
"SquareSuperset" : "SquareSuperset[x,y,…] displays as x⊐y⊐….", 
"SquareSupersetEqual" : "SquareSupersetEqual[x,y,…] displays as x⊒y⊒….", 
"SquareUnion" : "SquareUnion[x,y,…] displays as x⊔y⊔….", 
"SquareWave" : "SquareWave[x] gives a square wave that alternates between +1 and -1 with unit period.\nSquareWave[{y₁,y₂},x] gives a square wave that alternates between y₁ and y₂ with unit period. ", 
"StabilityMargins" : "StabilityMargins is an option to frequency response plots such as BodePlot, NyquistPlot, and NicholsPlot that specifies the gain and phase margins to be shown on the plot.", 
"StabilityMarginsStyle" : "StabilityMarginsStyle is an option to frequency response plots such as BodePlot, NyquistPlot, and NicholsPlot that specifies the styles in which the gain and phase margins are to be drawn.", 
"StableDistribution" : "StableDistribution[type,α,β,μ,σ] represents the stable distribution Subscript[S,type] with index of stability α, skewness parameter β, location parameter μ, and scale parameter σ.", 
"Stack" : "Stack[] shows the current evaluation stack, giving a list of the tags associated with evaluations that are currently being done. \nStack[pattern] gives a list of expressions currently being evaluated which match the pattern. ", 
"StackBegin" : "StackBegin[expr] evaluates expr, starting a fresh evaluation stack. ", 
"StackComplete" : "StackComplete[expr] evaluates expr with intermediate expressions in evaluation chains included on the stack. ", 
"StackInhibit" : "StackInhibit[expr] evaluates expr without modifying the evaluation stack. ", 
"StandardDeviation" : "StandardDeviation[list] gives the sample standard deviation of the elements in list. \nStandardDeviation[dist] gives the standard deviation of the symbolic distribution dist.", 
"StandardDeviationFilter" : "StandardDeviationFilter[image,r] filters image by replacing every value by the standard deviations of the values in its range r neighborhood. \nStandardDeviationFilter[data,r] applies standard deviation filtering to an array of data.", 
"StandardForm" : "StandardForm[expr] prints as the standard Mathematica two-dimensional representation of expr. ", 
"Standardize" : "Standardize[list] shifts and rescales the elements of list to have zero mean and unit sample variance.\nStandardize[list,f₁] shifts the elements in list by f₁[list] and rescales them to have unit sample variance.\nStandardize[list,f₁,f₂] shifts by f₁[list] and scales by f₂[list].", 
"Star" : "Star[x,y,…] displays as x⋆y⋆….", 
"StarGraph" : "StarGraph[n] gives the star graph with n vertices Sₙ.", 
"StartingStepSize" : "StartingStepSize is an option to NDSolve and related functions that specifies the initial step size to use in trying to generate results.", 
"StartOfLine" : "StartOfLine represents the start of a line in a string for purposes of matching in StringExpression.", 
"StartOfString" : "StartOfString represents the start of a string for purposes of matching in StringExpression.", 
"StartScheduledTask" : "StartScheduledTask[obj] starts the task represented by obj.", 
"StartupSound" : "StartupSound is a global option that specifies whether Mathematica plays a sound when it is launched.", 
"StateFeedbackGains" : "StateFeedbackGains[ss,{p₁,p₂,…,pₙ}] gives the state feedback gain matrix for the StateSpaceModel object ss such that the poles of the closed-loop system are pᵢ.", 
"StateOutputEstimator" : "StateOutputEstimator[ss,l] constructs an estimator for the StateSpaceModel object ss with estimator gain matrix l.\nStateOutputEstimator[{ss,sensors},l] uses only sensors as the measurements of ss.\nStateOutputEstimator[{ss,sensors,dinputs},l] specifies dinputs as the deterministic inputs of ss.", 
"StateResponse" : "StateResponse[ss,u,t] gives the state response of the StateSpaceModel object ss to the input u as a function of time t.\nStateResponse[ss,u,{t,tₘᵢₙ,tₘₐₓ}] gives the response from tₘᵢₙ to tₘₐₓ.\nStateResponse[ss,du] gives the response of the discrete-time state-space model ss to the input sequence du.\nStateResponse[{ss,{x₁₀,x₂₀,…,xₙ₀}},…] gives the response with initial conditions xᵢ₀.", 
"StateSpaceModel" : "StateSpaceModel[{a,b,c,d}] represents the state-space model with state matrix a, input matrix b, output matrix c, and transmission matrix d. \nStateSpaceModel[tf] gives a state-space realization of a proper TransferFunctionModel object tf.\nStateSpaceModel[{f,h},{{x₁,x₁₀},{x₂,x₂₀},…},{{u₁,u₁₀},{u₂, u₂₀},…}] gives the state-space model obtained by Taylor linearization of Overscript[x, .]=f(x,u) ,y=h(x,u), or x(k+1)=f(x(k),u(k)),y(k)=h(x(k),u(k)), about the point (xᵢ₀, uᵢ₀).\nStateSpaceModel[eqns,{{x₁,x₁₀},{x₂,x₂₀},…},{{u₁,u₁₀},{u₂, u₂₀},…},y,τ] gives the state-space model obtained by Taylor linearization about the point (xᵢ₀, uᵢ₀) of the ordinary differential or difference equations eqns with output y and independent variable τ.", 
"StateSpaceRealization" : "StateSpaceRealization is an option to StateSpaceModel that specifies its canonical representation.", 
"StateSpaceTransform" : "StateSpaceTransform[ss,s₁] transforms the StateSpaceModel object ss using the similarity matrix s₁.\nStateSpaceTransform[ss,{s₁,s₂}] computes the transformation using the matrix pair {s₁,s₂}.", 
"StationaryWaveletPacketTransform" : "StationaryWaveletPacketTransform[data] gives the stationary wavelet packet transform (SWPT) of an array of data.\nStationaryWaveletPacketTransform[data,wave] gives the stationary wavelet packet transform using the wavelet wave.\nStationaryWaveletPacketTransform[data,wave,r] gives the stationary wavelet packet transform using r levels of refinement.\nStationaryWaveletPacketTransform[image,…] gives the stationary wavelet packet transform of an image.\nStationaryWaveletPacketTransform[sound,…] gives the stationary wavelet packet transform of sampled sound.", 
"StationaryWaveletTransform" : "StationaryWaveletTransform[data] gives the stationary wavelet transform (SWT) of an array of data.\nStationaryWaveletTransform[data,wave] gives the stationary wavelet transform using the wavelet wave.\nStationaryWaveletTransform[data,wave,r] gives the stationary wavelet transform using r levels of refinement.\nStationaryWaveletTransform[image,…] gives the stationary wavelet transform of an image.\nStationaryWaveletTransform[sound,…] gives the stationary wavelet transform of sampled sound.", 
"StatusArea" : "StatusArea[expr,string] displays string in the status area of the current notebook when the mouse pointer is in the region where expr appears. ", 
"StepMonitor" : "StepMonitor is an option for iterative numerical computation functions that gives an expression to evaluate whenever a step is taken by the numerical method used. ", 
"StieltjesGamma" : "StieltjesGamma[n] gives the Stieltjes constant γₙ. \nStieltjesGamma[n,a] gives the generalized Stieltjes constant γₙ(a).", 
"StirlingS1" : "StirlingS1[n,m] gives the Stirling number of the first kind S Subsuperscript[, n, (m)]. ", 
"StirlingS2" : "StirlingS2[n,m] gives the Stirling number of the second kind Subsuperscript[ , n, (m)]. ", 
"StopScheduledTask" : "StopScheduledTask[obj] deactivates the task obj.", 
"StreamColorFunction" : "StreamColorFunction is an option for StreamPlot and related functions that specifies a function to apply to determine colors along streamlines. ", 
"StreamColorFunctionScaling" : "StreamColorFunctionScaling is an option for graphics functions that specifies whether arguments supplied to a stream color function should be scaled to lie between 0 and 1. ", 
"StreamDensityPlot" : "StreamDensityPlot[{{vₓ,Subscript[v,y]},s},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] generates a stream plot of the vector field {vₓ,Subscript[v,y]} as a function of x and y, superimposed on a background density plot of the scalar field s. \nStreamDensityPlot[{vₓ,Subscript[v,y]},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] takes the scalar field to be the norm of the vector field. \nStreamDensityPlot[{{vₓ,Subscript[v,y]},{wₓ,Subscript[w,y]},…,s},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] generates plots of several vector fields. ", 
"StreamPlot" : "StreamPlot[{vₓ,Subscript[v,y]},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] generates a stream plot of the vector field {vₓ,Subscript[v,y]} as a function of x and y. \nStreamPlot[{{vₓ,Subscript[v,y]},{wₓ,Subscript[w,y]},…},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] generates plots of several vector fields. ", 
"StreamPoints" : "StreamPoints is an option to StreamPlot, ListStreamPlot, and related functions that determines how many streamlines to draw.", 
"StreamPosition" : "StreamPosition[stream] returns an integer that specifies the position of the current point in an open stream. ", 
"Streams" : "Streams[] gives a list of all streams that are currently open. \nStreams[\"name\"] lists only streams with the specified name. ", 
"StreamScale" : "StreamScale is an option to StreamPlot, ListStreamPlot, and related functions that determines the length and arrowhead size of streamlines that are drawn. ", 
"StreamStyle" : "StreamStyle is an option to StreamPlot, StreamDensityPlot, and related functions that determines the style to use for drawing streamlines.", 
"String" : "String is the head of a character string \"text\". ", 
"StringByteCount" : "StringByteCount[\"string\"] gives the total number of bytes used to store the characters in a string.", 
"StringCases" : "StringCases[\"string\",patt] gives a list of the substrings in \"string\" that match the string expression patt. \nStringCases[\"string\",lhs->rhs] gives a list of the values of rhs corresponding to the substrings that match the string expression lhs. \nStringCases[\"string\",p,n] includes only the first n substrings that match. \nStringCases[\"string\",{p₁,p₂,…}] gives substrings that match any of the pᵢ. \nStringCases[{s₁,s₂,…},p] gives the list of results for each of the sᵢ. ", 
"StringCount" : "StringCount[\"string\",\"sub\"] gives a count of the number of times \"sub\" appears as a substring of \"string\". \nStringCount[\"string\",patt] gives the number of substrings in \"string\" that match the general string expression patt. \nStringCount[\"string\",{patt₁,patt₂,…}] counts the number of occurrences of any of the pattᵢ. \nStringCount[{s₁,s₂,…},p] gives the list of results for each of the sᵢ. ", 
"StringDrop" : "StringDrop[\"string\",n] gives \"string\" with its first n characters dropped. \nStringDrop[\"string\",-n] gives \"string\" with its last n characters dropped. \nStringDrop[\"string\",{n}] gives \"string\" with its nᵗʰ character dropped. \nStringDrop[\"string\",{m,n}] gives \"string\" with characters m through n dropped. \nStringDrop[{s₁,s₂,…},spec] gives the list of results for each of the sᵢ. ", 
"StringExpression" : "s₁~~s₂~~… or StringExpression[s₁,s₂,…] represents a sequence of strings and symbolic string objects sᵢ. ", 
"StringForm" : "StringForm[\"controlstring\",expr₁,…] prints as the text of the controlstring, with the printed forms of the exprᵢ embedded. ", 
"StringFormat" : "StringFormat[\"string\"] attempts to determine what ImportString format could be used to import the string \"string\".", 
"StringFreeQ" : "StringFreeQ[\"string\",patt] yields True if no substring in \"string\" matches the string expression patt, and yields False otherwise. \nStringFreeQ[\"string\",{patt₁,patt₂,…}] yields True if no substring matches any of the pattᵢ. \nStringFreeQ[{s₁,s₂,…},p] gives the list of results for each of the sᵢ. ", 
"StringInsert" : "StringInsert[\"string\",\"snew\",n] yields a string with \"snew\" inserted starting at position n in \"string\". \nStringInsert[\"string\",\"snew\",-n] inserts at position n from the end of \"string\". \nStringInsert[\"string\",\"snew\",{n₁,n₂,…}] inserts a copy of \"snew\" at each of the positions nᵢ. \nStringInsert[{s₁,s₂,…},\"snew\",n] gives the list of results for each of the sᵢ. ", 
"StringJoin" : "\"s \"\n  1<>\"s \"\n  2<>…, StringJoin[\"s \"\n  1,\"s \"\n  2,…], or StringJoin[{\"s \"\n  1,\"s \"\n  2,…}] yields a string consisting of a concatenation of the sᵢ. ", 
"StringLength" : "StringLength[\"string\"] gives the number of characters in a string. ", 
"StringMatchQ" : "StringMatchQ[\"string\",patt] tests whether \"string\" matches the string pattern patt. \nStringMatchQ[\"string\",RegularExpression[\"regex\"]] tests whether \"string\" matches the specified regular expression. \nStringMatchQ[{s₁,s₂,…},p] gives the list of results for each of the sᵢ. ", 
"StringPosition" : "StringPosition[\"string\",\"sub\"] gives a list of the starting and ending character positions at which \"sub\" appears as a substring of \"string\". \nStringPosition[\"string\",patt] gives all positions at which substrings matching the general string expression patt appear in \"string\". \nStringPosition[\"string\",patt,n] includes only the first n occurrences of patt. \nStringPosition[\"string\",{patt₁,patt₂,…}] gives positions of all the pattᵢ. \nStringPosition[{s₁,s₂,…},p] gives the list of results for each of the sᵢ. ", 
"StringQ" : "StringQ[expr] gives True if expr is a string, and False otherwise.", 
"StringReplace" : "StringReplace[\"string\",s->sp] or StringReplace[\"string\",{s₁->sp₁,s₂->sp₂,…}] replaces the string expressions sᵢ by spᵢ whenever they appear as substrings of \"string\". \nStringReplace[\"string\",srules,n] does only the first n replacements. \nStringReplace[{s₁,s₂,…},srules] gives the list of results for each of the sᵢ. ", 
"StringReplaceList" : "StringReplaceList[\"string\",s->sp] or StringReplaceList[\"string\",{s₁->sp₁,s₂->sp₂,…}] gives a list of the strings obtained by replacing each individual occurrence of substrings in \"string\" matching the string expressions sᵢ. \nStringReplaceList[\"string\",srules,n] gives a list of the first n results obtained. \nStringReplaceList[{s₁,s₂,…},srules] gives the list of results for each of the sᵢ. ", 
"StringReplacePart" : "StringReplacePart[\"string\",\"snew\",{m,n}] replaces the characters at positions m through n in \"string\" by \"snew\". \nStringReplacePart[\"string\",\"snew\",{{m₁,n₁},{m₂,n₂},…}] inserts copies of \"snew\" at several positions. \nStringReplacePart[\"string\",{\"snew \"\n     1,\"snew \"\n     2,…},{{m₁,n₁},{m₂,n₂},…}] replaces characters at positions mᵢ through nᵢ in \"string\" by \"snewᵢ\". ", 
"StringReverse" : "StringReverse[\"string\"] reverses the order of the characters in \"string\". ", 
"StringSkeleton" : "StringSkeleton[n] represents a sequence of n omitted characters in a string printed with Short. The standard print form for StringSkeleton is an ellipsis. ", 
"StringSplit" : "StringSplit[\"string\"] splits \"string\" into a list of substrings separated by whitespace. \nStringSplit[\"string\",patt] splits into substrings separated by delimiters matching the string expression patt. \nStringSplit[\"string\",{p₁,p₂,…}] splits at any of the pᵢ. \nStringSplit[\"string\",patt->val] inserts val at the position of each delimiter. \nStringSplit[\"string\",{p₁->v₁,…}] inserts vᵢ at the position of each delimiter pᵢ. \nStringSplit[\"string\",patt,n] splits into at most n substrings. \nStringSplit[{s₁,s₂,…},p] gives the list of results for each of the sᵢ. ", 
"StringTake" : "StringTake[\"string\",n] gives a string containing the first n characters in \"string\". \nStringTake[\"string\",-n] gives the last n characters in \"string\". \nStringTake[\"string\",{n}] gives the nᵗʰ character in \"string\". \nStringTake[\"string\",{m,n}] gives characters m through n in \"string\". \nStringTake[\"string\",{spec₁,spec₂,…}] gives a list of the substrings specified by the specᵢ.\nStringTake[{s₁,s₂,…},spec] gives the list of results for each of the sᵢ. ", 
"StringToStream" : "StringToStream[\"string\"] opens an input stream for reading from a string. ", 
"StringTrim" : "StringTrim[\"string\"] trims whitespace from the beginning and end of \"string\".\nStringTrim[\"string\",patt] trims substrings matching patt from the beginning and end.", 
"StripBoxes" : "StripBoxes[expr] will strip out unnecessary boxes, spaces, and options from a format expression.", 
"StripWrapperBoxes" : "StripWrapperBoxes is an option to TagBox.", 
"StructuredSelection" : "StructuredSelection is an option for Cell that specifies whether to allow only complete subexpressions in the cell to be selected interactively using the front end. ", 
"StruveH" : "StruveH[n,z] gives the Struve function Hₙ(z). ", 
"StruveL" : "StruveL[n,z] gives the modified Struve function Lₙ(z). ", 
"Stub" : "Stub is an attribute which specifies that if a symbol is ever used, Needs should automatically be called on the context of the symbol. ", 
"StudentTDistribution" : "StudentTDistribution[ν] represents a Student t distribution with ν degrees of freedom.\nStudentTDistribution[μ,σ,ν] represents a Student t distribution with location parameter μ, scale parameter σ, and ν degrees of freedom.", 
"Style" : "Style[expr,options] displays with expr formatted using the specified option settings. \nStyle[expr,\"style\"] uses the option settings for the specified style in the current notebook. \nStyle[expr,color] displays using the specified color. \nStyle[expr,Bold] displays with fonts made bold. \nStyle[expr,Italic] displays with fonts made italic. \nStyle[expr,Underlined] displays with fonts underlined. \nStyle[expr,Larger] displays with fonts made larger. \nStyle[expr,Smaller] displays with fonts made smaller. \nStyle[expr,n] displays with font size n. \nStyle[expr,Tiny], Style[expr,Small], etc. display with fonts that are tiny, small, etc. ", 
"StyleBox" : "StyleBox[boxes,options] is a low-level representation of boxes to be shown with the specified option settings. \nStyleBox[boxes,\"style\"] uses the option setting for the specified style in the current notebook. ", 
"StyleBoxAutoDelete" : "StyleBoxAutoDelete is an option for selections that specifies whether a StyleBox wrapped around them should be automatically removed when the expression is edited.", 
"StyleData" : "StyleData[\"style\"] is a low-level representation of the contents of a style definition cell.\nStyleData[\"style\",\"environment\"] represents the contents of a style definition cell in the style environment \"environment\".", 
"StyleDefinitions" : "StyleDefinitions is an option for notebooks that gives definitions for the styles that can be used in a notebook. ", 
"StyleForm" : "StyleForm[expr,options] prints using the specified style options. \nStyleForm[expr,\"style\"] prints using the specified cell style in the current notebook. ", 
"StyleMenuListing" : "StyleMenuListing is an option for cells that specifies whether a given cell style is listed in the Format ▶ Style submenu.", 
"StyleNameDialogSettings" : "StyleNameDialogSettings->{opt->val} is a global option that specifies the cell style displayed in the Custom Style dialog box.", 
"StylePrint" : "StylePrint[expr,\"style\"] creates a new cell in the current notebook with the specified style, and prints expr into it. \nStylePrint[expr] uses the default style for the current notebook. ", 
"StyleSheetPath" : "StyleSheetPath is a global option that specifies which directories Mathematica searches to find stylesheets.", 
"Subfactorial" : "Subfactorial[n] gives the number of permutations of n objects that leave no object fixed.", 
"Subgraph" : "Subgraph[g,{v₁,v₂,…}] gives the subgraph of the graph g generated by the vertices vᵢ.\nSubgraph[g,{e₁,e₂,…}] gives the subgraph generated by the edges Subscript[e,j].\nSubgraph[g,patt] gives the subgraph generated by the vertices and edges that match the pattern patt.", 
"SubMinus" : "SubMinus[expr] displays as expr₋.", 
"SubPlus" : "SubPlus[expr] displays as expr₊.", 
"Subresultants" : "Subresultants[poly₁,poly₂,var] generates a list of the principal subresultant coefficients of the polynomials poly₁ and poly₂ with respect to the variable var. ", 
"Subscript" : "Subscript[x,y] is an object that formats as Subscript[x,y]. \nSubscript[x,y₁,y₂,…] formats as Subscript[x,y₁,y₂,…].", 
"SubscriptBox" : "SubscriptBox[x,y] is the low‐level box representation for Subscript[x,y] in notebook expressions. ", 
"SubscriptBoxOptions" : "SubscriptBoxOptions->{opt₁->val₁,opt₂->val₂,…} is an option for selections that specifies settings for SubscriptBox objects.", 
"Subset" : "Subset[x,y,…] displays as x⊂y⊂….", 
"SubsetEqual" : "SubsetEqual[x,y,…] displays as x⊆y⊆….", 
"Subsets" : "Subsets[list] gives a list of all possible subsets of list. \nSubsets[list,n] gives all subsets containing at most n elements. \nSubsets[list,{n}] gives all subsets containing exactly n elements. \nSubsets[list,{nₘᵢₙ,nₘₐₓ}] gives all subsets containing between nₘᵢₙ and nₘₐₓ elements. \nSubsets[list,nspec,s] limits the result to the first s subsets. \nSubsets[list,nspec,{s}] gives if possible the sᵗʰ subset. ", 
"SubStar" : "SubStar[expr] displays as Subscript[expr,*].", 
"Subsuperscript" : "Subsuperscript[x,y,z] is an object that formats as Subsuperscript[ x, y, z]. ", 
"SubsuperscriptBox" : "SubsuperscriptBox[x,y,z] is the low‐level box representation for Subsuperscript[ x, y, z] in notebook expressions. ", 
"SubsuperscriptBoxOptions" : "SubsuperscriptBoxOptions->{opt₁->val₁,opt₂->val₂,…} is an option for selections that specifies settings for SubsuperscriptBox objects.", 
"Subtract" : "x-y is equivalent to x+(-1*y). ", 
"SubtractFrom" : "x-=dx subtracts dx from x and returns the new value of x. ", 
"SubValues" : "SubValues[f] gives a list of transformation rules corresponding to all subvalues (values for f[x,…][…], etc.) defined for the symbol f.", 
"Succeeds" : "Succeeds[x,y,…] displays as x≻y≻….", 
"SucceedsEqual" : "SucceedsEqual[x,y,…] displays as x⪰y⪰….", 
"SucceedsSlantEqual" : "SucceedsSlantEqual[x,y,…] displays as x≽y≽….", 
"SucceedsTilde" : "SucceedsTilde[x,y,…] displays as x≿y≿….", 
"SuchThat" : "SuchThat[x,y] displays as x∍y.", 
"Sum" : "Sum[f,{i,iₘₐₓ}] evaluates the sum UnderoverscriptBox[∑, {{{i}, =, 1}}, {{i}, ₘₐₓ}, LimitsPositioning -> True]f. \nSum[f,{i,iₘᵢₙ,iₘₐₓ}] starts with i=iₘᵢₙ. \nSum[f,{i,iₘᵢₙ,iₘₐₓ,di}] uses steps di. \nSum[f,{i,{i₁,i₂,…}}] uses successive values i₁, i₂, ….\nSum[f,{i,iₘᵢₙ,iₘₐₓ},{j,jₘᵢₙ,jₘₐₓ},…] evaluates the multiple sum UnderoverscriptBox[∑, {{{i}, =, {{i}, ₘᵢₙ}}}, {{i}, ₘₐₓ}, LimitsPositioning -> True]UnderoverscriptBox[∑, {{{j}, =, {{j}, ₘᵢₙ}}}, {{j}, ₘₐₓ}, LimitsPositioning -> True]…f. \nSum[f,i] gives the indefinite sum Underscript[∑, i]f.", 
"SumConvergence" : "SumConvergence[f,n] gives conditions for the sum Underoverscript[∑, n, ∞]f to be convergent.\nSumConvergence[f,{n₁,n₂,…}] gives conditions for the multiple sum Underoverscript[∑, n₁, ∞]Underoverscript[∑, n₂, ∞]… f to be convergent.", 
"SuperDagger" : "SuperDagger[expr] displays as Superscript[expr, †].", 
"SuperMinus" : "SuperMinus[expr] displays as expr⁻.", 
"SuperPlus" : "SuperPlus[expr] displays as expr⁺.", 
"Superscript" : "Superscript[x,y] is an object that formats as xʸ. ", 
"SuperscriptBox" : "SuperscriptBox[x,y] is the low‐level box representation for xʸ in notebook expressions. ", 
"SuperscriptBoxOptions" : "SuperscriptBoxOptions->{opt₁->val₁,opt₂->val₂,…} is an option for selections that specifies settings for SuperscriptBox objects.", 
"Superset" : "Superset[x,y,…] displays as x⊃y⊃….", 
"SupersetEqual" : "SupersetEqual[x,y,…] displays as x⊇y⊇….", 
"SuperStar" : "SuperStar[expr] displays as Superscript[expr, *].", 
"SurfaceColor" : "SurfaceColor[dcol] is a three-dimensional graphics directive which specifies that the surfaces which follow should act as diffuse reflectors of light with a color given by dcol. \nSurfaceColor[dcol,scol] specifies that a specular reflection component should be included, with a color given by scol. \nSurfaceColor[dcol,{scol,n}] specifies that the reflection should occur with specular exponent n. \nSurfaceColor[dcol,scol,gcol] specifies that a color gcol should be added as if there were an intrinsic glow in the polygon. ", 
"SurfaceGraphics" : "SurfaceGraphics[array] is a representation of a three-dimensional plot of a surface, with heights of each point on a grid specified by values in array. \nSurfaceGraphics[array,shades] represents a surface, whose parts are shaded according to the array shades. ", 
"SurvivalDistribution" : "SurvivalDistribution[{e₁,e₂,…}] represents a survival distribution with event times eᵢ.\nSurvivalDistribution[{w₁,w₂,…}->{e₁,e₂,…}] represents a survival distribution where events eᵢ occur with weights wᵢ.", 
"SurvivalFunction" : "SurvivalFunction[dist,x] gives the survival function for the symbolic distribution dist evaluated at x.\nSurvivalFunction[dist,{x₁,x₂,…}] gives the multivariate survival function for the symbolic distribution dist evaluated at {x₁,x₂,…}.\nSurvivalFunction[dist] gives the survival function as a pure function.", 
"SuspendPacket" : "SuspendPacket[] is a MathLink packet used for synchronization with the Mathematica kernel.", 
"SuzukiDistribution" : "SuzukiDistribution[μ,ν] represents the Suzuki distribution with shape parameters μ and ν.", 
"SuzukiGroupSuz" : "SuzukiGroupSuz[] represents the sporadic simple Suzuki group Suz.", 
"Switch" : "Switch[expr,form₁,value₁,form₂,value₂,…] evaluates expr, then compares it with each of the formᵢ in turn, evaluating and returning the valueᵢ corresponding to the first match found. ", 
"Symbol" : "Symbol[\"name\"] refers to a symbol with the specified name. ", 
"SymbolName" : "SymbolName[symbol] gives the name of the specified symbol. ", 
"SymletWavelet" : "SymletWavelet[] represents the Symlet wavelet of order 4.\nSymletWavelet[n] represents the Symlet wavelet of order n.", 
"SymmetricGroup" : "SymmetricGroup[n] represents the symmetric group of degree n.", 
"SymmetricMatrixQ" : "SymmetricMatrixQ[m] tests whether m is a symmetric matrix.", 
"SymmetricPolynomial" : "SymmetricPolynomial[k,{x₁,…,xₙ}] gives the kᵗʰ elementary symmetric polynomial in the variables x₁,…,xₙ.", 
"SymmetricReduction" : "SymmetricReduction[f,{x₁,…,xₙ}] gives a pair of polynomials {p,q} in x₁,…,xₙ such that f==p+q, where p is the symmetric part and q is the remainder.\nSymmetricReduction[f,{x₁,…,xₙ},{s₁,…,sₙ}] gives the pair {p,q} with the elementary symmetric polynomials in p replaced by s₁,…,sₙ.", 
"SynchronousInitialization" : "SynchronousInitialization is an option for Manipulate, DynamicModule, and related functions that specifies whether or not to evaluate the expression given as the setting for Initialization synchronously.", 
"SynchronousUpdating" : "SynchronousUpdating is an option for Manipulate, Dynamic, and related functions that specifies whether or not to evaluate their contents synchronously. ", 
"SyntaxForm" : "SyntaxForm is an option for InterpretationBox and TagBox objects that specifies the precedence level to use when the InterpretationBox or TagBox is considered as an operator.", 
"SyntaxInformation" : "SyntaxInformation[f] gives information used to generate syntax coloring and other advisories when f[…] is entered as input. ", 
"SyntaxLength" : "SyntaxLength[\"string\"] finds the number of characters starting at the beginning of a string that correspond to syntactically correct input for a single Mathematica expression. ", 
"SyntaxPacket" : "SyntaxPacket[integer] is a MathLink packet where integer indicates the position at which a syntax error was detected in the input line.", 
"SyntaxQ" : "SyntaxQ[\"string\"] returns True if the string corresponds to syntactically correct input for a single Mathematica expression, and returns False otherwise. ", 
"SystemDialogInput" : "SystemDialogInput[\"type\"] brings up an interactive system dialog and returns the value chosen in the dialog. \nSystemDialogInput[\"type\",init] uses init as the initial setting in the dialog.", 
"SystemHelpPath" : "SystemHelpPath is a global option that specifies which directories are searched for the help notebooks used within the help system.", 
"SystemInformation" : "SystemInformation[] gives detailed information about the Mathematica system being run. \nSystemInformation[\"comp\"] gives a list of rules with information about the component \"comp\". \nSystemInformation[\"comp\",\"prop\"] gives the value of property \"prop\" for component \"comp\".", 
"SystemOpen" : "SystemOpen[\"target\"] opens the specified file, URL, or other target with the associated program on your computer system.", 
"SystemOptions" : "SystemOptions[\"name\"] gives the current setting for the internal system option with the specified name.\nSystemOptions[] gives the current settings for all settable internal system options.", 
"SystemsModelDelete" : "SystemsModelDelete[sys,{i₁,i₂,…}] deletes the subsystem of the StateSpaceModel or TransferFunctionModel object sys associated with inputs at position iᵢ.\nSystemsModelDelete[sys,{i₁, i₂,…},{o₁, o₂,…}] also deletes the subsystem associated with outputs at positions oᵢ.\nSystemsModelDelete[ss,{i₁, i₂,…},{o₁, o₂,…},{s₁, s₂,…}] deletes the subsystem of a StateSpaceModel object ss associated with inputs, outputs, and states at iᵢ, oᵢ, and sᵢ, respectively.", 
"SystemsModelDimensions" : "SystemsModelDimensions[sys] gives the number of inputs and outputs of a StateSpaceModel or TransferFunctionModel object sys.", 
"SystemsModelExtract" : "SystemsModelExtract[sys,{i₁,i₂,…}] extracts the subsystem of the StateSpaceModel or TransferFunctionModel object sys associated with inputs at position iᵢ.\nSystemsModelExtract[sys,{i₁,i₂,…},{o₁, o₂,…}] extracts the subsystem associated with inputs and outputs at positions iᵢ and oᵢ, respectively.\nSystemsModelExtract[ss,{i₁,i₂,…},{o₁,o₂,…},{s₁,s₂,…}] extracts the subsystem of a StateSpaceModel object ss associated with inputs, outputs, and states at iᵢ, oᵢ, and sᵢ, respectively.", 
"SystemsModelFeedbackConnect" : "SystemsModelFeedbackConnect[sys] gives the closed-loop system for the StateSpaceModel or TransferFunctionModel object sys with unity negative feedback. \nSystemsModelFeedbackConnect[sys,type] creates negative or positive feedback depending on type.\nSystemsModelFeedbackConnect[sys,{y,u}] creates a negative feedback of only output y to input u.\nSystemsModelFeedbackConnect[sys,{y,u,type}] creates feedback of the specified type.\nSystemsModelFeedbackConnect[sys,{{y₁,u₁},{y₂,u₂},…}] feeds output yᵢ back to input uᵢ.\nSystemsModelFeedbackConnect[sys,{{y₁,u₁,type₁},{y₂,u₂,type₂},…}] specifies connection types.\nSystemsModelFeedbackConnect[sys₁,sys₂] closes the negative feedback loop for system sys₁ via system sys₂.\nSystemsModelFeedbackConnect[sys₁,sys₂,type] creates feedback of the specified type.\nSystemsModelFeedbackConnect[sys₁,sys₂,{y₁,y₂,…},{u₁,u₂,…}] connects only outputs yₖ of sys₁ to sequentially numbered inputs of sys₂ and feeds sequentially numbered outputs of sys₂ back to inputs uₖ of sys₁ to form a closed-loop system with negative feedback.\nSystemsModelFeedbackConnect[sys₁,sys₂,{y₁,y₂,…},{{u₁,type₁},{u₂,type₂},…}] uses typeᵢ when connecting to input uᵢ.", 
"SystemsModelLabels" : "SystemsModelLabels is an option to StateSpaceModel and TransferFunctionModel that specifies labels of the variables.", 
"SystemsModelOrder" : "SystemsModelOrder[ss] gives the order of the StateSpaceModel object ss.", 
"SystemsModelParallelConnect" : "SystemsModelParallelConnect[sys₁,sys₂] connects TransferFunctionModel or StateSpaceModel objects sys₁ and sys₂ in parallel.\nSystemsModelParallelConnect[sys₁,sys₂,{u₁,u₂},{y₁,y₂}] connects only input u₁ of sys₁ to input u₂ of sys₂, and sums only output y₁ of sys₁ and output y₂ of sys₂.\nSystemsModelParallelConnect[sys₁,sys₂,{{u₁₁,u₂₁},{u₁₂,u₂₂},…},{{y₁₁,y₂₁},{y₁₂,y₂₂},…}] connects the inputs u₁ᵢ to inputs Subscript[u,2i] and sums the outputs y₁ₖ and outputs y₂ₖ.", 
"SystemsModelSeriesConnect" : "SystemsModelSeriesConnect[sys₁,sys₂] connects TransferFunctionModel or StateSpaceModel objects sys₁ and sys₂ in series. \nSystemsModelSeriesConnect[sys₁,sys₂,{y,u}] connects only output y of sys₁ to input u of sys₂.\nSystemsModelSeriesConnect[sys₁,sys₂,{{y₁₁,u₂₁},{y₁₂,u₂₂},…}] connects outputs Subscript[y,1i] of sys₁ to inputs Subscript[u,2i] of sys₂.", 
"SystemsModelStateFeedbackConnect" : "SystemsModelStateFeedbackConnect[ss,controller] gives the closed-loop system for the StateSpaceModel object ss with state feedback controller controller.\nSystemsModelStateFeedbackConnect[ss,controller,connections] uses specifications in connections to close the loop.", 
"TabFilling" : "TabFilling is an option for character selections that specifies how a Tab character is represented on the screen.", 
"Table" : "Table[expr,{iₘₐₓ}] generates a list of iₘₐₓ copies of expr. \nTable[expr,{i,iₘₐₓ}] generates a list of the values of expr when i runs from 1 to iₘₐₓ. \nTable[expr,{i,iₘᵢₙ,iₘₐₓ}] starts with i=iₘᵢₙ. \nTable[expr,{i,iₘᵢₙ,iₘₐₓ,di}] uses steps di. \nTable[expr,{i,{i₁,i₂,…}}] uses the successive values i₁, i₂, ….\nTable[expr,{i,iₘᵢₙ,iₘₐₓ},{j,jₘᵢₙ,jₘₐₓ},…] gives a nested list. The list associated with i is outermost.", 
"TableAlignments" : "TableAlignments is an option for TableForm and MatrixForm which specifies how entries in each dimension should be aligned. ", 
"TableDepth" : "TableDepth is an option for TableForm and MatrixForm which specifies the maximum number of levels to be printed in tabular or matrix format. ", 
"TableDirections" : "TableDirections is an option for TableForm and MatrixForm which specifies whether successive dimensions should be arranged as rows or columns. ", 
"TableForm" : "TableForm[list] prints with the elements of list arranged in an array of rectangular cells. ", 
"TableHeadings" : "TableHeadings is an option for TableForm and MatrixForm which gives the labels to be printed for entries in each dimension of a table or matrix. ", 
"TableSpacing" : "TableSpacing is an option for TableForm and MatrixForm which specifies how many spaces should be left between each successive row or column. ", 
"TabSpacings" : "TabSpacings is an option for character selections that specifies the number of spaces in ems that the cursor advances when the Tab key is pressed.", 
"TabView" : "TabView[{lbl₁->expr₁, lbl₂->expr₂, …}] represents an object in which clicking the tab with label lblᵢ displays exprᵢ. \nTabView[{lbl₁->expr₁,lbl₂->expr₂,…},i] makes the iᵗʰ tab be the one currently selected.\nTabView[{{v₁,lbl₁->expr₁},{v₂,lbl₂->expr₂},…},v] associates values vᵢ with successive tabs, and makes the tab with value v be the one currently selected. \nTabView[{expr₁,expr₂,…}] takes the tab labels to be successive integers.", 
"TagBox" : "TagBox[boxes,tag] is a low-level box construct that displays as boxes but maintains tag to guide the interpretation of boxes on input. ", 
"TaggingRules" : "TaggingRules is an option for selections that specifies a list of strings to be associated with a selection.", 
"TagSet" : "f\/:lhs=rhs assigns rhs to be the value of lhs, and associates the assignment with the symbol f. ", 
"TagSetDelayed" : "f\/:lhs:=rhs assigns rhs to be the delayed value of lhs, and associates the assignment with the symbol f. ", 
"TagUnset" : "f\/:lhs=. removes any rules defined for lhs, associated with the symbol f. ", 
"Take" : "Take[list,n] gives the first n elements of list. \nTake[list,-n] gives the last n elements of list. \nTake[list,{m,n}] gives elements m through n of list. \nTake[list,seq₁,seq₂,…] gives a nested list in which elements specified by seqᵢ are taken at level i in list. ", 
"TakeWhile" : "TakeWhile[list,crit] gives elements eᵢ from the beginning of list, continuing so long as crit[eᵢ] is True.", 
"Tally" : "Tally[list] tallies the elements in list, listing all distinct elements together with their multiplicities.\nTally[list,test] uses test to determine whether pairs of elements should be considered equivalent, and gives a list of the first representatives of each equivalence class, together with their multiplicities.", 
"Tan" : "Tan[z] gives the tangent of z.", 
"Tanh" : "Tanh[z] gives the hyperbolic tangent of z.", 
"TargetFunctions" : "TargetFunctions is an option for functions such as ComplexExpand that specifies what functions to attempt to generate in the output.", 
"TautologyQ" : "TautologyQ[bf] gives True if all combinations of values of variables make the Boolean function bf yield True.\nTautologyQ[expr,{a₁,a₂,…}] gives True if all combinations of values of the aᵢ make the Boolean expression expr yield True.", 
"Temporary" : "Temporary is an attribute assigned to symbols which are created as local variables by Module. ", 
"TeXForm" : "TeXForm[expr] prints as a TeX version of expr. ", 
"TeXSave" : "TeXSave[\"file.tex\"] saves a TeX version of the current input notebook in the front end. \nTeXSave[\"file.tex\",\"source.nb\"] saves a TeX version of the notebook from the file source.nb. \nTeXSave[\"file.tex\",notebook] saves a TeX version of the notebook corresponding to the specified notebook object. ", 
"Text" : "Text[expr] displays with expr in plain text format. \nText[expr,coords] is a graphics primitive that displays the textual form of expr centered at the point specified by coords. ", 
"TextAlignment" : "TextAlignment is an option for Cell, Style and related constructs which specifies how successive lines of text should be aligned. ", 
"TextCell" : "TextCell[\"string\"] gives a text cell that can appear in a Mathematica notebook.\nTextCell[\"string\",\"style\"] gives a text cell with the specified style.", 
"TextClipboardType" : "TextClipboardType is an option for cells that specifies how Edit ▶ Copy treats a cell when converting it for the system's textual clipboard.", 
"TextData" : "TextData[exprs] is a low-level representation of the contents of a textual cell.", 
"TextJustification" : "TextJustification is an option for Cell and Inset which specifies how much lines of text can be stretched in order to make them be the same length. ", 
"TextPacket" : "TextPacket[string] is a MathLink packet containing string, the text output from Mathematica as produced by functions such as Print.", 
"TextRecognize" : "TextRecognize[image] recognizes text in image and returns it as a string.", 
"TextRendering" : "TextRendering is an obsolete option for OpenWrite etc. which specifies how text is to be rendered in a particular output file. This option is not supported in Version 2.0 or later.", 
"TextStyle" : "TextStyle is an option for graphics functions and for Text which specifies the default style and font options with which text should be rendered. ", 
"Texture" : "Texture[obj] is a graphics directive that specifies that obj should be used as a texture on faces of polygons and other filled graphics objects. ", 
"TextureCoordinateFunction" : "TextureCoordinateFunction is an option to Plot3D and similar functions that specifies a function that computes texture coordinates.", 
"TextureCoordinateScaling" : "TextureCoordinateScaling is an option to Plot3D and similar functions that specifies whether arguments supplied to a texture coordinate function should be scaled to lie between 0 and 1.", 
"Therefore" : "Therefore[x,y] displays as x∴y.", 
"Thick" : "Thick is a graphics directive that specifies that lines which follow should be drawn thick.", 
"Thickness" : "Thickness[r] is a graphics directive which specifies that lines which follow are to be drawn with thickness r. The thickness r is given as a fraction of the horizontal plot range. ", 
"Thin" : "Thin is a graphics directive that specifies that lines which follow should be drawn thin.", 
"Thinning" : "Thinning[image] finds the skeletons of foreground regions in image by applying morphological thinning until convergence.\nThinning[image,n] performs n iterations of morphological thinning.\nThinning[image,n,t] treats values above t as foreground.", 
"ThisLink" : "ThisLink is used in patterns for external packages to distinguish between several instances of the same package.", 
"ThompsonGroupTh" : "ThompsonGroupTh[] represents the sporadic simple Thompson group Th.", 
"Thread" : "Thread[f[args]] \"threads\" f over any lists that appear in args. \nThread[f[args],h] threads f over any objects with head h that appear in args. \nThread[f[args],h,n] threads f over objects with head h that appear in the first n args. ", 
"ThreeJSymbol" : "ThreeJSymbol[{j₁,m₁},{j₂,m₂},{j₃,m₃}] gives the values of the Wigner 3‐j symbol. ", 
"Threshold" : "Threshold[data] thresholds data by replacing values close to zero by zero.\nThreshold[data,tspec] thresholds data using threshold specification tspec.\nThreshold[image,…] thresholds an image.\nThreshold[sound,…] thresholds a sound object.", 
"Through" : "Through[p[f₁,f₂][x]] gives p[f₁[x],f₂[x]]. \nThrough[expr,h] performs the transformation wherever h occurs in the head of expr. ", 
"Throw" : "Throw[value] stops evaluation and returns value as the value of the nearest enclosing Catch. \nThrow[value,tag] is caught only by Catch[expr,form] where form is a pattern that matches tag. ", 
"Thumbnail" : "Thumbnail[image] gives a thumbnail version of an image.\nThumbnail[image,size] gives a thumbnail with the specified maximum pixel size.", 
"Ticks" : "Ticks is an option for graphics functions that specifies tick marks for axes. ", 
"TicksStyle" : "TicksStyle is an option for graphics functions which specifies how ticks should be rendered.", 
"Tilde" : "Tilde[x,y,…] displays as x∼y∼….", 
"TildeEqual" : "TildeEqual[x,y,…] displays as x≃y≃….", 
"TildeFullEqual" : "TildeFullEqual[x,y,…] displays as x≅y≅….", 
"TildeTilde" : "TildeTilde[x,y,…] displays as x≈y≈….", 
"TimeConstrained" : "TimeConstrained[expr,t] evaluates expr, stopping after t seconds. \nTimeConstrained[expr,t,failexpr] returns failexpr if the time constraint is not met. ", 
"TimeConstraint" : "TimeConstraint is an option for various algorithmic functions which specifies how long to spend trying a particular transformation or part of an algorithm. ", 
"Times" : "x*y*z, x×y×z, or x y z represents a product of terms. ", 
"TimesBy" : "x*=c multiplies x by c and returns the new value of x. ", 
"TimeUsed" : "TimeUsed[] gives the total number of seconds of CPU time used so far in the current Mathematica session. ", 
"TimeValue" : "TimeValue[s,i,t] calculates the time value of a security s at time t for an interest specified by i.", 
"TimeZone" : "TimeZone is an option for DateString, AbsoluteTime, and related functions that specifies the time zone to use for dates and times. ", 
"Timing" : "Timing[expr] evaluates expr, and returns a list of the time in seconds used, together with the result obtained. ", 
"Tiny" : "Tiny is a style or option setting that specifies that objects should be tiny.", 
"TitsGroupT" : "TitsGroupT[] represents the simple Tits group T.", 
"ToBoxes" : "ToBoxes[expr] generates boxes corresponding to the printed form of expr in StandardForm. \nToBoxes[expr,form] gives the boxes corresponding to output in the specified form. ", 
"ToCharacterCode" : "ToCharacterCode[\"string\"] gives a list of the integer codes corresponding to the characters in a string. \nToCharacterCode[\"string\",\"encoding\"] gives integer codes according to the specified encoding. ", 
"ToColor" : "ToColor[color, form] converts color to form if form is GrayLevel, RGBColor or CMYKColor. Otherwise form[color] is evaluated and the result is expected to be a valid color directive.", 
"ToContinuousTimeModel" : "ToContinuousTimeModel[sys] gives the continuous-time approximation of the discrete-time TransferFunctionModel or StateSpaceModel object sys.\nToContinuousTimeModel[tf,s] gives the continuous-time approximation of the discrete-time TransferFunctionModel object tf, using s as the Laplace-transform variable.", 
"ToDate" : "ToDate[time] converts an absolute time in seconds since the beginning of January 1, 1900 to a date of the form {y,m,d,h,m,s}. ", 
"ToDiscreteTimeModel" : "ToDiscreteTimeModel[sys,τ] gives the discrete-time approximation with sampling period τ of the continuous-time StateSpaceModel or TransferFunctionModel object sys.\nToDiscreteTimeModel[tf,τ,z] gives the discrete-time approximation of the TransferFunctionModel object tf, using z as the Z-transform variable.", 
"ToeplitzMatrix" : "ToeplitzMatrix[n] gives the n×n Toeplitz matrix with first row and first column being successive integers.\nToeplitzMatrix[{c₁,c₂,…,cₙ}] gives the Toeplitz matrix whose first column consists of elements c₁, c₂, ….\nToeplitzMatrix[{c₁,c₂,…,cₘ},{r₁,r₂,…, rₙ}] gives the Toeplitz matrix with elements cᵢ down the first column, and rᵢ across the first row.", 
"ToExpression" : "ToExpression[input] gives the expression obtained by interpreting strings or boxes as Mathematica input. \nToExpression[input,form] uses interpretation rules corresponding to the specified form. \nToExpression[input,form,h] wraps the head h around the expression produced before evaluating it. ", 
"ToFileName" : "ToFileName[\"directory\",\"name\"] assembles a full file name from a directory name and a file name. \nToFileName[{dir₁,dir₂,…},name] assembles a full file name from a hierarchy of directory names. \nToFileName[{dir₁,dir₂,…}] assembles a single directory name from a hierarchy of directory names. ", 
"Together" : "Together[expr] puts terms in a sum over a common denominator, and cancels factors in the result. ", 
"Toggler" : "Toggler[x] represents a toggler button with setting x, that toggles between True and False. \nToggler[Dynamic[x]] takes the setting to be the dynamically updated current value of x, with the value of x being toggled if the button is clicked. \nToggler[x,{val₁,val₂,…}] represents a toggler button that cycles through any sequence of values valᵢ. \nToggler[x,{val₁->pict₁,val₂->pict₂,…}] cycles through values valᵢ displaying them as pictᵢ. \nToggler[x,vlist,dpict] displays as dpict if x is none of the valᵢ. ", 
"TogglerBar" : "TogglerBar[x,{val₁,val₂,…}] represents a toggler bar with setting x and with toggler buttons for values valᵢ to include in the list x.\nTogglerBar[Dynamic[x],{val₁,val₂,…}] takes the setting to be the dynamically updated current value of x, with the values in the list x being reset every time a toggler button is clicked.\nTogglerBar[x,{val₁->lbl₁,val₂->lbl₂,…}] represents a toggler bar in which the toggler button associated with value valᵢ has label lblᵢ.", 
"TokenWords" : "TokenWords is an option for Read and related functions which gives a list of token words to be used to delimit words. ", 
"Tolerance" : "Tolerance is an option for various numerical options which specifies the tolerance that should be allowed in computing results.", 
"ToLowerCase" : "ToLowerCase[string] yields a string in which all letters have been converted to lowercase. ", 
"ToNumberField" : "ToNumberField[a,θ] expresses the algebraic number a in the number field generated by θ. \nToNumberField[{a₁,a₂,…},θ] expresses the aᵢ in the field generated by θ.\nToNumberField[{a₁,a₂,…}] expresses the aᵢ in a common extension field generated by a single algebraic number.", 
"TooBig" : "TooBig is an internal symbol.", 
"Tooltip" : "Tooltip[expr,label] displays label as a tooltip while the mouse pointer is in the area where expr is displayed. ", 
"TooltipDelay" : "TooltipDelay is an option for objects such as Tooltip that specifies how long to delay after the mouse is over the object before displaying the tooltip.", 
"Top" : "Top is a symbol that represents the top for purposes of alignment and positioning. ", 
"TopHatTransform" : "TopHatTransform[image,ker] gives the morphological top-hat transform of image with respect to structuring element ker.\nTopHatTransform[image,r] gives the top-hat transform with respect to a range r square.", 
"TopologicalSort" : "TopologicalSort[g] gives a list of vertices of g in topologically sorted order for a directed acyclic graph g.", 
"ToRadicals" : "ToRadicals[expr] attempts to express all Root objects in expr in terms of radicals. ", 
"ToRules" : "ToRules[eqns] takes logical combinations of equations, in the form generated by Roots and Reduce, and converts them to lists of rules, of the form produced by Solve. ", 
"ToServiceRequest" : " ToServiceRequest [ parameters , options ] builds a request message using input provided in the parameters. \n ToServiceRequest [ symbol , parameters ] builds the request message for a web service operation using input provided in the parameters and information linked with the symbol. ", 
"ToString" : "ToString[expr] gives a string corresponding to the printed form of expr in OutputForm. \nToString[expr,form] gives the string corresponding to output in the specified form. ", 
"Total" : "Total[list] gives the total of the elements in list. \nTotal[list,n] totals all elements down to level n. \nTotal[list,{n}] totals elements at level n. \nTotal[list,{n₁,n₂}] totals elements at levels n₁ through n₂. ", 
"TotalVariationFilter" : "TotalVariationFilter[image] iteratively reduces noise while preserving edges in image.\nTotalVariationFilter[image,param] assumes a regularization parameter value param.", 
"TotalWidth" : "TotalWidth is an option which can be set for output streams to specify the maximum total number of characters of text that should be printed for each output expression. Short forms of expressions are given if the number of characters needed to print the whole expression is too large. ", 
"ToUpperCase" : "ToUpperCase[string] yields a string in which all letters have been converted to uppercase. ", 
"Tr" : "Tr[list] finds the trace of the matrix or tensor list. \nTr[list,f] finds a generalized trace, combining terms with f instead of Plus. \nTr[list,f,n] goes down to level n in list. ", 
"Trace" : "Trace[expr] generates a list of all expressions used in the evaluation of expr. \nTrace[expr,form] includes only those expressions which match form. \nTrace[expr,s] includes all evaluations which use transformation rules associated with the symbol s. ", 
"TraceAbove" : "TraceAbove is an option for Trace and related functions which specifies whether to include evaluation chains which contain the evaluation chain containing the pattern form sought. ", 
"TraceAction" : "TraceAction is an option for TracePrint and TraceDialog that specifies the function to be applied to each expression they trace.", 
"TraceBackward" : "TraceBackward is an option for Trace and related functions which specifies whether to include preceding expressions on the evaluation chain that contains the pattern form sought. ", 
"TraceDepth" : "TraceDepth is an option for Trace and related functions which specifies the maximum nesting of evaluation chains that are to be included. ", 
"TraceDialog" : "TraceDialog[expr] initiates a dialog for every expression used in the evaluation of expr. \nTraceDialog[expr,form] initiates a dialog only for expressions which match form. \nTraceDialog[expr,s] initiates dialogs only for expressions whose evaluations use transformation rules associated with the symbol s. ", 
"TraceForward" : "TraceForward is an option for Trace and related functions which specifies whether to include later expressions on the evaluation chain that contains the pattern form sought. ", 
"TraceInternal" : "TraceInternal is an option for Trace and related functions which, if True or False, specifies whether to trace evaluations of expressions generated internally by Mathematica. The intermediate Automatic setting traces a selected set of internal evaluations including Messages and sets or unsets of visible symbols.", 
"TraceLevel" : "TraceLevel[] returns the level currently being traced when it appears within Trace and related functions.", 
"TraceOff" : "TraceOff is an option for Trace and related functions which specifies forms inside which tracing should be switched off. ", 
"TraceOn" : "TraceOn is an option for Trace and related functions which specifies when tracing should be switched on. ", 
"TraceOriginal" : "TraceOriginal is an option for Trace and related functions which specifies whether to test the form of each expression before its head and arguments are evaluated. ", 
"TracePrint" : "TracePrint[expr] prints all expressions used in the evaluation of expr. \nTracePrint[expr,form] includes only those expressions which match form. \nTracePrint[expr,s] includes all evaluations which use transformation rules associated with the symbol s. ", 
"TraceScan" : "TraceScan[f,expr] applies f to all expressions used in the evaluation of expr. \nTraceScan[f,expr,form] includes only those expressions which match form. \nTraceScan[f,expr,s] includes all evaluations which use transformation rules associated with the symbol s. \nTraceScan[f,expr,form,fp] applies f before evaluation and fp after evaluation to expressions used in the evaluation of expr. ", 
"TrackedSymbols" : "TrackedSymbols is an option to Refresh, Manipulate, and related functions that specifies which symbols should trigger updates when their values are changed.", 
"TradingChart" : "TradingChart[{{date₁,{open₁,high₁,low₁,close₁,volume₁}},…}] makes a chart showing prices and volume for each date. \nTradingChart[{\"name\",daterange}] makes a financial chart for the financial entity \"name\" over the daterange. \nTradingChart[{…},{ind₁,ind₂,…}] makes a financial chart with indicators ind₁, ind₂, …. ", 
"TraditionalForm" : "TraditionalForm[expr] prints as an approximation to the traditional mathematical notation for expr. ", 
"TraditionalFunctionNotation" : "TraditionalFunctionNotation is an option for selections that specifies whether input of the form f(x) is interpreted by the kernel as a function or as a product.", 
"TransferFunctionCancel" : "TransferFunctionCancel[tf] cancels common poles and zeros in the TransferFunctionModel object tf.\nTransferFunctionCancel[tf,crit] cancels only common pole-zero pairs eᵢ for which crit[eᵢ] is True.", 
"TransferFunctionExpand" : "TransferFunctionExpand[tf] expands polynomial terms in the numerators and denominators of the TransferFunctionModel object tf.", 
"TransferFunctionFactor" : "TransferFunctionFactor[tf] factors the polynomial terms in the numerators and denominators of the TransferFunctionModel object tf.", 
"TransferFunctionModel" : "TransferFunctionModel[m,var] represents the model of the transfer-function matrix m with complex variable var.\nTransferFunctionModel[{num,den},var] specifies the numerator num and denominator den of a transfer-function model.\nTransferFunctionModel[ss] gives the transfer-function model of the StateSpaceModel object ss.", 
"TransferFunctionPoles" : "TransferFunctionPoles[tf] gives a matrix of roots of the denominators in the TransferFunctionModel object tf.", 
"TransferFunctionZeros" : "TransferFunctionZeros[tf] gives a matrix of roots of the numerators in the TransferFunctionModel object tf.", 
"TransformationFunction" : "TransformationFunction[data] represents a transformation function that applies geometric and other transformations.", 
"TransformationFunctions" : "TransformationFunctions is an option for Simplify and FullSimplify which gives the list of functions to apply to try to transform parts of an expression. ", 
"TransformationMatrix" : "TransformationMatrix[tfun] gives the homogeneous matrix associated with a TransformationFunction object.", 
"TransformedDistribution" : "TransformedDistribution[expr,x≈dist] represents the transformed distribution of expr where the random variable x follows the distribution dist.\nTransformedDistribution[expr,{x₁,x₂,…}≈dist] represents the transformed distribution of expr where {x₁,x₂,…} follows the multivariate distribution dist. \nTransformedDistribution[expr,{x₁≈dist₁,x₂≈dist₂ ,…}] represents a transformed distribution where x₁, x₂, … are independent and follow the distributions dist₁, dist₂, ….", 
"Translate" : "Translate[g,{x,y,…}] represents graphics primitives g translated by the vector {x,y,…}. \nTranslate[g,{{x₁,y₁,…},{x₂,y₂,…}, …}] represents multiple copies of g translated by a collection of vectors.", 
"TranslationTransform" : "TranslationTransform[v] gives a TransformationFunction that represents translation of points by a vector v.", 
"Transparent" : "Transparent represents perfect transparency in graphics or style specifications. ", 
"Transpose" : "Transpose[list] transposes the first two levels in list. \nTranspose[list,{n₁,n₂,…}] transposes list so that the kᵗʰ level in list is the nₖᵗʰ level in the result. ", 
"TreeForm" : "TreeForm[expr] displays expr as a tree with different levels at different depths. \nTreeForm[expr,n] displays expr as a tree only down to level n.", 
"TreeGraph" : "TreeGraph[{v₁,v₂,…},{u₁,u₂,…}] yields a tree where uᵢ is the predecessor of vᵢ.\nTreeGraph[{e₁,e₂,…}] yields a tree with edges Subscript[e,j].\nTreeGraph[{v₁,v₂,…},{e₁,e₂,…}] yields a tree with vertices vᵢ and edges Subscript[e,j].\nTreeGraph[{…,wᵢ[vᵢ,…],…},{…,Subscript[w,j][Subscript[e,j],…],…}] yields a tree with vertex and edge properties defined by the symbolic wrappers wₖ.", 
"TreeGraphQ" : "TreeGraphQ[g] yields True if the graph g is a tree and False otherwise.", 
"TreePlot" : "TreePlot[{Subscript[v,i1]->Subscript[v,j1],Subscript[v,i2]->Subscript[v,j2],…}] generates a tree plot of the graph in which vertex vᵢₖ is connected to vertex Subscript[v,jk].\nTreePlot[{{Subscript[v,i1]->Subscript[v,j1],lbl₁},…}] associates labels lblₖ with edges in the graph.\nTreePlot[g,pos] places roots of trees in the plot at position pos.\nTreePlot[g,pos,vₖ] uses vertex vₖ as the root node in the tree plot.", 
"TrendStyle" : "TrendStyle is an option to CandlestickChart, RenkoChart, and other financial charting functions that specifies how to style price trends. ", 
"TriangleWave" : "TriangleWave[x] gives a triangle wave that varies between -1 and +1 with the unit period.\nTriangleWave[{min,max},x] gives a triangle wave that varies between min and max with the unit period.", 
"TriangularDistribution" : "TriangularDistribution[{min,max}] represents a symmetric triangular statistical distribution giving values between min and max. \nTriangularDistribution[{min,max},c] represents a triangular distribution with a maximum at c.", 
"Trig" : "Trig is an option for various polynomial manipulation functions that specifies whether trigonometric functions should be treated like polynomial elements.", 
"TrigExpand" : "TrigExpand[expr] expands out trigonometric functions in expr. ", 
"TrigFactor" : "TrigFactor[expr] factors trigonometric functions in expr. ", 
"TrigFactorList" : "TrigFactorList[expr] factors trigonometric functions in expr, yielding a list of lists containing trigonometric monomials and exponents. ", 
"Trigger" : "Trigger[Dynamic[u]] represents a trigger that can be pressed to make the dynamically updated value of u be continually increased with time from 0 to 1. \nTrigger[Dynamic[u],{uₘᵢₙ,uₘₐₓ}] makes u vary from uₘᵢₙ to uₘₐₓ when triggered. \nTrigger[Dynamic[u],{uₘᵢₙ,uₘₐₓ,du}] makes u vary in steps du when triggered. \nTrigger[Dynamic[u],{uₘᵢₙ,uₘₐₓ},ups] makes the value of u increase at a rate of ups units per second when triggered. ", 
"TrigReduce" : "TrigReduce[expr] rewrites products and powers of trigonometric functions in expr in terms of trigonometric functions with combined arguments. ", 
"TrigToExp" : "TrigToExp[expr] converts trigonometric functions in expr to exponentials. ", 
"TrimmedMean" : "TrimmedMean[list,f] gives the mean of the elements in list after dropping a fraction f of the smallest and largest elements.\nTrimmedMean[list,{f₁,f₂}] gives the mean when a fraction f₁ of the smallest elements and a fraction f₂ of the largest elements are removed.\nTrimmedMean[list] gives the 5% trimmed mean TrimmedMean[list,0.05].", 
"True" : "True is the symbol for the Boolean value true. ", 
"TrueQ" : "TrueQ[expr] yields True if expr is True, and yields False otherwise. ", 
"TruncatedDistribution" : "TruncatedDistribution[{xₘᵢₙ,xₘₐₓ},dist] represents the distribution obtained by truncating the values of dist to lie between xₘᵢₙ and xₘₐₓ.\nTruncatedDistribution[{{xₘᵢₙ,xₘₐₓ},{yₘᵢₙ,yₘₐₓ},…},dist] represents the distribution obtained by truncating the values of the multivariate distribution dist to lie between xₘᵢₙ and xₘₐₓ, yₘᵢₙ and yₘₐₓ, etc.", 
"TTest" : "TTest[data] tests whether the mean of data is zero. \nTTest[{data₁,data₂}] tests whether the means of data₁ and data₂ are equal.\nTTest[dspec,μ₀] tests the mean against μ₀ .\nTTest[dspec,μ₀,\"property\"] returns the value of \"property\".", 
"Tube" : "Tube[{{x₁,y₁,z₁},{x₂,y₂,z₂},…}] represents a 3D tube around the line joining a sequence of points.\nTube[{pt₁,pt₂,…},r] represents a tube of radius r.\nTube[{{pt₁₁,pt₁₂,…},{pt₂₁,…},…},…] represents a collection of tubes.\nTube[curve,…] represents a tube around the specified 3D curve.", 
"TukeyLambdaDistribution" : "TukeyLambdaDistribution[λ] represents Tukey's lambda distribution with shape parameter λ.\nTukeyLambdaDistribution[λ,μ,σ] represents Tukey's lambda distribution with location parameter μ and scale parameter σ.\nTukeyLambdaDistribution[{λ₁,λ₂},μ,{σ₁,σ₂}] represents the generalized Tukey's lambda distribution with location parameter μ, scale parameters σ₁ and σ₂, and shape parameters λ₁ and λ₂.", 
"Tuples" : "Tuples[list,n] generates a list of all possible n‐tuples of elements from list. \nTuples[{list₁,list₂,…}] generates a list of all possible tuples whose iᵗʰ element is from listᵢ. ", 
"TuranGraph" : "TuranGraph[n,k] gives the k-partite Turán graph with n vertices Subscript[T,n,k].", 
"TuringMachine" : "TuringMachine[rule,init,t] generates a list representing the evolution of the Turing machine with the specified rule from initial condition init for t steps. \nTuringMachine[rule,init] gives the result of evolving init for one step. ", 
"Uncompress" : "Uncompress[\"string\"] recovers an expression from a compressed string representation generated by Compress.\nUncompress[\"string\",h] wraps the head h around the expression produced before evaluating it. ", 
"Undefined" : "Undefined is a symbol that represents a quantity with no defined value.", 
"UnderBar" : "UnderBar[expr] displays with a bar under expr.", 
"Underflow" : "Underflow[] represents a number too small to represent explicitly on your computer system.", 
"Underlined" : "Underlined represents an underlined font.", 
"Underoverscript" : "Underoverscript[x,y,z] is an object that formats as Underoverscript[x, y, z]. ", 
"UnderoverscriptBox" : "UnderoverscriptBox[x,y,z] is the low‐level box representation for Underoverscript[x, y, z] in notebook expressions. ", 
"UnderoverscriptBoxOptions" : "UnderoverscriptBoxOptions->{opt₁->val₁,opt₂->val₂,…} is an option for selections that specifies settings for UnderoverscriptBox objects.", 
"Underscript" : "Underscript[x,y] is an object that formats as Underscript[x, y]. ", 
"UnderscriptBox" : "UnderscriptBox[x,y] is the low‐level box representation for Underscript[x, y] in notebook expressions. ", 
"UnderscriptBoxOptions" : "UnderscriptBoxOptions->{opt₁->val₁,opt₂->val₂,…} is an option for selections that specifies settings for UnderscriptBox objects.", 
"UndirectedEdge" : "UndirectedEdge[u,v] or u<->v represents an undirected edge of a graph with vertices u and v.", 
"UndirectedGraph" : "UndirectedGraph[g] gives an undirected graph from the directed graph g.", 
"UndirectedGraphQ" : "UndirectedGraphQ[g] yields True if the graph g is an undirected graph and False otherwise.", 
"Unequal" : "lhs!=rhs or lhs≠rhs returns False if lhs and rhs are identical. ", 
"Unevaluated" : "Unevaluated[expr] represents the unevaluated form of expr when it appears as the argument to a function. ", 
"UniformDistribution" : "UniformDistribution[{min,max}] represents a continuous uniform statistical distribution giving values between min and max. \nUniformDistribution[] represents a uniform distribution giving values between 0 and 1.\nUniformDistribution[{{xₘᵢₙ,xₘₐₓ},{yₘᵢₙ,yₘₐₓ},…}] represents a multivariate uniform distribution over the region {{xₘᵢₙ,xₘₐₓ},{yₘᵢₙ,yₘₐₓ},…}.", 
"UniformGraphDistribution" : "UniformGraphDistribution[n,m] represents a uniform graph distribution on n-vertex, m-edge graphs.", 
"UniformSumDistribution" : "UniformSumDistribution[n] represents the distribution of a sum of n random variables uniformly distributed from 0 to 1.\nUniformSumDistribution[n,{min,max}] represents the distribution of a sum of n random variables uniformly distributed from min to max.", 
"Uninstall" : "Uninstall[link] terminates an external program started by Install, and removes Mathematica definitions set up by it. ", 
"Union" : "Union[list₁,list₂,…] gives a sorted list of all the distinct elements that appear in any of the listᵢ. \nUnion[list] gives a sorted version of a list, in which all duplicated elements have been dropped. ", 
"UnionPlus" : "UnionPlus[x,y,…] displays as x⊎y⊎….", 
"Unique" : "Unique[] generates a new symbol, whose name is of the form $nnn. \nUnique[x] generates a new symbol, with a name of the form x$nnn. \nUnique[{x,y,…}] generates a list of new symbols. \nUnique[\"xxx\"] generates a new symbol, with a name of the form xxxnnn. ", 
"UnitBox" : "UnitBox[x] represents the unit box function, equal to 1 for |x|≤½ and 0 otherwise.\nUnitBox[x₁,x₂,…] represents the multidimensional unit box function, equal to 1 if |xᵢ|≤½ and 0 otherwise.", 
"Unitize" : "Unitize[x] gives 0 when x is zero, and 1 when x has any other numerical value.", 
"UnitStep" : "UnitStep[x] represents the unit step function, equal to 0 for x<0 and 1 for x≥0. \nUnitStep[x₁,x₂,…] represents the multidimensional unit step function which is 1 only if none of the xᵢ are negative. ", 
"UnitTriangle" : "UnitTriangle[x] represents the unit triangle function on the interval |x|≤1 .\nUnitTriangle[x₁,x₂,…] represents the multidimensional unit triangle function on the interval |xᵢ|≤1.", 
"UnitVector" : "UnitVector[k] gives the two-dimensional unit vector in the kᵗʰ direction.\nUnitVector[n,k] gives the n-dimensional unit vector in the kᵗʰ direction.", 
"UnpackPaclet" : "UnpackPaclet[\"file\"] unpacks the specified .paclet file into the same directory in which the .paclet file is located. UnpackPaclet[\"file\", \"dir\"] unpacks the file into the specified directory.", 
"Unprotect" : "Unprotect[s₁,s₂,…] removes the attribute Protected for the symbols sᵢ. \nUnprotect[\"form \"\n     1,\"form \"\n     2,…] unprotects all symbols whose names textually match any of the formᵢ. ", 
"UnsameQ" : "lhs=!=rhs yields True if the expression lhs is not identical to rhs, and yields False otherwise. ", 
"UnsavedVariables" : "UnsavedVariables is an option for Manipulate, DynamicModule, and related functions that specifies local symbols that should not be saved when the notebook containing them is saved.", 
"Unset" : "lhs=. removes any rules defined for lhs. ", 
"UnsetShared" : "UnsetShared[s₁,s₂,…] stops the sharing of the variables or functions sᵢ among parallel kernels.\nUnsetShared[patt] stops the sharing of all variables and functions whose names match the string pattern patt.", 
"UpArrow" : "UpArrow[x,y,…] displays as x↑y↑….", 
"UpArrowBar" : "UpArrowBar[x,y,…] displays as x⤒y⤒….", 
"UpArrowDownArrow" : "UpArrowDownArrow[x,y,…] displays as x⇅y⇅….", 
"Update" : "Update[symbol] tells Mathematica that hidden changes have been made which could affect values associated with a symbol. \nUpdate[] specifies that the value of any symbol could be affected. ", 
"UpdateInterval" : "UpdateInterval is an option to Refresh and Dynamic that specifies at what time interval to do updates.", 
"UpDownArrow" : "UpDownArrow[x,y,…] displays as x↕y↕….", 
"UpEquilibrium" : "UpEquilibrium[x,y,…] displays as x⥮y⥮….", 
"UpperCaseQ" : "UpperCaseQ[string] yields True if all the characters in the string are uppercase letters, and yields False otherwise. ", 
"UpperLeftArrow" : "UpperLeftArrow[x,y,…] displays as x↖y↖….", 
"UpperRightArrow" : "UpperRightArrow[x,y,…] displays as x↗y↗….", 
"UpperTriangularize" : "UpperTriangularize[m] gives a matrix in which all but the upper triangular elements of m are replaced with zeros. \nUpperTriangularize[m,k] replaces with zeros only the elements below the kᵗʰ subdiagonal of m.", 
"UpSet" : "lhs^=rhs assigns rhs to be the value of lhs, and associates the assignment with symbols that occur at level one in lhs. ", 
"UpSetDelayed" : "lhs^:=rhs assigns rhs to be the delayed value of lhs, and associates the assignment with symbols that occur at level one in lhs. ", 
"UpTee" : "UpTee[x,y] displays as x⊥y.", 
"UpTeeArrow" : "UpTeeArrow[x,y,…] displays as x↥y↥….", 
"UpValues" : "UpValues[f] gives a list of transformation rules corresponding to all upvalues defined for the symbol f. ", 
"UseInternetProxy" : "UseInternetProxy controls whether Mathematica should use a proxy server when accessing the Internet. UseInternetProxy[Automatic] causes Mathematica to attempt to use the proxy settings from your system or browser. UseInternetProxy[False] causes Mathematica to connect directly to the Internet, bypassing a proxy server. UseInternetProxy[True] causes Mathematica to use the proxy settings specified in $InternetProxyRules. You can also use the Help > Internet Connectivity dialog in the front end to configure proxy settings.", 
"Using" : "Using is an option to Roots that specifies any subsidiary equations that are to be used.", 
"UsingFrontEnd" : "UsingFrontEnd[expr] evaluates expr, making use of a front end if necessary.", 
"V2Get" : "V2Get[name] reads in a file written by the V2.x versions.", 
"ValidationLength" : "ValidationLength is an option to FindSequenceFunction and related functions that specifies the number of elements in the input sequence that should be used to validate a potential representation found.", 
"ValueForm" : "ValueForm is an internal symbol.", 
"ValueQ" : "ValueQ[expr] gives True if a value has been defined for expr, and gives False otherwise. ", 
"Variables" : "Variables[poly] gives a list of all independent variables in a polynomial. ", 
"Variance" : "Variance[list] gives the sample variance of the elements in list. \nVariance[dist] gives the variance of the symbolic distribution dist.", 
"VarianceEquivalenceTest" : "VarianceEquivalenceTest[{data₁,data₂,…}] tests whether the variances of the dataᵢ are equal. \nVarianceEquivalenceTest[{data₁,…},\"property\"] returns the value of \"property\".", 
"VarianceEstimatorFunction" : "VarianceEstimatorFunction is an option for LinearModelFit and NonlinearModelFit which specifies the variance estimator to use.", 
"VarianceTest" : "VarianceTest[data] tests whether the variance of the data is one. \nVarianceTest[{data₁,data₂}] tests whether the variances of data₁ and data₂ are equal.\nVarianceTest[dspec,σ₀²] tests a dispersion measure against σ₀².\nVarianceTest[dspec,σ₀²,\"property\"] returns the value of \"property\".", 
"VectorAngle" : "VectorAngle[u,v] gives the angle between the vectors u and v.", 
"VectorColorFunction" : "VectorColorFunction is an option for VectorPlot and related functions which specifies a function to apply to determine colors of field vectors drawn. ", 
"VectorColorFunctionScaling" : "VectorColorFunctionScaling is an option for graphics functions which specifies whether arguments supplied to a vector color function should be scaled to lie between 0 and 1. ", 
"VectorDensityPlot" : "VectorDensityPlot[{{vₓ,Subscript[v,y]},s},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] generates a vector plot of the vector field {vₓ,Subscript[v,y]} as a function of x and y, superimposed on a density plot of the scalar field s. \nVectorDensityPlot[{vₓ,Subscript[v,y]},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] takes the scalar field to be the norm of the vector field. \nVectorDensityPlot[{{vₓ,Subscript[v,y]},{wₓ,Subscript[w,y]},…,s},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] plots several vector fields. ", 
"VectorPlot" : "VectorPlot[{vₓ,Subscript[v,y]},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] generates a vector plot of the vector field {vₓ,Subscript[v,y]} as a function of x and y. \nVectorPlot[{{vₓ,Subscript[v,y]},{wₓ,Subscript[w,y]},…},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ}] plots several vector fields. ", 
"VectorPlot3D" : "VectorPlot3D[{vₓ,Subscript[v,y],Subscript[v,z]},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ},{z,zₘᵢₙ,zₘₐₓ}] generates a 3D vector plot of the vector field {vₓ,Subscript[v,y],Subscript[v,z]} as a function of x, y, and z.\nVectorPlot3D[{field₁,field₂,…},{x,xₘᵢₙ,xₘₐₓ},{y,yₘᵢₙ,yₘₐₓ},{z,zₘᵢₙ,zₘₐₓ}] plots several vector fields.", 
"VectorPoints" : "VectorPoints is an option to VectorPlot, ListVectorPlot, and related functions that determines how many field vectors to draw. ", 
"VectorQ" : "VectorQ[expr] gives True if expr is a list or a one‐dimensional SparseArray object, none of whose elements are themselves lists, and gives False otherwise. \nVectorQ[expr,test] gives True only if test yields True when applied to each of the elements in expr. ", 
"VectorScale" : "VectorScale is an option to VectorPlot, ListVectorPlot, and related functions that determines the length and arrowhead size of field vectors that are drawn. ", 
"VectorStyle" : "VectorStyle is an option to VectorPlot, ListVectorPlot, and related functions that determines the style to use for drawing field vectors.", 
"Vee" : "Vee[x,y,…] displays as x⋁y⋁….", 
"Verbatim" : "Verbatim[expr] represents expr in pattern matching, requiring that expr be matched exactly as it appears, with no substitutions for blanks or other transformations. ", 
"VerifyConvergence" : "VerifyConvergence is an option to Sum, NSum, and similar functions that specifies whether convergence checking should be done.", 
"VerifySolutions" : "VerifySolutions is an option to Solve and related functions. With VerifySolutions -> True, solutions are verified and extraneous solutions are eliminated. With VerifySolutions -> False, they are not. Note that only those numerical solutions that are obviously extraneous are eliminated.", 
"VerifyTestAssumptions" : "VerifyTestAssumptions is an option to LocationTest and similar functions that controls which assumptions to verify through diagnostic tests.", 
"VertexAdd" : "VertexAdd[g,v] makes a graph by adding the vertex v to the graph g.\nVertexAdd[g,{v₁,v₂,…}] adds a collection of vertices to g.", 
"VertexColors" : "VertexColors is an option for graphics primitives which specifies the colors to assign to vertices.", 
"VertexComponent" : "VertexComponent[g,{v₁,v₂,…}] gives the vertices in the graph g that have a path to at least one of v₁, v₂, ….\nVertexComponent[g,{v₁,v₂,…},k] gives the vertices with a path to at least one of v₁, v₂, … of at most length k.", 
"VertexCoordinateRules" : "VertexCoordinateRules is an option for GraphPlot and related functions which specifies rules for determining the coordinates at which vertices should be placed.", 
"VertexCoordinates" : "VertexCoordinates is an option to Graph and related functions that specifies the coordinates to use to place the center of vertices. ", 
"VertexCount" : "VertexCount[g] gives a count of the number of vertices in the graph g.\nVertexCount[g,patt] gives a count of the number of vertices that match the pattern patt.", 
"VertexCoverQ" : "VertexCoverQ[g,vlist] yields True if the vertex list vlist is a vertex cover of the graph g, and False otherwise.", 
"VertexDegree" : "VertexDegree[g] gives the list of vertex degrees for all vertices in the graph g.\nVertexDegree[g,v] gives the vertex degree for the vertex v.", 
"VertexDelete" : "VertexDelete[g,v] makes a graph by deleting the vertex ν and all edges connected to v from the graph g.\nVertexDelete[g,{v₁,v₂,…}] deletes a collection of vertices from g.\nVertexDelete[g,patt] deletes all vertices that match the pattern patt.", 
"VertexEccentricity" : "VertexEccentricity[g,s] gives the length of the longest shortest path from the source s to every other vertex in the graph g.", 
"VertexInComponent" : "VertexInComponent[g,{v₁,v₂,…}] gives the vertices in the graph g that have a directed path to at least one of v₁, v₂, ….\nVertexInComponent[g,{v₁,v₂,…},k] gives the vertices with a directed path to at least one of v₁, v₂, … of at most length k.", 
"VertexInDegree" : "VertexInDegree[g] gives the list of vertex in-degrees for all vertices in the graph g.\nVertexInDegree[g,v] gives the vertex in-degree for the vertex v.", 
"VertexIndex" : "VertexIndex[g,v] gives the integer index for the vertex v in the graph g.", 
"VertexLabeling" : "VertexLabeling is an option for GraphPlot and related functions which specifies whether labeling should be included by default for vertices in graphs.", 
"VertexLabels" : "VertexLabels is an option and property for Graph and related functions that specifies what labels and label positions should be used for vertices.", 
"VertexLabelStyle" : "VertexLabelStyle is an option and property for Graph and related functions that specifies the style to use for vertex labels.", 
"VertexList" : "VertexList[g] gives the list of vertices for the graph g.\nVertexList[g,patt] gives a list of vertices that match the pattern patt.", 
"VertexNormals" : "VertexNormals is an option for graphics primitives which specifies the normal directions to assign to 3D vertices.", 
"VertexOutComponent" : "VertexOutComponent[g,{v₁,v₂,…}] gives the vertices in the graph g that have a directed path from at least one of v₁, v₂, ….\nVertexOutComponent[g,{v₁,v₂,…},k] gives the vertices with a directed path from at least one of v₁, v₂, … of at most length k.", 
"VertexOutDegree" : "VertexOutDegree[g] gives the list of vertex out-degrees for all vertices in the graph g.\nVertexOutDegree[g,v] gives the vertex out-degree for the vertex v.", 
"VertexQ" : "VertexQ[g,v] yields True if v is a vertex in the graph g and False otherwise.", 
"VertexRenderingFunction" : "VertexRenderingFunction is an option for GraphPlot and related functions that gives a function to generate the graphics primitives to use in rendering each vertex.", 
"VertexReplace" : "VertexReplace[g,{v₁->w₁,v₂->w₂,…}] replaces each vertex vᵢ in the graph g by wᵢ. ", 
"VertexShape" : "VertexShape is an option and property for Graph and related functions that specifies the graphics used for vertices.", 
"VertexShapeFunction" : "VertexShapeFunction is an option and property for Graph and related functions that specifies a function to use to generate primitives for rendering each vertex. ", 
"VertexSize" : "VertexSize is an option and property for Graph and related functions that specifies the size used for vertices. ", 
"VertexStyle" : "VertexStyle is an option and property for Graph and related functions that specifies what style to use for vertices. ", 
"VertexTextureCoordinates" : "VertexTextureCoordinates is an option for graphics primitives that specifies the texture coordinates to assign to vertices.", 
"VertexWeight" : "VertexWeight is an option and property for Graph and related functions that specifies a vertex weight.", 
"VerticalBar" : "VerticalBar[x,y,…] displays as x|y|….", 
"VerticalForm" : "VerticalForm is an internal symbol used for formatting and printing.", 
"VerticalSeparator" : "VerticalSeparator[x,y,…] displays as x|y|….", 
"VerticalSlider" : "VerticalSlider[y] represents a vertical slider at position y with range 0 to 1. \nVerticalSlider[Dynamic[y]] takes the position to be the dynamically updated current value of y, with the value of y being reset if the slider is moved. \nVerticalSlider[y,{yₘᵢₙ,yₘₐₓ}] represents a vertical slider with range yₘᵢₙ to yₘₐₓ. \nVerticalSlider[y,{yₘᵢₙ,yₘₐₓ,dy}] represents a vertical slider that jumps in steps dy. \nVerticalSlider[y,{{e₁,e₂,…}}] represents a slider in which equally spaced intervals correspond to successive settings eᵢ. \nVerticalSlider[y,{{{e₁,h₁},{e₂,h₂},…}}] uses intervals of relative heights hᵢ for the eᵢ. ", 
"VerticalTilde" : "VerticalTilde[x,y,…] displays as x≀y≀….", 
"ViewAngle" : "ViewAngle is an option for Graphics3D and related functions which gives the opening half-angle for a simulated camera used to view the three-dimensional scene. ", 
"ViewCenter" : "ViewCenter is an option for Graphics3D and related functions which gives the scaled coordinates of the point which should appear at the center of the final image. ", 
"ViewMatrix" : "ViewMatrix is an option for Graphics3D and related functions that can be used to specify a pair of explicit homogeneous transformation and projection matrices for 3D coordinates.", 
"ViewPoint" : "ViewPoint is an option for Graphics3D and related functions which gives the point in space from which three‐dimensional objects are to be viewed. ", 
"ViewRange" : "ViewRange is an option for Graphics3D and related functions which specifies the range of distances from the view point to be included in displaying a three-dimensional scene. ", 
"ViewVector" : "ViewVector is an option for Graphics3D and related functions which specifies the position and direction of a simulated camera used to view three-dimensional objects. ", 
"ViewVertical" : "ViewVertical is an option for Graphics3D and related functions which specifies what direction in scaled coordinates should be vertical in the final image. ", 
"Visible" : "Visible is a notebook option which specifies whether the notebook should be explicitly displayed on the screen. ", 
"VonMisesDistribution" : "VonMisesDistribution[μ,κ] represents a von Mises distribution with mean μ and concentration κ.", 
"WaitAll" : "WaitAll[expr] waits for all concurrent evaluations represented by EvaluationObject expressions in expr to finish, then returns the resulting expression obtained.", 
"WaitNext" : "WaitNext[{eid₁,eid₂,…}] waits until the first evaluation represented by any of the eidᵢ finishes, then returns its result, the corresponding eidᵢ, and the list of remaining eidₖ. ", 
"WakebyDistribution" : "WakebyDistribution[α,β,γ,δ,μ] represents Wakeby distribution with shape parameters β and δ, scale parameters α and γ, and location parameter μ.", 
"WalleniusHypergeometricDistribution" : "WalleniusHypergeometricDistribution[n,Subscript[n,succ],nₜₒₜ,w] represents a Wallenius noncentral hypergeometric distribution.", 
"WaringYuleDistribution" : "WaringYuleDistribution[α] represents the Yule distribution with shape parameter α.\nWaringYuleDistribution[α,β] represents the Waring distribution with shape parameters α and β.", 
"WatershedComponents" : "WatershedComponents[image] computes the watershed transform of image, returning the result as a matrix in which positive integers label the catchment basins.\nWatershedComponents[image,marker] uses a binary image marker to indicate regions where basins may be created.", 
"WatsonUSquareTest" : "WatsonUSquareTest[data] tests whether data is normally distributed using the Watson U² test.\nWatsonUSquareTest[data,dist] tests whether data is distributed according to dist using the Watson U² test.\nWatsonUSquareTest[data,dist,\"property\"] returns the value of \"property\".", 
"WattsStrogatzGraphDistribution" : "WattsStrogatzGraphDistribution[n,p] represents the Watts–Strogatz graph distribution for n-vertex graphs with rewiring probability p.\nWattsStrogatzGraphDistribution[n,p,k] represents the Watts–Strogatz graph distribution for n-vertex graphs with rewiring probability p starting from a 2k-regular graph.", 
"WaveletBestBasis" : "WaveletBestBasis[dwd] computes a best basis representation in the DiscreteWaveletData object dwd.\nWaveletBestBasis[dwd,cspec] computes a best basis representation using the cost specification cspec.", 
"WaveletFilterCoefficients" : "WaveletFilterCoefficients[wave,filt] gives the filter coefficients for the symbolic wavelet wave of type filt. ", 
"WaveletImagePlot" : "WaveletImagePlot[dwd] plots the basis tree of wavelet image coefficients in the DiscreteWaveletData dwd.\nWaveletImagePlot[dwd,r] plots coefficients up to refinement level r.\nWaveletImagePlot[dwd,r,ifunc] applies the image function ifunc to coefficients and wavelet indexes before plotting.", 
"WaveletListPlot" : "WaveletListPlot[dwd] plots wavelet transform coefficients in the DiscreteWaveletData dwd.\nWaveletListPlot[dwd,wind] plots wavelet transform coefficients corresponding to the wavelet index specification wind.\nWaveletListPlot[dwd,wind,func] applies func to coefficients before plotting. \nWaveletListPlot[{dwd₁,dwd₂,…},…] plots wavelet transform coefficients from several DiscreteWaveletData objects dwd₁, dwd₂, ….", 
"WaveletMapIndexed" : "WaveletMapIndexed[f,wd] applies the function f to the arrays of coefficients and indices of a ContinuousWaveletData or DiscreteWaveletData object.\nWaveletMapIndexed[f,dwd,wind] applies f to the DiscreteWaveletData coefficients specified by wind.\nWaveletMapIndexed[f,cwd,octvoc] applies f to the ContinuousWaveletData coefficients specified by octvoc.", 
"WaveletMatrixPlot" : "WaveletMatrixPlot[dwd] plots the basis tree of wavelet matrix coefficients in the DiscreteWaveletData dwd.\nWaveletMatrixPlot[dwd,r] plots coefficients up to refinement level r.\nWaveletMatrixPlot[dwd,r,func] applies func to coefficients before plotting. ", 
"WaveletPhi" : "WaveletPhi[wave,x] gives the scaling function ϕ(x) for the symbolic wavelet wave evaluated at x.\nWaveletPhi[wave] gives the scaling function as a pure function.", 
"WaveletPsi" : "WaveletPsi[wave,x] gives the wavelet function ψ(x) for the symbolic wavelet wave evaluated at x.\nWaveletPsi[wave] gives the wavelet function as a pure function.", 
"WaveletScale" : "WaveletScale is an option for ContinuousWaveletTransform and related constructs used to specify the smallest resolvable scale. ", 
"WaveletScalogram" : "WaveletScalogram[wd] plots wavelet vector coefficients in a DiscreteWaveletData or ContinuousWaveletData object wd.\nWaveletScalogram[wd,wind] plots wavelet coefficients corresponding to the wavelet index specification wind.\nWaveletScalogram[wd,wind,func] applies func to coefficients before plotting. ", 
"WaveletThreshold" : "WaveletThreshold[dwd] thresholds the detail wavelet coefficients in the DiscreteWaveletData object dwd.\nWaveletThreshold[dwd,tspec] thresholds the coefficients using the thresholding specification tspec.\nWaveletThreshold[dwd,tspec,wind] thresholds the wavelet coefficients given by the wavelet indices wind.", 
"WeatherData" : "WeatherData[loc,\"property\"] gives the most recent measurement for the specified weather property at the location corresponding to loc.\nWeatherData[loc,\"property\",date] gives all measurements during the specified date.\nWeatherData[loc,\"property\",{start,end}] gives a list of dates and measurements for the time interval start to end.\nWeatherData[loc,\"property\",{start,end,step}] gives measurements aggregated over the time period represented by step.", 
"WeberE" : "WeberE[ν,z] gives the Weber function Subscript[E,ν](z).\nWeberE[ν,μ,z] gives the associated Weber function E Subsuperscript[, ν, μ](z).", 
"Wedge" : "Wedge[x,y,…] displays as x⋀y⋀….", 
"WeibullDistribution" : "WeibullDistribution[α,β] represents a Weibull distribution with shape parameter α and scale parameter β.\nWeibullDistribution[α,β,μ] represents a Weibull distribution with shape parameter α, scale parameter β, and location parameter μ.", 
"WeierstrassHalfPeriods" : "WeierstrassHalfPeriods[{g₂,g₃}] gives the half‐periods {ω,Superscript[ω, ′]} for Weierstrass elliptic functions corresponding to the invariants {g₂,g₃}.", 
"WeierstrassInvariants" : "WeierstrassInvariants[{ω,Superscript[ω, ′]}] gives the invariants {g₂,g₃} for Weierstrass elliptic functions corresponding to the half‐periods {ω,Superscript[ω, ′]}. ", 
"WeierstrassP" : "WeierstrassP[u,{g₂,g₃}] gives the Weierstrass elliptic function ℘(u;g₂,g₃). ", 
"WeierstrassPPrime" : "WeierstrassPPrime[u,{g₂,g₃}] gives the derivative of the Weierstrass elliptic function ℘(u;g₂,g₃). ", 
"WeierstrassSigma" : "WeierstrassSigma[u,{g₂,g₃}] gives the Weierstrass sigma function σ(u;g₂,g₃). ", 
"WeierstrassZeta" : "WeierstrassZeta[u,{g₂,g₃}] gives the Weierstrass zeta function ζ(u;g₂,g₃). ", 
"WeightedAdjacencyGraph" : "WeightedAdjacencyGraph[wmat] gives the graph with weighted adjacency matrix wmat.\nWeightedAdjacencyGraph[{v₁,v₂,…},wmat] gives the graph with vertices vᵢ and weighted adjacency matrix wmat.", 
"WeightedAdjacencyMatrix" : "WeightedAdjacencyMatrix[g] gives the adjacency matrix of edge weights of the graph g.", 
"WeightedGraphQ" : "WeightedGraphQ[g] yields True if the graph g is a weighted graph and False otherwise.", 
"Weights" : "Weights is an option for various fitting and other functions which specifies weights to associate with data elements.", 
"WheelGraph" : "WheelGraph[n] gives the wheel graph with n vertices Wₙ.", 
"Which" : "Which[test₁,value₁,test₂,value₂,…] evaluates each of the testᵢ in turn, returning the value of the valueᵢ corresponding to the first one that yields True. ", 
"While" : "While[test,body] evaluates test, then body, repetitively, until test first fails to give True. ", 
"White" : "White represents the color white in graphics or style specifications. ", 
"Whitespace" : "Whitespace represents a sequence of whitespace characters in StringExpression.", 
"WhitespaceCharacter" : "WhitespaceCharacter represents a single whitespace character in StringExpression.", 
"WhittakerM" : "WhittakerM[k,m,z] gives the Whittaker function Subscript[M,k,m](z). ", 
"WhittakerW" : "WhittakerW[k,m,z] gives the Whittaker function Subscript[W,k,m](z). ", 
"WienerFilter" : "WienerFilter[image,r] removes noise from image by applying a range-r Wiener filter.\nWienerFilter[image,r,ns] assumes an additive noise power value ns.", 
"WignerD" : "WignerD[{j,m₁,m₂},ψ,θ,ϕ] gives the Wigner D-function D Subsuperscript[, m₁,m₂, j](ψ,θ,ϕ).\nWignerD[{j,m₁,m₂},θ,ϕ] gives the Wigner D-function D Subsuperscript[, m₁,m₂, j](0,θ,ϕ).\nWignerD[{j,m₁,m₂},θ] gives the Wigner D-function D Subsuperscript[, m₁,m₂, j](0,θ,0).", 
"WignerSemicircleDistribution" : "WignerSemicircleDistribution[r] represents a Wigner semicircle distribution with radius r centered at the origin.\nWignerSemicircleDistribution[a,r] represents a Wigner semicircle distribution with radius r centered at a.", 
"WindowClickSelect" : "WindowClickSelect is a notebook option that specifies whether the window for the notebook should become selected if you click it. ", 
"WindowElements" : "WindowElements is a notebook option that specifies the elements to include in the window used to display the notebook on the screen. ", 
"WindowFloating" : "WindowFloating is a notebook option that specifies whether the window for the notebook should float on top of other windows when it is displayed on the screen. ", 
"WindowFrame" : "WindowFrame is a notebook option that specifies the type of frame to draw around the window in which the notebook is displayed on the screen. ", 
"WindowFrameElements" : "WindowFrameElements is an option for notebooks that specifies the elements to include in the frame of the window used to display the notebook on the screen.", 
"WindowMargins" : "WindowMargins is a notebook option that specifies what margins to leave around the window that is used to display the notebook on the screen. ", 
"WindowMovable" : "WindowMovable is a notebook option that specifies whether to allow the window for the notebook to be moved around interactively on the screen. ", 
"WindowOpacity" : "WindowOpacity is a notebook option that determines the overall opacity of a displayed window.", 
"WindowSize" : "WindowSize is a notebook option that specifies the size of window that should be used to display a notebook on the screen. ", 
"WindowStatusArea" : "WindowStatusArea is a notebook option that specifies what should appear in the status area in the frame of the window used to display the notebook. ", 
"WindowTitle" : "WindowTitle is an option that specifies the title to give for a window. ", 
"WindowToolbars" : "WindowToolbars is a notebook option that specifies the toolbars to include at the top of the window used to display the notebook on the screen. ", 
"With" : "With[{x=x₀,y=y₀,…},expr] specifies that in expr occurrences of the symbols x, y, … should be replaced by x₀, y₀, …. ", 
"WolframAlpha" : "WolframAlpha[\"query\"] sends query to Wolfram|Alpha and imports the output.\nWolframAlpha[\"query\",format] imports the output according to the specified format.", 
"Word" : "Word represents a word in Read, Find, and related functions. ", 
"WordBoundary" : "WordBoundary represents a boundary between words for purposes of matching in StringExpression.", 
"WordCharacter" : "WordCharacter represents a letter or digit character in StringExpression.", 
"WordData" : "WordData[\"word\",\"property\"] gives the specified property for the English word \"word\".\nWordData[\"word\"] gives a list of full word specifications representing possible uses and senses of \"word\".\nWordData[wordspec,\"property\"] gives a property for a particular word specification.", 
"WordSearch" : "WordSearch is an option for Find and FindList that specifies whether the text searched for must appear as a word. ", 
"WordSeparators" : "WordSeparators is an option for Read, Find, and related functions that specifies the list of strings to be taken as delimiters for words. ", 
"WorkingPrecision" : "WorkingPrecision is an option for various numerical operations that specifies how many digits of precision should be maintained in internal computations. ", 
"Write" : "Write[channel,expr₁,expr₂,…] writes the expressions exprᵢ in sequence, followed by a newline, to the specified output channel. ", 
"WriteString" : "WriteString[channel,expr₁,expr₂,…] converts the exprᵢ to strings, and then writes them in sequence to the specified output channel. ", 
"Wronskian" : "Wronskian[{y₁,y₂,…},x] gives the Wronskian determinant for the functions y₁,y₂,… depending on x.\nWronskian[eqn,y,x] gives the Wronskian determinant for the basis of the solutions of the linear differential equation eqn with dependent variable y and independent variable x. \nWronskian[eqns,{y₁,y₂,…},x] gives the Wronskian determinant for the system of linear differential equations eqns.", 
"XMLElement" : "XMLElement[tag,{attr₁->val₁,…},{data₁,…}] represents an element in symbolic XML.", 
"XMLObject" : "XMLObject[\"type\"] represents the head of an XML object in symbolic XML.", 
"Xnor" : "Xnor[e₁,e₂,…] is the logical XNOR (not XOR) function. It gives True if an even number of the eᵢ are True, and the rest are False. It gives False if an odd number of the eᵢ are True, and the rest are False. ", 
"Xor" : "Xor[e₁,e₂,…] is the logical XOR (exclusive OR) function. It gives True if an odd number of the eᵢ are True, and the rest are False. It gives False if an even number of the eᵢ are True, and the rest are False. ", 
"Yellow" : "Yellow represents the color yellow in graphics or style specifications. ", 
"YuleDissimilarity" : "YuleDissimilarity[u,v] gives the Yule dissimilarity between Boolean vectors u and v.", 
"ZernikeR" : "ZernikeR[n,m,r] gives the radial Zernike polynomial R Subsuperscript[, n, m](r).", 
"ZeroTest" : "ZeroTest is an option to various linear algebra functions that gives a function to use in testing whether symbolic expressions should be treated as zero.", 
"ZeroWidthTimes" : "ZeroWidthTimes is an option for selections that specifies whether blank spaces representing multiplication are explicitly shown.", 
"Zeta" : "Zeta[s] gives the Riemann zeta function ζ(s). \nZeta[s,a] gives the generalized Riemann zeta function ζ(s,a). ", 
"ZetaZero" : "ZetaZero[k] represents the kᵗʰ zero of the Riemann zeta function on the critical line.\nZetaZero[k,t] represents the kᵗʰ zero with imaginary part greater than t.", 
"ZipfDistribution" : "ZipfDistribution[ρ] represents a zeta distribution with parameter ρ.\nZipfDistribution[n,ρ] represents a Zipf distribution with range n.", 
"ZTest" : "ZTest[data] tests whether the mean of the data is zero. \nZTest[{data₁,data₂}] tests whether the means of data₁ and data₂ are equal.\nZTest[dspec,σ] tests for zero or equal means assuming a population variance σ.\nZTest[dspec,σ,μ₀] tests the mean against μ₀.\nZTest[dspec,σ,μ₀,\"property\"] returns the value of \"property\".", 
"ZTransform" : "ZTransform[expr,n,z] gives the Z transform of expr. \nZTransform[expr,{n₁,n₂,…},{z₁,z₂,…}] gives the multidimensional Z transform of expr.", 
"$Aborted" : "$Aborted is a special symbol that is returned as the result from a calculation that has been aborted. ", 
"$AllowDataUpdates" : "$AllowDataUpdates specifies whether Mathematica should automatically update data collections (like CountryData, ElementData, etc.) as newer data become available. Set it to False to prevent Mathematica from attempting to download updates.", 
"$AllowDocumentationUpdates" : "$AllowDocumentationUpdates specifies whether Mathematica should automatically update documentation notebooks from the Internet as newer ones become available. Set it to False to prevent Mathematica from attempting to download newer notebooks as you browse the documentation.", 
"$AllowInternet" : "$AllowInternet specifies whether Mathematica should attempt to use the Internet for certain operations. Set it to False to prevent Internet use.", 
"$AssertFunction" : "$AssertFunction specifies a function to apply to assertions that fail.", 
"$Assumptions" : "$Assumptions is the default setting for the Assumptions option used in such functions as Simplify, Refine, and Integrate. ", 
"$BaseDirectory" : "$BaseDirectory gives the base directory in which systemwide files to be loaded by Mathematica are conventionally placed. ", 
"$BatchInput" : "$BatchInput is True if input in the current session is being fed directly to the Mathematica kernel in batch mode. ", 
"$BatchOutput" : "$BatchOutput is True if output in the current session is being sent in batch mode, suitable for reading by other programs. ", 
"$BoxForms" : "$BoxForms is the list of box formats.", 
"$ByteOrdering" : "$ByteOrdering gives the native ordering of bytes in binary data on your computer system. ", 
"$Canceled" : "$Canceled is a symbol returned when notebook input is canceled, for example from a dialog box.", 
"$CharacterEncoding" : "$CharacterEncoding specifies the default raw character encoding to use for input and output functions. ", 
"$CharacterEncodings" : "$CharacterEncodings gives the list of character encodings that can be used.", 
"$CommandLine" : "$CommandLine is a list of strings giving the elements of the original operating system command line with which Mathematica was invoked. ", 
"$CompilationTarget" : "$CompilationTarget gives the default value for the option CompilationTarget of Compile.", 
"$ConditionHold" : "$ConditionHold is an internal symbol.", 
"$ConfiguredKernels" : "$ConfiguredKernels is the default list of kernels that are configured to be launched for parallel computing.", 
"$Context" : "$Context is a global variable that gives the current context. ", 
"$ContextPath" : "$ContextPath is a global variable that gives a list of contexts, after $Context, to search in trying to find a symbol that has been entered. ", 
"$ControlActiveSetting" : "$ControlActiveSetting is a symbol whose value is True if it is evaluated while a control is active, or in certain other previewing situations. ", 
"$CreationDate" : "$CreationDate gives the date and time at which the particular release of the Mathematica kernel you are running was created. ", 
"$CurrentLink" : "$CurrentLink is the LinkObject representing the MathLink connection for an external program currently being installed or being called. ", 
"$DateStringFormat" : "$DateStringFormat gives the default format to use for date strings generated by DateString.", 
"$DefaultFont" : "$DefaultFont give a global default setting for the option DefaultFont.", 
"$DefaultImagingDevice" : "$DefaultImagingDevice gives the name of the default imaging device attached to the computer.", 
"$DefaultPath" : "$DefaultPath is the default setting for $Path for this copy of Mathematica session.", 
"$Display" : "$Display gives a list of files and pipes to be used with the default $DisplayFunction. ", 
"$DisplayFunction" : "$DisplayFunction gives the default setting for the option DisplayFunction in graphics functions. ", 
"$DistributedContexts" : "$DistributedContexts is the default value of the DistributedContexts option of functions such as ParallelTable and ParallelMap.", 
"$DynamicEvaluation" : "$DynamicEvaluation is a symbol whose value is True if it is evaluated as part of the evaluation of a Dynamic.", 
"$Echo" : "$Echo gives a list of files and pipes to which all input is echoed. ", 
"$Epilog" : "$Epilog is a symbol whose value, if any, is evaluated when a dialog or a Mathematica session is terminated. ", 
"$ExportFormats" : "$ExportFormats gives a list of export formats currently supported in your Mathematica system. ", 
"$Failed" : "$Failed is a special symbol returned by certain functions when they cannot do what they were asked to do. ", 
"$FormatType" : "$FormatType gives the default format type to use for text that appears in graphics. ", 
"$FrontEnd" : "$FrontEnd is a global variable that specifies to what front end object, if any, the kernel is currently connected. ", 
"$FrontEndSession" : "$FrontEndSession is a global symbol that represents the current session of the front end from which the kernel is being run.", 
"$GeoLocation" : "$GeoLocation is a settable global variable that specifies the default geodetic location to use.", 
"$HistoryLength" : "$HistoryLength specifies the number of previous lines of input and output to keep in a Mathematica session. ", 
"$HomeDirectory" : "$HomeDirectory gives your \"home\" directory. ", 
"$IgnoreEOF" : "$IgnoreEOF specifies whether Mathematica should terminate when it receives an end‐of‐file character as input. ", 
"$ImagingDevices" : "$ImagingDevices gives a list of available imaging devices.", 
"$ImportFormats" : "$ImportFormats gives a list of import formats currently supported in your Mathematica system. ", 
"$InitialDirectory" : "$InitialDirectory gives the initial directory when the current Mathematica session was started. ", 
"$Input" : "$Input is a global variable whose value is the name of the stream from which input to Mathematica is currently being sought. ", 
"$InputFileName" : "$InputFileName is a global variable whose value is the absolute file name of the input file from which input to Mathematica is currently being sought.", 
"$Inspector" : "$Inspector is a global variable which gives a function to apply when the inspector is invoked from an interrupt menu. ", 
"$InstallationDate" : "$InstallationDate gives the date and time at which the copy of the Mathematica kernel you are running was installed. ", 
"$InstallationDirectory" : "$InstallationDirectory gives the top‐level directory in which your Mathematica installation resides. ", 
"$InstalledServices" : "$InstalledServices is a list of the installed web service operations.", 
"$InternetProxyRules" : "$InternetProxyRules is a list of rules that control how Mathematica accesses the Internet. Unless the first rule is UseProxy->True, the other rules, which specify protocol-specific proxies, are not used. Instead of modifying $InternetProxyRules directly, use the UseInternetProxy and SetInternetProxy functions, or the Help > Internet Connectivity dialog in the front end.", 
"$IterationLimit" : "$IterationLimit gives the maximum length of evaluation chain used in trying to evaluate any expression. ", 
"$KernelCount" : "$KernelCount gives the number of subkernels available for parallel computations.", 
"$KernelID" : "$KernelID is a unique ID number assigned to each running parallel kernel.", 
"$Language" : "$Language is a list of strings which give the names of languages to use for messages. ", 
"$LibraryPath" : "$LibraryPath gives the default list of directories to search in attempting to find a library.", 
"$LicenseExpirationDate" : "$LicenseExpirationDate is a date list that gives the expiration date for the license under which Mathematica is being run.", 
"$LicenseID" : "$LicenseID is a string that gives the license ID under which Mathematica is being run.", 
"$LicenseProcesses" : "$LicenseProcesses is the number of Mathematica processes currently being run under the license.", 
"$LicenseServer" : "$LicenseServer is a string that gives the name of the license server that is currently authorizing Mathematica to be run.", 
"$LicenseSubprocesses" : "$LicenseSubprocesses is the number of Mathematica subprocesses currently being run under the license.", 
"$Line" : "$Line is a global variable that specifies the number of the current input line. ", 
"$Linked" : "$Linked is True if the Mathematica kernel is being run through MathLink. ", 
"$LinkSupported" : "$LinkSupported is True if MathLink can be used in the version of Mathematica you are running, and is False otherwise.", 
"$MachineAddresses" : "$MachineAddresses gives a list of strings specifying the current IP addresses associated with the computer on which Mathematica is being run.", 
"$MachineDomain" : "$MachineDomain is a string which gives the name of the network domain for the computer on which Mathematica is being run, if such a name is defined. ", 
"$MachineDomains" : "$MachineDomains is a list of strings giving the names of the current network domains associated with the computer on which Mathematica is being run. ", 
"$MachineEpsilon" : "$MachineEpsilon gives the difference between 1.0 and the next-nearest number representable as a machine-precision number. ", 
"$MachineID" : "$MachineID is a string that gives, if possible, a unique identification code for the computer on which Mathematica is being run.", 
"$MachineName" : "$MachineName is a string that gives the assigned name of the computer on which Mathematica is being run, if such a name is defined. ", 
"$MachinePrecision" : "$MachinePrecision gives the number of decimal digits of precision used for machine‐precision numbers. ", 
"$MachineType" : "$MachineType is a string giving the general type of computer on which Mathematica is being run. ", 
"$MaxExtraPrecision" : "$MaxExtraPrecision gives the maximum number of extra digits of precision to be used in functions such as N. ", 
"$MaxLicenseProcesses" : "$MaxLicenseProcesses is the maximum number of processes provided by the license.", 
"$MaxLicenseSubprocesses" : "$MaxLicenseSubprocesses is the maximum number of subprocesses provided by the license.", 
"$MaxMachineNumber" : "$MaxMachineNumber is the largest machine‐precision number that can be used on a particular computer system. ", 
"$MaxNumber" : "$MaxNumber gives the maximum arbitrary‐precision number that can be represented on a particular computer system. ", 
"$MaxPiecewiseCases" : "$MaxPiecewiseCases gives the maximum number of cases to allow in explicit Piecewise objects generated by expanding any single piecewise function. ", 
"$MaxPrecision" : "$MaxPrecision gives the maximum number of digits of precision to be allowed in arbitrary‐precision numbers. ", 
"$MaxRootDegree" : "$MaxRootDegree specifies the maximum degree of polynomial to allow in Root objects.", 
"$MessageGroups" : "$MessageGroups is the list of rules that gives named message groups used in functions like On and Quiet.", 
"$MessageList" : "$MessageList is a global variable that gives a list of the names of messages generated during the evaluation of the current input line. ", 
"$MessagePrePrint" : "$MessagePrePrint is a global variable whose value, if set, is applied to expressions before they are included in the text of messages. ", 
"$Messages" : "$Messages gives the list of files and pipes to which message output is sent. ", 
"$MinMachineNumber" : "$MinMachineNumber is the smallest positive machine‐precision number that can be used on a particular computer system. ", 
"$MinNumber" : "$MinNumber gives the minimum positive arbitrary‐precision number that can be represented on a particular computer system. ", 
"$MinPrecision" : "$MinPrecision gives the minimum number of digits of precision to be allowed in arbitrary‐precision numbers. ", 
"$ModuleNumber" : "$ModuleNumber gives the current serial number to be used for local variables that are created. ", 
"$NetworkLicense" : "$NetworkLicense gives True if using a network license, and False otherwise.", 
"$NewMessage" : "$NewMessage is a global variable which, if set, is applied to the symbol name and tag of messages that are requested but have not yet been defined. ", 
"$NewSymbol" : "$NewSymbol is a global variable which, if set, is applied to the name and context of each new symbol that Mathematica creates. ", 
"$Notebooks" : "$Notebooks is True if Mathematica is being used with a notebook‐based front end. ", 
"$NumberMarks" : "$NumberMarks gives the default value for the option NumberMarks, which specifies whether ` marks should be included in the input form representations of approximate numbers. ", 
"$OperatingSystem" : "$OperatingSystem is a string giving the type of operating system under which Mathematica is being run. ", 
"$Output" : "$Output gives the list of files and pipes to which standard output from Mathematica is sent. ", 
"$OutputForms" : "$OutputForms is a list of the formatting functions that get stripped off when wrapped around the output.", 
"$OutputSizeLimit" : "$OutputSizeLimit specifies the maximum size in bytes of expressions that will automatically be output in their entirety in a Mathematica notebook. ", 
"$Packages" : "$Packages gives a list of the contexts corresponding to all packages which have been loaded in your current Mathematica session. ", 
"$PacletSite" : "$PacletSite gives the location of the main Wolfram Research paclet server.", 
"$ParentLink" : "$ParentLink is the MathLink LinkObject currently used for input and output by the Mathematica kernel in a particular session. ", 
"$ParentProcessID" : "$ParentProcessID gives the ID assigned to the process which invokes the Mathematica kernel by the operating system under which it is run. ", 
"$PasswordFile" : "$PasswordFile is a string giving the password file used when the kernel was started.", 
"$Path" : "$Path gives the default list of directories to search in attempting to find an external file. ", 
"$PathnameSeparator" : "$PathnameSeparator is a string used as a separator when full file and directory names are constructed.", 
"$PerformanceGoal" : "$PerformanceGoal gives the default setting for the option PerformanceGoal for graphics and other algorithmic functions.", 
"$PipeSupported" : "$PipeSupported is True if pipes can be used in the version of Mathematica you are running, and is False otherwise.", 
"$Post" : "$Post is a global variable whose value, if set, is applied to every output expression. ", 
"$Pre" : "$Pre is a global variable whose value, if set, is applied to every input expression. ", 
"$PrePrint" : "$PrePrint is a global variable whose value, if set, is applied to every expression before it is printed. ", 
"$PreRead" : "$PreRead is a global variable whose value, if set, is applied to the text or box form of every input expression before it is fed to Mathematica. ", 
"$PrintForms" : "$PrintForms is the list of basic print forms. It is automatically updated when Format definitions using new printforms are made.", 
"$PrintLiteral" : "$PrintLiteral is an internal symbol.", 
"$PrintServiceRequest" : "$PrintServiceRequest uses the  Mathematica  Print function to print the message sent to a web service. ", 
"$PrintServiceResponse" : "$PrintServiceResponse uses the  Mathematica  Print function to print the message received from a web service before it is deserialized into a Rule syntax expression. ", 
"$PrintShortErrorMessages" : "$PrintShortErrorMessages specifies whether error messages from the web service operations will be shortened for the user to avoid long, intimidating error messages.", 
"$PrintWSDLDebug" : "$PrintWSDLDebug specifies whether WSDL debugging information will be printed when installing a web service. ", 
"$ProcessID" : "$ProcessID gives the ID assigned to the Mathematica kernel process by the operating system under which it is run. ", 
"$ProcessorCount" : "$ProcessorCount gives the number of processor cores available on the computer system on which Mathematica is being run.", 
"$ProcessorType" : "$ProcessorType is a string giving the architecture of the processor on which Mathematica is being run. ", 
"$ProductInformation" : "$ProductInformation is a list of rules giving detailed information about the software product to which the current kernel belongs. ", 
"$ProgramName" : "$ProgramName is the name of the program being run under the license.", 
"$RandomState" : "$RandomState gives a representation of the internal state of the pseudorandom generator used by Random. ", 
"$RecursionLimit" : "$RecursionLimit gives the current limit on the number of levels of recursion that Mathematica can use. ", 
"$ReleaseNumber" : "$ReleaseNumber is an integer which gives the current Mathematica kernel release number, and increases in successive releases. ", 
"$RootDirectory" : "$RootDirectory gives the root directory of your file system.", 
"$ScheduledTask" : "$ScheduledTask returns the current ScheduledTaskObject. ", 
"$ScriptCommandLine" : "$ScriptCommandLine is a list of strings giving the elements of the command line with which the standalone Mathematica script was invoked.", 
"$SessionID" : "$SessionID is a number set up to be unique to a particular Mathematica session. ", 
"$SharedFunctions" : "$SharedFunctions is the list of functions currently being shared among parallel kernels.", 
"$SharedVariables" : "$SharedVariables is the list of variables currently being shared among parallel kernels.", 
"$SoundDisplayFunction" : "$SoundDisplayFunction gives the default setting for the option DisplayFunction in sound functions. ", 
"$SuppressInputFormHeads" : "$SuppressInputFormHeads is a list of the heads of expressions whose InputForm should not be sent automatically to front ends.", 
"$SyntaxHandler" : "$SyntaxHandler is a global variable which, if set, is applied to any input string that is found to contain a syntax error. ", 
"$System" : "$System is a string describing the type of computer system on which Mathematica is being run. ", 
"$SystemCharacterEncoding" : "$SystemCharacterEncoding gives the default raw character encoding for the computer system on which Mathematica is being run. ", 
"$SystemID" : "$SystemID is a short string that identifies the type of computer system on which Mathematica is being run. ", 
"$SystemWordLength" : "$SystemWordLength gives the effective number of bits in raw machine words on the computer system where Mathematica is running.", 
"$TemporaryDirectory" : "$TemporaryDirectory gives the main system directory for temporary files on your computer system.", 
"$TemporaryPrefix" : "$TemporaryPrefix is a string that gives the path and beginning of the name for files and directories that are created by OpenWrite and CreateDirectory when no explicit file is specified.", 
"$TextStyle" : "$TextStyle gives the default style to use for text in graphics. ", 
"$TimedOut" : "$TimedOut is a special symbol returned by certain functions when an operation times out.", 
"$TimeUnit" : "$TimeUnit gives the minimum time interval in seconds recorded on your computer system. ", 
"$TimeZone" : "$TimeZone gives the current time zone to assume for dates and times. ", 
"$TracePattern" : "$TracePattern is the currently active pattern argument to Trace and related functions. It can be reset during the trace to alter the set of expressions recorded or printed.", 
"$TracePostAction" : "$TracePostAction is the currently active fourth argument to TraceScan (or the equivalent in related functions). It can be reset during the trace to alter the action taken after intercepted expressions are evaluated.", 
"$TracePreAction" : "$TracePreAction is the currently active first argument to TraceScan (or the equivalent in related functions). It can be reset during the trace to alter the action taken before intercepted expressions are evaluated.", 
"$Urgent" : "$Urgent gives the list of files and pipes to which urgent output from Mathematica is sent. ", 
"$UserBaseDirectory" : "$UserBaseDirectory gives the base directory in which user‐specific files to be loaded by Mathematica are conventionally placed. ", 
"$UserBasePacletsDirectory" : "$UserBasePacletsDirectory is the base directory where the PacletManager stores installed paclets and configuration data. If you want this to point to a different directory, you must call RestartPacletManager[\"newBaseDir\"].", 
"$UserDocumentsDirectory" : "$UserDocumentsDirectory gives your default \"documents\" directory. ", 
"$UserName" : "$UserName gives the login name of the user who invoked the Mathematica kernel, as recorded by the operating system. ", 
"$Version" : "$Version is a string that gives the version of the Mathematica kernel you are running. ", 
"$VersionNumber" : "$VersionNumber is a real number which gives the current Mathematica kernel version number, and increases in successive versions. "};

begin();
